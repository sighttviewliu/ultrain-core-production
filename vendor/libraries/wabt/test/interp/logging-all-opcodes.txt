;;; TOOL: run-interp
;;; ARGS*: -v --enable-threads --enable-saturating-float-to-int --enable-sign-extension --enable-simd --enable-tail-call
;;; ARGS1: --host-print

(module
  (import "host" "print" (func $print (param i32)))

  (type $empty (func))
  (func $empty)
  (memory 1 1 shared)
  (table anyfunc (elem $empty $empty))
  (global $g (mut i32) (i32.const 0))

  (; 0x00 ;) (func (export "unreachable") unreachable)
  (; 0x01 ;) ;; nop       -- not generated in interpreter
  (; 0x02 ;) ;; block     -- not generated in interpreter
  (; 0x03 ;) ;; loop      -- not generated in interpreter
  (; 0x04 ;) ;; if        -- not generated in interpreter
  (; 0x05 ;) ;; else      -- not generated in interpreter
  (; 0x06 ;) ;; try       -- not implemented
  (; 0x07 ;) ;; catch     -- not implemented
  (; 0x08 ;) ;; throw     -- not implemented
  (; 0x09 ;) ;; rethrow   -- not implemented
  (; 0x0a ;) ;; catch_all -- not implemented
  (; 0x0b ;) ;; end       -- not generated in interpreter
  (; 0x0c ;) (func (export "br") br 0)
  (; 0x0d ;) ;; 0x0d br_if  ;; not generated in interpreter
  (; 0x0e ;) (func (export "br_table") i32.const 1 br_table 0)
  (; 0x0f ;) (func (export "return") return)
  (; 0x10 ;) (func (export "call") call $empty)
  (; 0x11 ;) (func (export "call_indirect") i32.const 1 call_indirect (type $empty))

  ;; --enable-tail-call
  (; 0x12 ;) (func (export "return_call") return_call $empty)
  (; 0x13 ;) (func (export "return_call_indirect") i32.const 1 return_call_indirect (type $empty))

  (; 0x1a ;) (func (export "drop") i32.const 1 drop)
  (; 0x1b ;) (func (export "select") i32.const 1 i32.const 2 i32.const 3 select drop)
  (; 0x20 ;) (func (export "get_local") (local i32) get_local 0 drop)
  (; 0x21 ;) (func (export "set_local") (local i32) i32.const 1 set_local 0)
  (; 0x22 ;) (func (export "tee_local") (local i32) i32.const 1 tee_local 0 drop)
  (; 0x23 ;) (func (export "get_global") get_global 0 drop)
  (; 0x24 ;) (func (export "set_global") i32.const 1 set_global 0)
  (; 0x28 ;) (func (export "i32.load") i32.const 1 i32.load offset=2 drop)
  (; 0x29 ;) (func (export "i64.load") i32.const 1 i64.load offset=2 drop)
  (; 0x2a ;) (func (export "f32.load") i32.const 1 f32.load offset=2 drop)
  (; 0x2b ;) (func (export "f64.load") i32.const 1 f64.load offset=2 drop)
  (; 0x2c ;) (func (export "i32.load8_s") i32.const 1 i32.load8_s offset=2 drop)
  (; 0x2d ;) (func (export "i32.load8_u") i32.const 1 i32.load8_u offset=2 drop)
  (; 0x2e ;) (func (export "i32.load16_s") i32.const 1 i32.load16_s offset=2 drop)
  (; 0x2f ;) (func (export "i32.load16_u") i32.const 1 i32.load16_u offset=2 drop)
  (; 0x30 ;) (func (export "i64.load8_s") i32.const 1 i64.load8_s offset=2 drop)
  (; 0x31 ;) (func (export "i64.load8_u") i32.const 1 i64.load8_u offset=2 drop)
  (; 0x32 ;) (func (export "i64.load16_s") i32.const 1 i64.load16_s offset=2 drop)
  (; 0x33 ;) (func (export "i64.load16_u") i32.const 1 i64.load16_u offset=2 drop)
  (; 0x34 ;) (func (export "i64.load32_s") i32.const 1 i64.load32_s offset=2 drop)
  (; 0x35 ;) (func (export "i64.load32_u") i32.const 1 i64.load32_u offset=2 drop)
  (; 0x36 ;) (func (export "i32.store") i32.const 1 i32.const 2 i32.store offset=2)
  (; 0x37 ;) (func (export "i64.store") i32.const 1 i64.const 2 i64.store offset=2)
  (; 0x38 ;) (func (export "f32.store") i32.const 1 f32.const 2 f32.store offset=2)
  (; 0x39 ;) (func (export "f64.store") i32.const 1 f64.const 2 f64.store offset=2)
  (; 0x3a ;) (func (export "i32.store8") i32.const 1 i32.const 2 i32.store8 offset=2)
  (; 0x3b ;) (func (export "i32.store16") i32.const 1 i32.const 2 i32.store16 offset=2)
  (; 0x3c ;) (func (export "i64.store8") i32.const 1 i64.const 2 i64.store8 offset=2)
  (; 0x3d ;) (func (export "i64.store16") i32.const 1 i64.const 2 i64.store16 offset=2)
  (; 0x3e ;) (func (export "i64.store32") i32.const 1 i64.const 2 i64.store32 offset=2)
  (; 0x3f ;) (func (export "current_memory") current_memory drop)
  (; 0x40 ;) (func (export "grow_memory") i32.const 1 grow_memory drop)
  (; 0x41 ;) (func (export "i32.const") i32.const 1 drop)
  (; 0x42 ;) (func (export "i64.const") i64.const 1 drop)
  (; 0x43 ;) (func (export "f32.const") f32.const 1 drop)
  (; 0x44 ;) (func (export "f64.const") f64.const 1 drop)
  (; 0x45 ;) (func (export "i32.eqz") i32.const 1 i32.eqz drop)
  (; 0x46 ;) (func (export "i32.eq") i32.const 1 i32.const 2 i32.eq drop)
  (; 0x47 ;) (func (export "i32.ne") i32.const 1 i32.const 2 i32.ne drop)
  (; 0x48 ;) (func (export "i32.lt_s") i32.const 1 i32.const 2 i32.lt_s drop)
  (; 0x49 ;) (func (export "i32.lt_u") i32.const 1 i32.const 2 i32.lt_u drop)
  (; 0x4a ;) (func (export "i32.gt_s") i32.const 1 i32.const 2 i32.gt_s drop)
  (; 0x4b ;) (func (export "i32.gt_u") i32.const 1 i32.const 2 i32.gt_u drop)
  (; 0x4c ;) (func (export "i32.le_s") i32.const 1 i32.const 2 i32.le_s drop)
  (; 0x4d ;) (func (export "i32.le_u") i32.const 1 i32.const 2 i32.le_u drop)
  (; 0x4e ;) (func (export "i32.ge_s") i32.const 1 i32.const 2 i32.ge_s drop)
  (; 0x4f ;) (func (export "i32.ge_u") i32.const 1 i32.const 2 i32.ge_u drop)
  (; 0x50 ;) (func (export "i64.eqz") i64.const 1 i64.eqz drop)
  (; 0x51 ;) (func (export "i64.eq") i64.const 1 i64.const 2 i64.eq drop)
  (; 0x52 ;) (func (export "i64.ne") i64.const 1 i64.const 2 i64.ne drop)
  (; 0x53 ;) (func (export "i64.lt_s") i64.const 1 i64.const 2 i64.lt_s drop)
  (; 0x54 ;) (func (export "i64.lt_u") i64.const 1 i64.const 2 i64.lt_u drop)
  (; 0x55 ;) (func (export "i64.gt_s") i64.const 1 i64.const 2 i64.gt_s drop)
  (; 0x56 ;) (func (export "i64.gt_u") i64.const 1 i64.const 2 i64.gt_u drop)
  (; 0x57 ;) (func (export "i64.le_s") i64.const 1 i64.const 2 i64.le_s drop)
  (; 0x58 ;) (func (export "i64.le_u") i64.const 1 i64.const 2 i64.le_u drop)
  (; 0x59 ;) (func (export "i64.ge_s") i64.const 1 i64.const 2 i64.ge_s drop)
  (; 0x5a ;) (func (export "i64.ge_u") i64.const 1 i64.const 2 i64.ge_u drop)
  (; 0x5b ;) (func (export "f32.eq") f32.const 1 f32.const 2 f32.eq drop)
  (; 0x5c ;) (func (export "f32.ne") f32.const 1 f32.const 2 f32.ne drop)
  (; 0x5d ;) (func (export "f32.lt") f32.const 1 f32.const 2 f32.lt drop)
  (; 0x5e ;) (func (export "f32.gt") f32.const 1 f32.const 2 f32.gt drop)
  (; 0x5f ;) (func (export "f32.le") f32.const 1 f32.const 2 f32.le drop)
  (; 0x60 ;) (func (export "f32.ge") f32.const 1 f32.const 2 f32.ge drop)
  (; 0x61 ;) (func (export "f64.eq") f64.const 1 f64.const 2 f64.eq drop)
  (; 0x62 ;) (func (export "f64.ne") f64.const 1 f64.const 2 f64.ne drop)
  (; 0x63 ;) (func (export "f64.lt") f64.const 1 f64.const 2 f64.lt drop)
  (; 0x64 ;) (func (export "f64.gt") f64.const 1 f64.const 2 f64.gt drop)
  (; 0x65 ;) (func (export "f64.le") f64.const 1 f64.const 2 f64.le drop)
  (; 0x66 ;) (func (export "f64.ge") f64.const 1 f64.const 2 f64.ge drop)
  (; 0x67 ;) (func (export "i32.clz") i32.const 1 i32.clz drop)
  (; 0x68 ;) (func (export "i32.ctz") i32.const 1 i32.ctz drop)
  (; 0x69 ;) (func (export "i32.popcnt") i32.const 1 i32.popcnt drop)
  (; 0x6a ;) (func (export "i32.add") i32.const 1 i32.const 2 i32.add drop)
  (; 0x6b ;) (func (export "i32.sub") i32.const 1 i32.const 2 i32.sub drop)
  (; 0x6c ;) (func (export "i32.mul") i32.const 1 i32.const 2 i32.mul drop)
  (; 0x6d ;) (func (export "i32.div_s") i32.const 1 i32.const 2 i32.div_s drop)
  (; 0x6e ;) (func (export "i32.div_u") i32.const 1 i32.const 2 i32.div_u drop)
  (; 0x6f ;) (func (export "i32.rem_s") i32.const 1 i32.const 2 i32.rem_s drop)
  (; 0x70 ;) (func (export "i32.rem_u") i32.const 1 i32.const 2 i32.rem_u drop)
  (; 0x71 ;) (func (export "i32.and") i32.const 1 i32.const 2 i32.and drop)
  (; 0x72 ;) (func (export "i32.or") i32.const 1 i32.const 2 i32.or drop)
  (; 0x73 ;) (func (export "i32.xor") i32.const 1 i32.const 2 i32.xor drop)
  (; 0x74 ;) (func (export "i32.shl") i32.const 1 i32.const 2 i32.shl drop)
  (; 0x75 ;) (func (export "i32.shr_s") i32.const 1 i32.const 2 i32.shr_s drop)
  (; 0x76 ;) (func (export "i32.shr_u") i32.const 1 i32.const 2 i32.shr_u drop)
  (; 0x77 ;) (func (export "i32.rotl") i32.const 1 i32.const 2 i32.rotl drop)
  (; 0x78 ;) (func (export "i32.rotr") i32.const 1 i32.const 2 i32.rotr drop)
  (; 0x79 ;) (func (export "i64.clz") i64.const 1 i64.clz drop)
  (; 0x7a ;) (func (export "i64.ctz") i64.const 1 i64.ctz drop)
  (; 0x7b ;) (func (export "i64.popcnt") i64.const 1 i64.popcnt drop)
  (; 0x7c ;) (func (export "i64.add") i64.const 1 i64.const 2 i64.add drop)
  (; 0x7d ;) (func (export "i64.sub") i64.const 1 i64.const 2 i64.sub drop)
  (; 0x7e ;) (func (export "i64.mul") i64.const 1 i64.const 2 i64.mul drop)
  (; 0x7f ;) (func (export "i64.div_s") i64.const 1 i64.const 2 i64.div_s drop)
  (; 0x80 ;) (func (export "i64.div_u") i64.const 1 i64.const 2 i64.div_u drop)
  (; 0x81 ;) (func (export "i64.rem_s") i64.const 1 i64.const 2 i64.rem_s drop)
  (; 0x82 ;) (func (export "i64.rem_u") i64.const 1 i64.const 2 i64.rem_u drop)
  (; 0x83 ;) (func (export "i64.and") i64.const 1 i64.const 2 i64.and drop)
  (; 0x84 ;) (func (export "i64.or") i64.const 1 i64.const 2 i64.or drop)
  (; 0x85 ;) (func (export "i64.xor") i64.const 1 i64.const 2 i64.xor drop)
  (; 0x86 ;) (func (export "i64.shl") i64.const 1 i64.const 2 i64.shl drop)
  (; 0x87 ;) (func (export "i64.shr_s") i64.const 1 i64.const 2 i64.shr_s drop)
  (; 0x88 ;) (func (export "i64.shr_u") i64.const 1 i64.const 2 i64.shr_u drop)
  (; 0x89 ;) (func (export "i64.rotl") i64.const 1 i64.const 2 i64.rotl drop)
  (; 0x8a ;) (func (export "i64.rotr") i64.const 1 i64.const 2 i64.rotr drop)
  (; 0x8b ;) (func (export "f32.abs") f32.const 1 f32.abs drop)
  (; 0x8c ;) (func (export "f32.neg") f32.const 1 f32.neg drop)
  (; 0x8d ;) (func (export "f32.ceil") f32.const 1 f32.ceil drop)
  (; 0x8e ;) (func (export "f32.floor") f32.const 1 f32.floor drop)
  (; 0x8f ;) (func (export "f32.trunc") f32.const 1 f32.trunc drop)
  (; 0x90 ;) (func (export "f32.nearest") f32.const 1 f32.nearest drop)
  (; 0x91 ;) (func (export "f32.sqrt") f32.const 1 f32.sqrt drop)
  (; 0x92 ;) (func (export "f32.add") f32.const 1 f32.const 2 f32.add drop)
  (; 0x93 ;) (func (export "f32.sub") f32.const 1 f32.const 2 f32.sub drop)
  (; 0x94 ;) (func (export "f32.mul") f32.const 1 f32.const 2 f32.mul drop)
  (; 0x95 ;) (func (export "f32.div") f32.const 1 f32.const 2 f32.div drop)
  (; 0x96 ;) (func (export "f32.min") f32.const 1 f32.const 2 f32.min drop)
  (; 0x97 ;) (func (export "f32.max") f32.const 1 f32.const 2 f32.max drop)
  (; 0x98 ;) (func (export "f32.copysign") f32.const 1 f32.const 2 f32.copysign drop)
  (; 0x99 ;) (func (export "f64.abs") f64.const 1 f64.abs drop)
  (; 0x9a ;) (func (export "f64.neg") f64.const 1 f64.neg drop)
  (; 0x9b ;) (func (export "f64.ceil") f64.const 1 f64.ceil drop)
  (; 0x9c ;) (func (export "f64.floor") f64.const 1 f64.floor drop)
  (; 0x9d ;) (func (export "f64.trunc") f64.const 1 f64.trunc drop)
  (; 0x9e ;) (func (export "f64.nearest") f64.const 1 f64.nearest drop)
  (; 0x9f ;) (func (export "f64.sqrt") f64.const 1 f64.sqrt drop)
  (; 0xa0 ;) (func (export "f64.add") f64.const 1 f64.const 2 f64.add drop)
  (; 0xa1 ;) (func (export "f64.sub") f64.const 1 f64.const 2 f64.sub drop)
  (; 0xa2 ;) (func (export "f64.mul") f64.const 1 f64.const 2 f64.mul drop)
  (; 0xa3 ;) (func (export "f64.div") f64.const 1 f64.const 2 f64.div drop)
  (; 0xa4 ;) (func (export "f64.min") f64.const 1 f64.const 2 f64.min drop)
  (; 0xa5 ;) (func (export "f64.max") f64.const 1 f64.const 2 f64.max drop)
  (; 0xa6 ;) (func (export "f64.copysign") f64.const 1 f64.const 2 f64.copysign drop)
  (; 0xa7 ;) (func (export "i32.wrap/i64") i64.const 1 i32.wrap/i64 drop)
  (; 0xa8 ;) (func (export "i32.trunc_s/f32") f32.const 1 i32.trunc_s/f32 drop)
  (; 0xa9 ;) (func (export "i32.trunc_u/f32") f32.const 1 i32.trunc_u/f32 drop)
  (; 0xaa ;) (func (export "i32.trunc_s/f64") f64.const 1 i32.trunc_s/f64 drop)
  (; 0xab ;) (func (export "i32.trunc_u/f64") f64.const 1 i32.trunc_u/f64 drop)
  (; 0xac ;) (func (export "i64.extend_s/i32") i32.const 1 i64.extend_s/i32 drop)
  (; 0xad ;) (func (export "i64.extend_u/i32") i32.const 1 i64.extend_u/i32 drop)
  (; 0xae ;) (func (export "i64.trunc_s/f32") f32.const 1 i64.trunc_s/f32 drop)
  (; 0xaf ;) (func (export "i64.trunc_u/f32") f32.const 1 i64.trunc_u/f32 drop)
  (; 0xb0 ;) (func (export "i64.trunc_s/f64") f64.const 1 i64.trunc_s/f64 drop)
  (; 0xb1 ;) (func (export "i64.trunc_u/f64") f64.const 1 i64.trunc_u/f64 drop)
  (; 0xb2 ;) (func (export "f32.convert_s/i32") i32.const 1 f32.convert_s/i32 drop)
  (; 0xb3 ;) (func (export "f32.convert_u/i32") i32.const 1 f32.convert_u/i32 drop)
  (; 0xb4 ;) (func (export "f32.convert_s/i64") i64.const 1 f32.convert_s/i64 drop)
  (; 0xb5 ;) (func (export "f32.convert_u/i64") i64.const 1 f32.convert_u/i64 drop)
  (; 0xb6 ;) (func (export "f32.demote/f64") f64.const 1 f32.demote/f64 drop)
  (; 0xb7 ;) (func (export "f64.convert_s/i32") i32.const 1 f64.convert_s/i32 drop)
  (; 0xb8 ;) (func (export "f64.convert_u/i32") i32.const 1 f64.convert_u/i32 drop)
  (; 0xb9 ;) (func (export "f64.convert_s/i64") i64.const 1 f64.convert_s/i64 drop)
  (; 0xba ;) (func (export "f64.convert_u/i64") i64.const 1 f64.convert_u/i64 drop)
  (; 0xbb ;) (func (export "f64.promote/f32") f32.const 1 f64.promote/f32 drop)
  (; 0xbc ;) (func (export "i32.reinterpret/f32") i32.const 1 f32.reinterpret/i32 drop)
  (; 0xbd ;) (func (export "f32.reinterpret/i32") f32.const 1 i32.reinterpret/f32 drop)
  (; 0xbe ;) (func (export "i64.reinterpret/f64") i64.const 1 f64.reinterpret/i64 drop)
  (; 0xbf ;) (func (export "f64.reinterpret/i64") f64.const 1 i64.reinterpret/f64 drop)

  ;; --enable-sign-extension
  (; 0xc0 ;) (func (export "i32.extend8_s") i32.const 1 i32.extend8_s drop)
  (; 0xc1 ;) (func (export "i32.extend16_s") i32.const 1 i32.extend16_s drop)
  (; 0xc2 ;) (func (export "i64.extend8_s") i64.const 1 i64.extend8_s drop)
  (; 0xc3 ;) (func (export "i64.extend16_s") i64.const 1 i64.extend16_s drop)
  (; 0xc4 ;) (func (export "i64.extend32_s") i64.const 1 i64.extend32_s drop)

  ;; Interpreter opcodes
  (; 0xe0 ;) (func (export "alloca") (local i32))
  (; 0xe1 ;) (func (export "br_unless") i32.const 1 br_if 0)
  (; 0xe2 ;) (func (export "call_host") i32.const 1 call $print)
  (; 0xe3 ;) (func (export "data") i32.const 1 br_table 0)
  (; 0xe4 ;) (func (export "drop_keep") block (result i32) i32.const 1 i32.const 2 br 0 end drop)

  ;; --enable-saturating-float-to-int
  (; 0xfc 0x00 ;) (func (export "i32.trunc_s:sat/f32") f32.const 1 i32.trunc_s:sat/f32 drop)
  (; 0xfc 0x01 ;) (func (export "i32.trunc_u:sat/f32") f32.const 1 i32.trunc_u:sat/f32 drop)
  (; 0xfc 0x02 ;) (func (export "i32.trunc_s:sat/f64") f64.const 1 i32.trunc_s:sat/f64 drop)
  (; 0xfc 0x03 ;) (func (export "i32.trunc_u:sat/f64") f64.const 1 i32.trunc_u:sat/f64 drop)
  (; 0xfc 0x04 ;) (func (export "i64.trunc_s:sat/f32") f32.const 1 i64.trunc_s:sat/f32 drop)
  (; 0xfc 0x05 ;) (func (export "i64.trunc_u:sat/f32") f32.const 1 i64.trunc_u:sat/f32 drop)
  (; 0xfc 0x06 ;) (func (export "i64.trunc_s:sat/f64") f64.const 1 i64.trunc_s:sat/f64 drop)
  (; 0xfc 0x07 ;) (func (export "i64.trunc_u:sat/f64") f64.const 1 i64.trunc_u:sat/f64 drop)

  ;; --enable-simd
  (; 0xfd 0x00 ;) (func (export "v128.load") i32.const 1 v128.load offset=3 drop)
  (; 0xfd 0x01 ;) (func (export "v128.store") i32.const 1 v128.const i32 1 1 1 1 v128.store offset=3)
  (; 0xfd 0x02 ;) (func (export "v128.const") v128.const i32 1 1 1 1 drop)
  (; 0xfd 0x03 ;) (func (export "v8x16.shuffle") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 v8x16.shuffle 1 1 1 1 drop)
  (; 0xfd 0x04 ;) (func (export "i8x16.splat") i32.const 1 i8x16.splat drop)
  (; 0xfd 0x05 ;) (func (export "i8x16.extract_lane_s") v128.const i32 1 1 1 1 i8x16.extract_lane_s 15 drop)
  (; 0xfd 0x06 ;) (func (export "i8x16.extract_lane_u") v128.const i32 1 1 1 1 i8x16.extract_lane_u 15 drop)
  (; 0xfd 0x07 ;) (func (export "i8x16.replace_lane") v128.const i32 1 1 1 1 i32.const 0 i8x16.replace_lane 15 drop)
  (; 0xfd 0x08 ;) (func (export "i16x8.splat") i32.const 1 i16x8.splat drop)
  (; 0xfd 0x09 ;) (func (export "i16x8.extract_lane_s") v128.const i32 1 1 1 1 i16x8.extract_lane_s 7 drop)
  (; 0xfd 0x0a ;) (func (export "i16x8.extract_lane_u") v128.const i32 1 1 1 1 i16x8.extract_lane_u 7 drop)
  (; 0xfd 0x0b ;) (func (export "i16x8.replace_lane") v128.const i32 1 1 1 1 i32.const 0 i16x8.replace_lane 7 drop)
  (; 0xfd 0x0c ;) (func (export "i32x4.splat") i32.const 1 i32x4.splat drop)
  (; 0xfd 0x0d ;) (func (export "i32x4.extract_lane") v128.const i32 1 1 1 1 i32x4.extract_lane 3 drop)
  (; 0xfd 0x0e ;) (func (export "i32x4.replace_lane") v128.const i32 1 1 1 1 i32.const 0 i32x4.replace_lane 3 drop)
  (; 0xfd 0x0f ;) (func (export "i64x2.splat") i64.const 1 i64x2.splat drop)
  (; 0xfd 0x10 ;) (func (export "i64x2.extract_lane") v128.const i32 1 1 1 1 i64x2.extract_lane 1 drop)
  (; 0xfd 0x11 ;) (func (export "i64x2.replace_lane") v128.const i32 1 1 1 1 i64.const 0 i64x2.replace_lane 1 drop)
  (; 0xfd 0x12 ;) (func (export "f32x4.splat") f32.const 1 f32x4.splat drop)
  (; 0xfd 0x13 ;) (func (export "f32x4.extract_lane") v128.const i32 1 1 1 1 f32x4.extract_lane 3 drop)
  (; 0xfd 0x14 ;) (func (export "f32x4.replace_lane") v128.const i32 1 1 1 1 f32.const 0 f32x4.replace_lane 3 drop)
  (; 0xfd 0x15 ;) (func (export "f64x2.splat") f64.const 1 f64x2.splat drop)
  (; 0xfd 0x16 ;) (func (export "f64x2.extract_lane") v128.const i32 1 1 1 1 f64x2.extract_lane 1 drop)
  (; 0xfd 0x17 ;) (func (export "f64x2.replace_lane") v128.const i32 1 1 1 1 f64.const 0 f64x2.replace_lane 1 drop)
  (; 0xfd 0x18 ;) (func (export "i8x16.eq") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i8x16.eq drop)
  (; 0xfd 0x19 ;) (func (export "i8x16.ne") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i8x16.ne drop)
  (; 0xfd 0x1a ;) (func (export "i8x16.lt_s") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i8x16.lt_s drop)
  (; 0xfd 0x1b ;) (func (export "i8x16.lt_u") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i8x16.lt_u drop)
  (; 0xfd 0x1c ;) (func (export "i8x16.gt_s") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i8x16.gt_s drop)
  (; 0xfd 0x1d ;) (func (export "i8x16.gt_u") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i8x16.gt_u drop)
  (; 0xfd 0x1e ;) (func (export "i8x16.le_s") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i8x16.le_s drop)
  (; 0xfd 0x1f ;) (func (export "i8x16.le_u") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i8x16.le_u drop)
  (; 0xfd 0x20 ;) (func (export "i8x16.ge_s") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i8x16.ge_s drop)
  (; 0xfd 0x21 ;) (func (export "i8x16.ge_u") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i8x16.ge_u drop)
  (; 0xfd 0x22 ;) (func (export "i16x8.eq") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i16x8.eq drop)
  (; 0xfd 0x23 ;) (func (export "i16x8.ne") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i16x8.ne drop)
  (; 0xfd 0x24 ;) (func (export "i16x8.lt_s") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i16x8.lt_s drop)
  (; 0xfd 0x25 ;) (func (export "i16x8.lt_u") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i16x8.lt_u drop)
  (; 0xfd 0x26 ;) (func (export "i16x8.gt_s") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i16x8.gt_s drop)
  (; 0xfd 0x27 ;) (func (export "i16x8.gt_u") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i16x8.gt_u drop)
  (; 0xfd 0x28 ;) (func (export "i16x8.le_s") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i16x8.le_s drop)
  (; 0xfd 0x29 ;) (func (export "i16x8.le_u") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i16x8.le_u drop)
  (; 0xfd 0x2a ;) (func (export "i16x8.ge_s") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i16x8.ge_s drop)
  (; 0xfd 0x2b ;) (func (export "i16x8.ge_u") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i16x8.ge_u drop)
  (; 0xfd 0x2c ;) (func (export "i32x4.eq") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i32x4.eq drop)
  (; 0xfd 0x2d ;) (func (export "i32x4.ne") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i32x4.ne drop)
  (; 0xfd 0x2e ;) (func (export "i32x4.lt_s") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i32x4.lt_s drop)
  (; 0xfd 0x2f ;) (func (export "i32x4.lt_u") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i32x4.lt_u drop)
  (; 0xfd 0x30 ;) (func (export "i32x4.gt_s") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i32x4.gt_s drop)
  (; 0xfd 0x31 ;) (func (export "i32x4.gt_u") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i32x4.gt_u drop)
  (; 0xfd 0x32 ;) (func (export "i32x4.le_s") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i32x4.le_s drop)
  (; 0xfd 0x33 ;) (func (export "i32x4.le_u") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i32x4.le_u drop)
  (; 0xfd 0x34 ;) (func (export "i32x4.ge_s") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i32x4.ge_s drop)
  (; 0xfd 0x35 ;) (func (export "i32x4.ge_u") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i32x4.ge_u drop)
  (; 0xfd 0x40 ;) (func (export "f32x4.eq") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 f32x4.eq drop)
  (; 0xfd 0x41 ;) (func (export "f32x4.ne") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 f32x4.ne drop)
  (; 0xfd 0x42 ;) (func (export "f32x4.lt") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 f32x4.lt drop)
  (; 0xfd 0x43 ;) (func (export "f32x4.gt") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 f32x4.gt drop)
  (; 0xfd 0x44 ;) (func (export "f32x4.le") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 f32x4.le drop)
  (; 0xfd 0x45 ;) (func (export "f32x4.ge") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 f32x4.ge drop)
  (; 0xfd 0x46 ;) (func (export "f64x2.eq") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 f64x2.eq drop)
  (; 0xfd 0x47 ;) (func (export "f64x2.ne") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 f64x2.ne drop)
  (; 0xfd 0x48 ;) (func (export "f64x2.lt") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 f64x2.lt drop)
  (; 0xfd 0x49 ;) (func (export "f64x2.gt") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 f64x2.gt drop)
  (; 0xfd 0x4a ;) (func (export "f64x2.le") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 f64x2.le drop)
  (; 0xfd 0x4b ;) (func (export "f64x2.ge") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 f64x2.ge drop)
  (; 0xfd 0x4c ;) (func (export "v128.not") v128.const i32 1 1 1 1 v128.not drop)
  (; 0xfd 0x4d ;) (func (export "v128.and") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 v128.and drop)
  (; 0xfd 0x4e ;) (func (export "v128.or") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 v128.or drop)
  (; 0xfd 0x4f ;) (func (export "v128.xor") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 v128.xor drop)
  (; 0xfd 0x50 ;) (func (export "v128.bitselect") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 v128.const i32 3 3 3 3 v128.bitselect drop)
  (; 0xfd 0x51 ;) (func (export "i8x16.neg") v128.const i32 1 1 1 1 i8x16.neg drop)
  (; 0xfd 0x52 ;) (func (export "i8x16.any_true") v128.const i32 1 1 1 1 i8x16.any_true drop)
  (; 0xfd 0x53 ;) (func (export "i8x16.all_true") v128.const i32 1 1 1 1 i8x16.all_true drop)
  (; 0xfd 0x54 ;) (func (export "i8x16.shl") v128.const i32 1 1 1 1 i32.const 0 i8x16.shl drop)
  (; 0xfd 0x55 ;) (func (export "i8x16.shr_s") v128.const i32 1 1 1 1 i32.const 0 i8x16.shr_s drop)
  (; 0xfd 0x56 ;) (func (export "i8x16.shr_u") v128.const i32 1 1 1 1 i32.const 0 i8x16.shr_u drop)
  (; 0xfd 0x57 ;) (func (export "i8x16.add") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i8x16.add drop)
  (; 0xfd 0x58 ;) (func (export "i8x16.add_saturate_s") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i8x16.add_saturate_s drop)
  (; 0xfd 0x59 ;) (func (export "i8x16.add_saturate_u") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i8x16.add_saturate_u drop)
  (; 0xfd 0x5a ;) (func (export "i8x16.sub") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i8x16.sub drop)
  (; 0xfd 0x5b ;) (func (export "i8x16.sub_saturate_s") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i8x16.sub_saturate_s drop)
  (; 0xfd 0x5c ;) (func (export "i8x16.sub_saturate_u") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i8x16.sub_saturate_u drop)
  (; 0xfd 0x5d ;) (func (export "i8x16.mul") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i8x16.mul drop)
  (; 0xfd 0x62 ;) (func (export "i16x8.neg") v128.const i32 1 1 1 1 i16x8.neg drop)
  (; 0xfd 0x63 ;) (func (export "i16x8.any_true") v128.const i32 1 1 1 1 i16x8.any_true drop)
  (; 0xfd 0x64 ;) (func (export "i16x8.all_true") v128.const i32 1 1 1 1 i16x8.all_true drop)
  (; 0xfd 0x65 ;) (func (export "i16x8.shl") v128.const i32 1 1 1 1 i32.const 0 i16x8.shl drop)
  (; 0xfd 0x66 ;) (func (export "i16x8.shr_s") v128.const i32 1 1 1 1 i32.const 0 i16x8.shr_s drop)
  (; 0xfd 0x67 ;) (func (export "i16x8.shr_u") v128.const i32 1 1 1 1 i32.const 0 i16x8.shr_u drop)
  (; 0xfd 0x68 ;) (func (export "i16x8.add") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i16x8.add drop)
  (; 0xfd 0x69 ;) (func (export "i16x8.add_saturate_s") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i16x8.add_saturate_s drop)
  (; 0xfd 0x6a ;) (func (export "i16x8.add_saturate_u") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i16x8.add_saturate_u drop)
  (; 0xfd 0x6b ;) (func (export "i16x8.sub") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i16x8.sub drop)
  (; 0xfd 0x6c ;) (func (export "i16x8.sub_saturate_s") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i16x8.sub_saturate_s drop)
  (; 0xfd 0x6d ;) (func (export "i16x8.sub_saturate_u") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i16x8.sub_saturate_u drop)
  (; 0xfd 0x6e ;) (func (export "i16x8.mul") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i16x8.mul drop)
  (; 0xfd 0x73 ;) (func (export "i32x4.neg") v128.const i32 1 1 1 1 i32x4.neg drop)
  (; 0xfd 0x74 ;) (func (export "i32x4.any_true") v128.const i32 1 1 1 1 i32x4.any_true drop)
  (; 0xfd 0x75 ;) (func (export "i32x4.all_true") v128.const i32 1 1 1 1 i32x4.all_true drop)
  (; 0xfd 0x76 ;) (func (export "i32x4.shl") v128.const i32 1 1 1 1 i32.const 0 i32x4.shl drop)
  (; 0xfd 0x77 ;) (func (export "i32x4.shr_s") v128.const i32 1 1 1 1 i32.const 0 i32x4.shr_s drop)
  (; 0xfd 0x78 ;) (func (export "i32x4.shr_u") v128.const i32 1 1 1 1 i32.const 0 i32x4.shr_u drop)
  (; 0xfd 0x79 ;) (func (export "i32x4.add") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i32x4.add drop)
  (; 0xfd 0x7c ;) (func (export "i32x4.sub") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i32x4.sub drop)
  (; 0xfd 0x7f ;) (func (export "i32x4.mul") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i32x4.mul drop)
  (; 0xfd 0x84 ;) (func (export "i64x2.neg") v128.const i32 1 1 1 1 i64x2.neg drop)
  (; 0xfd 0x85 ;) (func (export "i64x2.any_true") v128.const i32 1 1 1 1 i64x2.any_true drop)
  (; 0xfd 0x86 ;) (func (export "i64x2.all_true") v128.const i32 1 1 1 1 i64x2.all_true drop)
  (; 0xfd 0x87 ;) (func (export "i64x2.shl") v128.const i32 1 1 1 1 i32.const 0 i64x2.shl drop)
  (; 0xfd 0x88 ;) (func (export "i64x2.shr_s") v128.const i32 1 1 1 1 i32.const 0 i64x2.shr_s drop)
  (; 0xfd 0x89 ;) (func (export "i64x2.shr_u") v128.const i32 1 1 1 1 i32.const 0 i64x2.shr_u drop)
  (; 0xfd 0x8a ;) (func (export "i64x2.add") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i64x2.add drop)
  (; 0xfd 0x8d ;) (func (export "i64x2.sub") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 i64x2.sub drop)
  (; 0xfd 0x95 ;) (func (export "f32x4.abs") v128.const i32 1 1 1 1 f32x4.abs drop)
  (; 0xfd 0x96 ;) (func (export "f32x4.neg") v128.const i32 1 1 1 1 f32x4.neg drop)
  (; 0xfd 0x97 ;) (func (export "f32x4.sqrt") v128.const i32 1 1 1 1 f32x4.sqrt drop)
  (; 0xfd 0x9a ;) (func (export "f32x4.add") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 f32x4.add drop)
  (; 0xfd 0x9b ;) (func (export "f32x4.sub") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 f32x4.sub drop)
  (; 0xfd 0x9c ;) (func (export "f32x4.mul") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 f32x4.mul drop)
  (; 0xfd 0x9d ;) (func (export "f32x4.div") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 f32x4.div drop)
  (; 0xfd 0x9e ;) (func (export "f32x4.min") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 f32x4.min drop)
  (; 0xfd 0x9f ;) (func (export "f32x4.max") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 f32x4.max drop)
  (; 0xfd 0xa0 ;) (func (export "f64x2.abs") v128.const i32 1 1 1 1 f64x2.abs drop)
  (; 0xfd 0xa1 ;) (func (export "f64x2.neg") v128.const i32 1 1 1 1 f64x2.neg drop)
  (; 0xfd 0xa2 ;) (func (export "f64x2.sqrt") v128.const i32 1 1 1 1 f64x2.sqrt drop)
  (; 0xfd 0xa5 ;) (func (export "f64x2.add") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 f64x2.add drop)
  (; 0xfd 0xa6 ;) (func (export "f64x2.sub") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 f64x2.sub drop)
  (; 0xfd 0xa7 ;) (func (export "f64x2.mul") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 f64x2.mul drop)
  (; 0xfd 0xa8 ;) (func (export "f64x2.div") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 f64x2.div drop)
  (; 0xfd 0xa9 ;) (func (export "f64x2.min") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 f64x2.min drop)
  (; 0xfd 0xaa ;) (func (export "f64x2.max") v128.const i32 1 1 1 1 v128.const i32 2 2 2 2 f64x2.max drop)
  (; 0xfd 0xab ;) (func (export "i32x4.trunc_sat_f32x4_s") v128.const i32 1 1 1 1 i32x4.trunc_sat_f32x4_s drop)
  (; 0xfd 0xac ;) (func (export "i32x4.trunc_sat_f32x4_u") v128.const i32 1 1 1 1 i32x4.trunc_sat_f32x4_u drop)
  (; 0xfd 0xad ;) (func (export "i64x2.trunc_sat_f64x2_s") v128.const i32 1 1 1 1 i64x2.trunc_sat_f64x2_s drop)
  (; 0xfd 0xae ;) (func (export "i64x2.trunc_sat_f64x2_u") v128.const i32 1 1 1 1 i64x2.trunc_sat_f64x2_u drop)
  (; 0xfd 0xaf ;) (func (export "f32x4.convert_i32x4_s") v128.const i32 1 1 1 1 f32x4.convert_i32x4_s drop)
  (; 0xfd 0xb0 ;) (func (export "f32x4.convert_i32x4_u") v128.const i32 1 1 1 1 f32x4.convert_i32x4_u drop)
  (; 0xfd 0xb1 ;) (func (export "f64x2.convert_i64x2_s") v128.const i32 1 1 1 1 f64x2.convert_i64x2_s drop)
  (; 0xfd 0xb2 ;) (func (export "f64x2.convert_i64x2_u") v128.const i32 1 1 1 1 f64x2.convert_i64x2_u drop)

  ;; --enable-threads
  (; 0xfe 0x00 ;) (func (export "atomic.notify") i32.const 1 i32.const 2 atomic.notify offset=3 drop)
  (; 0xfe 0x01 ;) (func (export "i32.atomic.wait") i32.const 1 i32.const 2 i64.const 3 i32.atomic.wait offset=3 drop)
  (; 0xfe 0x02 ;) (func (export "i64.atomic.wait") i32.const 1 i64.const 2 i64.const 3 i64.atomic.wait offset=3 drop)
  (; 0xfe 0x10 ;) (func (export "i32.atomic.load") i32.const 1 i32.atomic.load offset=3 drop)
  (; 0xfe 0x11 ;) (func (export "i64.atomic.load") i32.const 1 i64.atomic.load offset=7 drop)
  (; 0xfe 0x12 ;) (func (export "i32.atomic.load8_u") i32.const 1 i32.atomic.load8_u offset=3 drop)
  (; 0xfe 0x13 ;) (func (export "i32.atomic.load16_u") i32.const 1 i32.atomic.load16_u offset=3 drop)
  (; 0xfe 0x14 ;) (func (export "i64.atomic.load8_u") i32.const 1 i64.atomic.load8_u offset=3 drop)
  (; 0xfe 0x15 ;) (func (export "i64.atomic.load16_u") i32.const 1 i64.atomic.load16_u offset=3 drop)
  (; 0xfe 0x16 ;) (func (export "i64.atomic.load32_u") i32.const 1 i64.atomic.load32_u offset=3 drop)
  (; 0xfe 0x17 ;) (func (export "i32.atomic.store") i32.const 1 i32.const 2 i32.atomic.store offset=3)
  (; 0xfe 0x18 ;) (func (export "i64.atomic.store") i32.const 1 i64.const 2 i64.atomic.store offset=7)
  (; 0xfe 0x19 ;) (func (export "i32.atomic.store8") i32.const 1 i32.const 2 i32.atomic.store8 offset=3)
  (; 0xfe 0x1a ;) (func (export "i32.atomic.store16") i32.const 1 i32.const 2 i32.atomic.store16 offset=3)
  (; 0xfe 0x1b ;) (func (export "i64.atomic.store8") i32.const 1 i64.const 2 i64.atomic.store8 offset=3)
  (; 0xfe 0x1c ;) (func (export "i64.atomic.store16") i32.const 1 i64.const 2 i64.atomic.store16 offset=3)
  (; 0xfe 0x1d ;) (func (export "i64.atomic.store32") i32.const 1 i64.const 2 i64.atomic.store32 offset=3)
  (; 0xfe 0x1e ;) (func (export "i32.atomic.rmw.add") i32.const 1 i32.const 2 i32.atomic.rmw.add offset=3 drop)
  (; 0xfe 0x1f ;) (func (export "i64.atomic.rmw.add") i32.const 1 i64.const 2 i64.atomic.rmw.add offset=7 drop)
  (; 0xfe 0x20 ;) (func (export "i32.atomic.rmw8.add_u") i32.const 1 i32.const 2 i32.atomic.rmw8.add_u offset=3 drop)
  (; 0xfe 0x21 ;) (func (export "i32.atomic.rmw16.add_u") i32.const 1 i32.const 2 i32.atomic.rmw16.add_u offset=3 drop)
  (; 0xfe 0x22 ;) (func (export "i64.atomic.rmw8.add_u") i32.const 1 i64.const 2 i64.atomic.rmw8.add_u offset=3 drop)
  (; 0xfe 0x23 ;) (func (export "i64.atomic.rmw16.add_u") i32.const 1 i64.const 2 i64.atomic.rmw16.add_u offset=3 drop)
  (; 0xfe 0x24 ;) (func (export "i64.atomic.rmw32.add_u") i32.const 1 i64.const 2 i64.atomic.rmw32.add_u offset=3 drop)
  (; 0xfe 0x25 ;) (func (export "i32.atomic.rmw.sub") i32.const 1 i32.const 2 i32.atomic.rmw.sub offset=3 drop)
  (; 0xfe 0x26 ;) (func (export "i64.atomic.rmw.sub") i32.const 1 i64.const 2 i64.atomic.rmw.sub offset=7 drop)
  (; 0xfe 0x27 ;) (func (export "i32.atomic.rmw8.sub_u") i32.const 1 i32.const 2 i32.atomic.rmw8.sub_u offset=3 drop)
  (; 0xfe 0x28 ;) (func (export "i32.atomic.rmw16.sub_u") i32.const 1 i32.const 2 i32.atomic.rmw16.sub_u offset=3 drop)
  (; 0xfe 0x29 ;) (func (export "i64.atomic.rmw8.sub_u") i32.const 1 i64.const 2 i64.atomic.rmw8.sub_u offset=3 drop)
  (; 0xfe 0x2a ;) (func (export "i64.atomic.rmw16.sub_u") i32.const 1 i64.const 2 i64.atomic.rmw16.sub_u offset=3 drop)
  (; 0xfe 0x2b ;) (func (export "i64.atomic.rmw32.sub_u") i32.const 1 i64.const 2 i64.atomic.rmw32.sub_u offset=3 drop)
  (; 0xfe 0x2c ;) (func (export "i32.atomic.rmw.and") i32.const 1 i32.const 2 i32.atomic.rmw.and offset=3 drop)
  (; 0xfe 0x2d ;) (func (export "i64.atomic.rmw.and") i32.const 1 i64.const 2 i64.atomic.rmw.and offset=7 drop)
  (; 0xfe 0x2e ;) (func (export "i32.atomic.rmw8.and_u") i32.const 1 i32.const 2 i32.atomic.rmw8.and_u offset=3 drop)
  (; 0xfe 0x2f ;) (func (export "i32.atomic.rmw16.and_u") i32.const 1 i32.const 2 i32.atomic.rmw16.and_u offset=3 drop)
  (; 0xfe 0x30 ;) (func (export "i64.atomic.rmw8.and_u") i32.const 1 i64.const 2 i64.atomic.rmw8.and_u offset=3 drop)
  (; 0xfe 0x31 ;) (func (export "i64.atomic.rmw16.and_u") i32.const 1 i64.const 2 i64.atomic.rmw16.and_u offset=3 drop)
  (; 0xfe 0x32 ;) (func (export "i64.atomic.rmw32.and_u") i32.const 1 i64.const 2 i64.atomic.rmw32.and_u offset=3 drop)
  (; 0xfe 0x33 ;) (func (export "i32.atomic.rmw.or") i32.const 1 i32.const 2 i32.atomic.rmw.or offset=3 drop)
  (; 0xfe 0x34 ;) (func (export "i64.atomic.rmw.or") i32.const 1 i64.const 2 i64.atomic.rmw.or offset=7 drop)
  (; 0xfe 0x35 ;) (func (export "i32.atomic.rmw8.or_u") i32.const 1 i32.const 2 i32.atomic.rmw8.or_u offset=3 drop)
  (; 0xfe 0x36 ;) (func (export "i32.atomic.rmw16.or_u") i32.const 1 i32.const 2 i32.atomic.rmw16.or_u offset=3 drop)
  (; 0xfe 0x37 ;) (func (export "i64.atomic.rmw8.or_u") i32.const 1 i64.const 2 i64.atomic.rmw8.or_u offset=3 drop)
  (; 0xfe 0x38 ;) (func (export "i64.atomic.rmw16.or_u") i32.const 1 i64.const 2 i64.atomic.rmw16.or_u offset=3 drop)
  (; 0xfe 0x39 ;) (func (export "i64.atomic.rmw32.or_u") i32.const 1 i64.const 2 i64.atomic.rmw32.or_u offset=3 drop)
  (; 0xfe 0x3a ;) (func (export "i32.atomic.rmw.xor") i32.const 1 i32.const 2 i32.atomic.rmw.xor offset=3 drop)
  (; 0xfe 0x3b ;) (func (export "i64.atomic.rmw.xor") i32.const 1 i64.const 2 i64.atomic.rmw.xor offset=7 drop)
  (; 0xfe 0x3c ;) (func (export "i32.atomic.rmw8.xor_u") i32.const 1 i32.const 2 i32.atomic.rmw8.xor_u offset=3 drop)
  (; 0xfe 0x3d ;) (func (export "i32.atomic.rmw16.xor_u") i32.const 1 i32.const 2 i32.atomic.rmw16.xor_u offset=3 drop)
  (; 0xfe 0x3e ;) (func (export "i64.atomic.rmw8.xor_u") i32.const 1 i64.const 2 i64.atomic.rmw8.xor_u offset=3 drop)
  (; 0xfe 0x3f ;) (func (export "i64.atomic.rmw16.xor_u") i32.const 1 i64.const 2 i64.atomic.rmw16.xor_u offset=3 drop)
  (; 0xfe 0x40 ;) (func (export "i64.atomic.rmw32.xor_u") i32.const 1 i64.const 2 i64.atomic.rmw32.xor_u offset=3 drop)
  (; 0xfe 0x41 ;) (func (export "i32.atomic.rmw.xchg") i32.const 1 i32.const 2 i32.atomic.rmw.xchg offset=3 drop)
  (; 0xfe 0x42 ;) (func (export "i64.atomic.rmw.xchg") i32.const 1 i64.const 2 i64.atomic.rmw.xchg offset=7 drop)
  (; 0xfe 0x43 ;) (func (export "i32.atomic.rmw8.xchg_u") i32.const 1 i32.const 2 i32.atomic.rmw8.xchg_u offset=3 drop)
  (; 0xfe 0x44 ;) (func (export "i32.atomic.rmw16.xchg_u") i32.const 1 i32.const 2 i32.atomic.rmw16.xchg_u offset=3 drop)
  (; 0xfe 0x45 ;) (func (export "i64.atomic.rmw8.xchg_u") i32.const 1 i64.const 2 i64.atomic.rmw8.xchg_u offset=3 drop)
  (; 0xfe 0x46 ;) (func (export "i64.atomic.rmw16.xchg_u") i32.const 1 i64.const 2 i64.atomic.rmw16.xchg_u offset=3 drop)
  (; 0xfe 0x47 ;) (func (export "i64.atomic.rmw32.xchg_u") i32.const 1 i64.const 2 i64.atomic.rmw32.xchg_u offset=3 drop)

  (; 0xfe 0x48 ;) (func (export "i32.atomic.rmw.cmpxchg") i32.const 1 i32.const 2 i32.const 3 i32.atomic.rmw.cmpxchg offset=3 drop)
  (; 0xfe 0x49 ;) (func (export "i64.atomic.rmw.cmpxchg") i32.const 1 i64.const 2 i64.const 3 i64.atomic.rmw.cmpxchg offset=7 drop)
  (; 0xfe 0x4a ;) (func (export "i32.atomic.rmw8.cmpxchg_u") i32.const 1 i32.const 2 i32.const 3 i32.atomic.rmw8.cmpxchg_u offset=3 drop)
  (; 0xfe 0x4b ;) (func (export "i32.atomic.rmw16.cmpxchg_u") i32.const 1 i32.const 2 i32.const 3 i32.atomic.rmw16.cmpxchg_u offset=3 drop)
  (; 0xfe 0x4c ;) (func (export "i64.atomic.rmw8.cmpxchg_u") i32.const 1 i64.const 2 i64.const 3 i64.atomic.rmw8.cmpxchg_u offset=3 drop)
  (; 0xfe 0x4d ;) (func (export "i64.atomic.rmw16.cmpxchg_u") i32.const 1 i64.const 2 i64.const 3 i64.atomic.rmw16.cmpxchg_u offset=3 drop)
  (; 0xfe 0x4e ;) (func (export "i64.atomic.rmw32.cmpxchg_u") i32.const 1 i64.const 2 i64.const 3 i64.atomic.rmw32.cmpxchg_u offset=3 drop)
)

(;; STDOUT ;;;
0000000: 0061 736d                                 ; WASM_BINARY_MAGIC
0000004: 0100 0000                                 ; WASM_BINARY_VERSION
; section "Type" (1)
0000008: 01                                        ; section code
0000009: 00                                        ; section size (guess)
000000a: 02                                        ; num types
; type 0
000000b: 60                                        ; func
000000c: 00                                        ; num params
000000d: 00                                        ; num results
; type 1
000000e: 60                                        ; func
000000f: 01                                        ; num params
0000010: 7f                                        ; i32
0000011: 00                                        ; num results
0000009: 08                                        ; FIXUP section size
; section "Import" (2)
0000012: 02                                        ; section code
0000013: 00                                        ; section size (guess)
0000014: 01                                        ; num imports
; import header 0
0000015: 04                                        ; string length
0000016: 686f 7374                                host  ; import module name
000001a: 05                                        ; string length
000001b: 7072 696e 74                             print  ; import field name
0000020: 00                                        ; import kind
0000021: 01                                        ; import signature index
0000013: 0e                                        ; FIXUP section size
; section "Function" (3)
0000022: 03                                        ; section code
0000023: 00                                        ; section size (guess)
0000024: 8803                                      ; num functions
0000026: 00                                        ; function 0 signature index
0000027: 00                                        ; function 1 signature index
0000028: 00                                        ; function 2 signature index
0000029: 00                                        ; function 3 signature index
000002a: 00                                        ; function 4 signature index
000002b: 00                                        ; function 5 signature index
000002c: 00                                        ; function 6 signature index
000002d: 00                                        ; function 7 signature index
000002e: 00                                        ; function 8 signature index
000002f: 00                                        ; function 9 signature index
0000030: 00                                        ; function 10 signature index
0000031: 00                                        ; function 11 signature index
0000032: 00                                        ; function 12 signature index
0000033: 00                                        ; function 13 signature index
0000034: 00                                        ; function 14 signature index
0000035: 00                                        ; function 15 signature index
0000036: 00                                        ; function 16 signature index
0000037: 00                                        ; function 17 signature index
0000038: 00                                        ; function 18 signature index
0000039: 00                                        ; function 19 signature index
000003a: 00                                        ; function 20 signature index
000003b: 00                                        ; function 21 signature index
000003c: 00                                        ; function 22 signature index
000003d: 00                                        ; function 23 signature index
000003e: 00                                        ; function 24 signature index
000003f: 00                                        ; function 25 signature index
0000040: 00                                        ; function 26 signature index
0000041: 00                                        ; function 27 signature index
0000042: 00                                        ; function 28 signature index
0000043: 00                                        ; function 29 signature index
0000044: 00                                        ; function 30 signature index
0000045: 00                                        ; function 31 signature index
0000046: 00                                        ; function 32 signature index
0000047: 00                                        ; function 33 signature index
0000048: 00                                        ; function 34 signature index
0000049: 00                                        ; function 35 signature index
000004a: 00                                        ; function 36 signature index
000004b: 00                                        ; function 37 signature index
000004c: 00                                        ; function 38 signature index
000004d: 00                                        ; function 39 signature index
000004e: 00                                        ; function 40 signature index
000004f: 00                                        ; function 41 signature index
0000050: 00                                        ; function 42 signature index
0000051: 00                                        ; function 43 signature index
0000052: 00                                        ; function 44 signature index
0000053: 00                                        ; function 45 signature index
0000054: 00                                        ; function 46 signature index
0000055: 00                                        ; function 47 signature index
0000056: 00                                        ; function 48 signature index
0000057: 00                                        ; function 49 signature index
0000058: 00                                        ; function 50 signature index
0000059: 00                                        ; function 51 signature index
000005a: 00                                        ; function 52 signature index
000005b: 00                                        ; function 53 signature index
000005c: 00                                        ; function 54 signature index
000005d: 00                                        ; function 55 signature index
000005e: 00                                        ; function 56 signature index
000005f: 00                                        ; function 57 signature index
0000060: 00                                        ; function 58 signature index
0000061: 00                                        ; function 59 signature index
0000062: 00                                        ; function 60 signature index
0000063: 00                                        ; function 61 signature index
0000064: 00                                        ; function 62 signature index
0000065: 00                                        ; function 63 signature index
0000066: 00                                        ; function 64 signature index
0000067: 00                                        ; function 65 signature index
0000068: 00                                        ; function 66 signature index
0000069: 00                                        ; function 67 signature index
000006a: 00                                        ; function 68 signature index
000006b: 00                                        ; function 69 signature index
000006c: 00                                        ; function 70 signature index
000006d: 00                                        ; function 71 signature index
000006e: 00                                        ; function 72 signature index
000006f: 00                                        ; function 73 signature index
0000070: 00                                        ; function 74 signature index
0000071: 00                                        ; function 75 signature index
0000072: 00                                        ; function 76 signature index
0000073: 00                                        ; function 77 signature index
0000074: 00                                        ; function 78 signature index
0000075: 00                                        ; function 79 signature index
0000076: 00                                        ; function 80 signature index
0000077: 00                                        ; function 81 signature index
0000078: 00                                        ; function 82 signature index
0000079: 00                                        ; function 83 signature index
000007a: 00                                        ; function 84 signature index
000007b: 00                                        ; function 85 signature index
000007c: 00                                        ; function 86 signature index
000007d: 00                                        ; function 87 signature index
000007e: 00                                        ; function 88 signature index
000007f: 00                                        ; function 89 signature index
0000080: 00                                        ; function 90 signature index
0000081: 00                                        ; function 91 signature index
0000082: 00                                        ; function 92 signature index
0000083: 00                                        ; function 93 signature index
0000084: 00                                        ; function 94 signature index
0000085: 00                                        ; function 95 signature index
0000086: 00                                        ; function 96 signature index
0000087: 00                                        ; function 97 signature index
0000088: 00                                        ; function 98 signature index
0000089: 00                                        ; function 99 signature index
000008a: 00                                        ; function 100 signature index
000008b: 00                                        ; function 101 signature index
000008c: 00                                        ; function 102 signature index
000008d: 00                                        ; function 103 signature index
000008e: 00                                        ; function 104 signature index
000008f: 00                                        ; function 105 signature index
0000090: 00                                        ; function 106 signature index
0000091: 00                                        ; function 107 signature index
0000092: 00                                        ; function 108 signature index
0000093: 00                                        ; function 109 signature index
0000094: 00                                        ; function 110 signature index
0000095: 00                                        ; function 111 signature index
0000096: 00                                        ; function 112 signature index
0000097: 00                                        ; function 113 signature index
0000098: 00                                        ; function 114 signature index
0000099: 00                                        ; function 115 signature index
000009a: 00                                        ; function 116 signature index
000009b: 00                                        ; function 117 signature index
000009c: 00                                        ; function 118 signature index
000009d: 00                                        ; function 119 signature index
000009e: 00                                        ; function 120 signature index
000009f: 00                                        ; function 121 signature index
00000a0: 00                                        ; function 122 signature index
00000a1: 00                                        ; function 123 signature index
00000a2: 00                                        ; function 124 signature index
00000a3: 00                                        ; function 125 signature index
00000a4: 00                                        ; function 126 signature index
00000a5: 00                                        ; function 127 signature index
00000a6: 00                                        ; function 128 signature index
00000a7: 00                                        ; function 129 signature index
00000a8: 00                                        ; function 130 signature index
00000a9: 00                                        ; function 131 signature index
00000aa: 00                                        ; function 132 signature index
00000ab: 00                                        ; function 133 signature index
00000ac: 00                                        ; function 134 signature index
00000ad: 00                                        ; function 135 signature index
00000ae: 00                                        ; function 136 signature index
00000af: 00                                        ; function 137 signature index
00000b0: 00                                        ; function 138 signature index
00000b1: 00                                        ; function 139 signature index
00000b2: 00                                        ; function 140 signature index
00000b3: 00                                        ; function 141 signature index
00000b4: 00                                        ; function 142 signature index
00000b5: 00                                        ; function 143 signature index
00000b6: 00                                        ; function 144 signature index
00000b7: 00                                        ; function 145 signature index
00000b8: 00                                        ; function 146 signature index
00000b9: 00                                        ; function 147 signature index
00000ba: 00                                        ; function 148 signature index
00000bb: 00                                        ; function 149 signature index
00000bc: 00                                        ; function 150 signature index
00000bd: 00                                        ; function 151 signature index
00000be: 00                                        ; function 152 signature index
00000bf: 00                                        ; function 153 signature index
00000c0: 00                                        ; function 154 signature index
00000c1: 00                                        ; function 155 signature index
00000c2: 00                                        ; function 156 signature index
00000c3: 00                                        ; function 157 signature index
00000c4: 00                                        ; function 158 signature index
00000c5: 00                                        ; function 159 signature index
00000c6: 00                                        ; function 160 signature index
00000c7: 00                                        ; function 161 signature index
00000c8: 00                                        ; function 162 signature index
00000c9: 00                                        ; function 163 signature index
00000ca: 00                                        ; function 164 signature index
00000cb: 00                                        ; function 165 signature index
00000cc: 00                                        ; function 166 signature index
00000cd: 00                                        ; function 167 signature index
00000ce: 00                                        ; function 168 signature index
00000cf: 00                                        ; function 169 signature index
00000d0: 00                                        ; function 170 signature index
00000d1: 00                                        ; function 171 signature index
00000d2: 00                                        ; function 172 signature index
00000d3: 00                                        ; function 173 signature index
00000d4: 00                                        ; function 174 signature index
00000d5: 00                                        ; function 175 signature index
00000d6: 00                                        ; function 176 signature index
00000d7: 00                                        ; function 177 signature index
00000d8: 00                                        ; function 178 signature index
00000d9: 00                                        ; function 179 signature index
00000da: 00                                        ; function 180 signature index
00000db: 00                                        ; function 181 signature index
00000dc: 00                                        ; function 182 signature index
00000dd: 00                                        ; function 183 signature index
00000de: 00                                        ; function 184 signature index
00000df: 00                                        ; function 185 signature index
00000e0: 00                                        ; function 186 signature index
00000e1: 00                                        ; function 187 signature index
00000e2: 00                                        ; function 188 signature index
00000e3: 00                                        ; function 189 signature index
00000e4: 00                                        ; function 190 signature index
00000e5: 00                                        ; function 191 signature index
00000e6: 00                                        ; function 192 signature index
00000e7: 00                                        ; function 193 signature index
00000e8: 00                                        ; function 194 signature index
00000e9: 00                                        ; function 195 signature index
00000ea: 00                                        ; function 196 signature index
00000eb: 00                                        ; function 197 signature index
00000ec: 00                                        ; function 198 signature index
00000ed: 00                                        ; function 199 signature index
00000ee: 00                                        ; function 200 signature index
00000ef: 00                                        ; function 201 signature index
00000f0: 00                                        ; function 202 signature index
00000f1: 00                                        ; function 203 signature index
00000f2: 00                                        ; function 204 signature index
00000f3: 00                                        ; function 205 signature index
00000f4: 00                                        ; function 206 signature index
00000f5: 00                                        ; function 207 signature index
00000f6: 00                                        ; function 208 signature index
00000f7: 00                                        ; function 209 signature index
00000f8: 00                                        ; function 210 signature index
00000f9: 00                                        ; function 211 signature index
00000fa: 00                                        ; function 212 signature index
00000fb: 00                                        ; function 213 signature index
00000fc: 00                                        ; function 214 signature index
00000fd: 00                                        ; function 215 signature index
00000fe: 00                                        ; function 216 signature index
00000ff: 00                                        ; function 217 signature index
0000100: 00                                        ; function 218 signature index
0000101: 00                                        ; function 219 signature index
0000102: 00                                        ; function 220 signature index
0000103: 00                                        ; function 221 signature index
0000104: 00                                        ; function 222 signature index
0000105: 00                                        ; function 223 signature index
0000106: 00                                        ; function 224 signature index
0000107: 00                                        ; function 225 signature index
0000108: 00                                        ; function 226 signature index
0000109: 00                                        ; function 227 signature index
000010a: 00                                        ; function 228 signature index
000010b: 00                                        ; function 229 signature index
000010c: 00                                        ; function 230 signature index
000010d: 00                                        ; function 231 signature index
000010e: 00                                        ; function 232 signature index
000010f: 00                                        ; function 233 signature index
0000110: 00                                        ; function 234 signature index
0000111: 00                                        ; function 235 signature index
0000112: 00                                        ; function 236 signature index
0000113: 00                                        ; function 237 signature index
0000114: 00                                        ; function 238 signature index
0000115: 00                                        ; function 239 signature index
0000116: 00                                        ; function 240 signature index
0000117: 00                                        ; function 241 signature index
0000118: 00                                        ; function 242 signature index
0000119: 00                                        ; function 243 signature index
000011a: 00                                        ; function 244 signature index
000011b: 00                                        ; function 245 signature index
000011c: 00                                        ; function 246 signature index
000011d: 00                                        ; function 247 signature index
000011e: 00                                        ; function 248 signature index
000011f: 00                                        ; function 249 signature index
0000120: 00                                        ; function 250 signature index
0000121: 00                                        ; function 251 signature index
0000122: 00                                        ; function 252 signature index
0000123: 00                                        ; function 253 signature index
0000124: 00                                        ; function 254 signature index
0000125: 00                                        ; function 255 signature index
0000126: 00                                        ; function 256 signature index
0000127: 00                                        ; function 257 signature index
0000128: 00                                        ; function 258 signature index
0000129: 00                                        ; function 259 signature index
000012a: 00                                        ; function 260 signature index
000012b: 00                                        ; function 261 signature index
000012c: 00                                        ; function 262 signature index
000012d: 00                                        ; function 263 signature index
000012e: 00                                        ; function 264 signature index
000012f: 00                                        ; function 265 signature index
0000130: 00                                        ; function 266 signature index
0000131: 00                                        ; function 267 signature index
0000132: 00                                        ; function 268 signature index
0000133: 00                                        ; function 269 signature index
0000134: 00                                        ; function 270 signature index
0000135: 00                                        ; function 271 signature index
0000136: 00                                        ; function 272 signature index
0000137: 00                                        ; function 273 signature index
0000138: 00                                        ; function 274 signature index
0000139: 00                                        ; function 275 signature index
000013a: 00                                        ; function 276 signature index
000013b: 00                                        ; function 277 signature index
000013c: 00                                        ; function 278 signature index
000013d: 00                                        ; function 279 signature index
000013e: 00                                        ; function 280 signature index
000013f: 00                                        ; function 281 signature index
0000140: 00                                        ; function 282 signature index
0000141: 00                                        ; function 283 signature index
0000142: 00                                        ; function 284 signature index
0000143: 00                                        ; function 285 signature index
0000144: 00                                        ; function 286 signature index
0000145: 00                                        ; function 287 signature index
0000146: 00                                        ; function 288 signature index
0000147: 00                                        ; function 289 signature index
0000148: 00                                        ; function 290 signature index
0000149: 00                                        ; function 291 signature index
000014a: 00                                        ; function 292 signature index
000014b: 00                                        ; function 293 signature index
000014c: 00                                        ; function 294 signature index
000014d: 00                                        ; function 295 signature index
000014e: 00                                        ; function 296 signature index
000014f: 00                                        ; function 297 signature index
0000150: 00                                        ; function 298 signature index
0000151: 00                                        ; function 299 signature index
0000152: 00                                        ; function 300 signature index
0000153: 00                                        ; function 301 signature index
0000154: 00                                        ; function 302 signature index
0000155: 00                                        ; function 303 signature index
0000156: 00                                        ; function 304 signature index
0000157: 00                                        ; function 305 signature index
0000158: 00                                        ; function 306 signature index
0000159: 00                                        ; function 307 signature index
000015a: 00                                        ; function 308 signature index
000015b: 00                                        ; function 309 signature index
000015c: 00                                        ; function 310 signature index
000015d: 00                                        ; function 311 signature index
000015e: 00                                        ; function 312 signature index
000015f: 00                                        ; function 313 signature index
0000160: 00                                        ; function 314 signature index
0000161: 00                                        ; function 315 signature index
0000162: 00                                        ; function 316 signature index
0000163: 00                                        ; function 317 signature index
0000164: 00                                        ; function 318 signature index
0000165: 00                                        ; function 319 signature index
0000166: 00                                        ; function 320 signature index
0000167: 00                                        ; function 321 signature index
0000168: 00                                        ; function 322 signature index
0000169: 00                                        ; function 323 signature index
000016a: 00                                        ; function 324 signature index
000016b: 00                                        ; function 325 signature index
000016c: 00                                        ; function 326 signature index
000016d: 00                                        ; function 327 signature index
000016e: 00                                        ; function 328 signature index
000016f: 00                                        ; function 329 signature index
0000170: 00                                        ; function 330 signature index
0000171: 00                                        ; function 331 signature index
0000172: 00                                        ; function 332 signature index
0000173: 00                                        ; function 333 signature index
0000174: 00                                        ; function 334 signature index
0000175: 00                                        ; function 335 signature index
0000176: 00                                        ; function 336 signature index
0000177: 00                                        ; function 337 signature index
0000178: 00                                        ; function 338 signature index
0000179: 00                                        ; function 339 signature index
000017a: 00                                        ; function 340 signature index
000017b: 00                                        ; function 341 signature index
000017c: 00                                        ; function 342 signature index
000017d: 00                                        ; function 343 signature index
000017e: 00                                        ; function 344 signature index
000017f: 00                                        ; function 345 signature index
0000180: 00                                        ; function 346 signature index
0000181: 00                                        ; function 347 signature index
0000182: 00                                        ; function 348 signature index
0000183: 00                                        ; function 349 signature index
0000184: 00                                        ; function 350 signature index
0000185: 00                                        ; function 351 signature index
0000186: 00                                        ; function 352 signature index
0000187: 00                                        ; function 353 signature index
0000188: 00                                        ; function 354 signature index
0000189: 00                                        ; function 355 signature index
000018a: 00                                        ; function 356 signature index
000018b: 00                                        ; function 357 signature index
000018c: 00                                        ; function 358 signature index
000018d: 00                                        ; function 359 signature index
000018e: 00                                        ; function 360 signature index
000018f: 00                                        ; function 361 signature index
0000190: 00                                        ; function 362 signature index
0000191: 00                                        ; function 363 signature index
0000192: 00                                        ; function 364 signature index
0000193: 00                                        ; function 365 signature index
0000194: 00                                        ; function 366 signature index
0000195: 00                                        ; function 367 signature index
0000196: 00                                        ; function 368 signature index
0000197: 00                                        ; function 369 signature index
0000198: 00                                        ; function 370 signature index
0000199: 00                                        ; function 371 signature index
000019a: 00                                        ; function 372 signature index
000019b: 00                                        ; function 373 signature index
000019c: 00                                        ; function 374 signature index
000019d: 00                                        ; function 375 signature index
000019e: 00                                        ; function 376 signature index
000019f: 00                                        ; function 377 signature index
00001a0: 00                                        ; function 378 signature index
00001a1: 00                                        ; function 379 signature index
00001a2: 00                                        ; function 380 signature index
00001a3: 00                                        ; function 381 signature index
00001a4: 00                                        ; function 382 signature index
00001a5: 00                                        ; function 383 signature index
00001a6: 00                                        ; function 384 signature index
00001a7: 00                                        ; function 385 signature index
00001a8: 00                                        ; function 386 signature index
00001a9: 00                                        ; function 387 signature index
00001aa: 00                                        ; function 388 signature index
00001ab: 00                                        ; function 389 signature index
00001ac: 00                                        ; function 390 signature index
00001ad: 00                                        ; function 391 signature index
; move data: [24, 1ae) -> [25, 1af)
0000023: 8a03                                      ; FIXUP section size
; section "Table" (4)
00001af: 04                                        ; section code
00001b0: 00                                        ; section size (guess)
00001b1: 01                                        ; num tables
; table 0
00001b2: 70                                        ; anyfunc
00001b3: 01                                        ; limits: flags
00001b4: 02                                        ; limits: initial
00001b5: 02                                        ; limits: max
00001b0: 05                                        ; FIXUP section size
; section "Memory" (5)
00001b6: 05                                        ; section code
00001b7: 00                                        ; section size (guess)
00001b8: 01                                        ; num memories
; memory 0
00001b9: 03                                        ; limits: flags
00001ba: 01                                        ; limits: initial
00001bb: 01                                        ; limits: max
00001b7: 04                                        ; FIXUP section size
; section "Global" (6)
00001bc: 06                                        ; section code
00001bd: 00                                        ; section size (guess)
00001be: 01                                        ; num globals
00001bf: 7f                                        ; i32
00001c0: 01                                        ; global mutability
00001c1: 41                                        ; i32.const
00001c2: 00                                        ; i32 literal
00001c3: 0b                                        ; end
00001bd: 06                                        ; FIXUP section size
; section "Export" (7)
00001c4: 07                                        ; section code
00001c5: 00                                        ; section size (guess)
00001c6: 8703                                      ; num exports
00001c8: 0b                                        ; string length
00001c9: 756e 7265 6163 6861 626c 65              unreachable  ; export name
00001d4: 00                                        ; export kind
00001d5: 02                                        ; export func index
00001d6: 02                                        ; string length
00001d7: 6272                                     br  ; export name
00001d9: 00                                        ; export kind
00001da: 03                                        ; export func index
00001db: 08                                        ; string length
00001dc: 6272 5f74 6162 6c65                      br_table  ; export name
00001e4: 00                                        ; export kind
00001e5: 04                                        ; export func index
00001e6: 06                                        ; string length
00001e7: 7265 7475 726e                           return  ; export name
00001ed: 00                                        ; export kind
00001ee: 05                                        ; export func index
00001ef: 04                                        ; string length
00001f0: 6361 6c6c                                call  ; export name
00001f4: 00                                        ; export kind
00001f5: 06                                        ; export func index
00001f6: 0d                                        ; string length
00001f7: 6361 6c6c 5f69 6e64 6972 6563 74         call_indirect  ; export name
0000204: 00                                        ; export kind
0000205: 07                                        ; export func index
0000206: 0b                                        ; string length
0000207: 7265 7475 726e 5f63 616c 6c              return_call  ; export name
0000212: 00                                        ; export kind
0000213: 08                                        ; export func index
0000214: 14                                        ; string length
0000215: 7265 7475 726e 5f63 616c 6c5f 696e 6469  return_call_indi
0000225: 7265 6374                                rect  ; export name
0000229: 00                                        ; export kind
000022a: 09                                        ; export func index
000022b: 04                                        ; string length
000022c: 6472 6f70                                drop  ; export name
0000230: 00                                        ; export kind
0000231: 0a                                        ; export func index
0000232: 06                                        ; string length
0000233: 7365 6c65 6374                           select  ; export name
0000239: 00                                        ; export kind
000023a: 0b                                        ; export func index
000023b: 09                                        ; string length
000023c: 6765 745f 6c6f 6361 6c                   get_local  ; export name
0000245: 00                                        ; export kind
0000246: 0c                                        ; export func index
0000247: 09                                        ; string length
0000248: 7365 745f 6c6f 6361 6c                   set_local  ; export name
0000251: 00                                        ; export kind
0000252: 0d                                        ; export func index
0000253: 09                                        ; string length
0000254: 7465 655f 6c6f 6361 6c                   tee_local  ; export name
000025d: 00                                        ; export kind
000025e: 0e                                        ; export func index
000025f: 0a                                        ; string length
0000260: 6765 745f 676c 6f62 616c                 get_global  ; export name
000026a: 00                                        ; export kind
000026b: 0f                                        ; export func index
000026c: 0a                                        ; string length
000026d: 7365 745f 676c 6f62 616c                 set_global  ; export name
0000277: 00                                        ; export kind
0000278: 10                                        ; export func index
0000279: 08                                        ; string length
000027a: 6933 322e 6c6f 6164                      i32.load  ; export name
0000282: 00                                        ; export kind
0000283: 11                                        ; export func index
0000284: 08                                        ; string length
0000285: 6936 342e 6c6f 6164                      i64.load  ; export name
000028d: 00                                        ; export kind
000028e: 12                                        ; export func index
000028f: 08                                        ; string length
0000290: 6633 322e 6c6f 6164                      f32.load  ; export name
0000298: 00                                        ; export kind
0000299: 13                                        ; export func index
000029a: 08                                        ; string length
000029b: 6636 342e 6c6f 6164                      f64.load  ; export name
00002a3: 00                                        ; export kind
00002a4: 14                                        ; export func index
00002a5: 0b                                        ; string length
00002a6: 6933 322e 6c6f 6164 385f 73              i32.load8_s  ; export name
00002b1: 00                                        ; export kind
00002b2: 15                                        ; export func index
00002b3: 0b                                        ; string length
00002b4: 6933 322e 6c6f 6164 385f 75              i32.load8_u  ; export name
00002bf: 00                                        ; export kind
00002c0: 16                                        ; export func index
00002c1: 0c                                        ; string length
00002c2: 6933 322e 6c6f 6164 3136 5f73            i32.load16_s  ; export name
00002ce: 00                                        ; export kind
00002cf: 17                                        ; export func index
00002d0: 0c                                        ; string length
00002d1: 6933 322e 6c6f 6164 3136 5f75            i32.load16_u  ; export name
00002dd: 00                                        ; export kind
00002de: 18                                        ; export func index
00002df: 0b                                        ; string length
00002e0: 6936 342e 6c6f 6164 385f 73              i64.load8_s  ; export name
00002eb: 00                                        ; export kind
00002ec: 19                                        ; export func index
00002ed: 0b                                        ; string length
00002ee: 6936 342e 6c6f 6164 385f 75              i64.load8_u  ; export name
00002f9: 00                                        ; export kind
00002fa: 1a                                        ; export func index
00002fb: 0c                                        ; string length
00002fc: 6936 342e 6c6f 6164 3136 5f73            i64.load16_s  ; export name
0000308: 00                                        ; export kind
0000309: 1b                                        ; export func index
000030a: 0c                                        ; string length
000030b: 6936 342e 6c6f 6164 3136 5f75            i64.load16_u  ; export name
0000317: 00                                        ; export kind
0000318: 1c                                        ; export func index
0000319: 0c                                        ; string length
000031a: 6936 342e 6c6f 6164 3332 5f73            i64.load32_s  ; export name
0000326: 00                                        ; export kind
0000327: 1d                                        ; export func index
0000328: 0c                                        ; string length
0000329: 6936 342e 6c6f 6164 3332 5f75            i64.load32_u  ; export name
0000335: 00                                        ; export kind
0000336: 1e                                        ; export func index
0000337: 09                                        ; string length
0000338: 6933 322e 7374 6f72 65                   i32.store  ; export name
0000341: 00                                        ; export kind
0000342: 1f                                        ; export func index
0000343: 09                                        ; string length
0000344: 6936 342e 7374 6f72 65                   i64.store  ; export name
000034d: 00                                        ; export kind
000034e: 20                                        ; export func index
000034f: 09                                        ; string length
0000350: 6633 322e 7374 6f72 65                   f32.store  ; export name
0000359: 00                                        ; export kind
000035a: 21                                        ; export func index
000035b: 09                                        ; string length
000035c: 6636 342e 7374 6f72 65                   f64.store  ; export name
0000365: 00                                        ; export kind
0000366: 22                                        ; export func index
0000367: 0a                                        ; string length
0000368: 6933 322e 7374 6f72 6538                 i32.store8  ; export name
0000372: 00                                        ; export kind
0000373: 23                                        ; export func index
0000374: 0b                                        ; string length
0000375: 6933 322e 7374 6f72 6531 36              i32.store16  ; export name
0000380: 00                                        ; export kind
0000381: 24                                        ; export func index
0000382: 0a                                        ; string length
0000383: 6936 342e 7374 6f72 6538                 i64.store8  ; export name
000038d: 00                                        ; export kind
000038e: 25                                        ; export func index
000038f: 0b                                        ; string length
0000390: 6936 342e 7374 6f72 6531 36              i64.store16  ; export name
000039b: 00                                        ; export kind
000039c: 26                                        ; export func index
000039d: 0b                                        ; string length
000039e: 6936 342e 7374 6f72 6533 32              i64.store32  ; export name
00003a9: 00                                        ; export kind
00003aa: 27                                        ; export func index
00003ab: 0e                                        ; string length
00003ac: 6375 7272 656e 745f 6d65 6d6f 7279       current_memory  ; export name
00003ba: 00                                        ; export kind
00003bb: 28                                        ; export func index
00003bc: 0b                                        ; string length
00003bd: 6772 6f77 5f6d 656d 6f72 79              grow_memory  ; export name
00003c8: 00                                        ; export kind
00003c9: 29                                        ; export func index
00003ca: 09                                        ; string length
00003cb: 6933 322e 636f 6e73 74                   i32.const  ; export name
00003d4: 00                                        ; export kind
00003d5: 2a                                        ; export func index
00003d6: 09                                        ; string length
00003d7: 6936 342e 636f 6e73 74                   i64.const  ; export name
00003e0: 00                                        ; export kind
00003e1: 2b                                        ; export func index
00003e2: 09                                        ; string length
00003e3: 6633 322e 636f 6e73 74                   f32.const  ; export name
00003ec: 00                                        ; export kind
00003ed: 2c                                        ; export func index
00003ee: 09                                        ; string length
00003ef: 6636 342e 636f 6e73 74                   f64.const  ; export name
00003f8: 00                                        ; export kind
00003f9: 2d                                        ; export func index
00003fa: 07                                        ; string length
00003fb: 6933 322e 6571 7a                        i32.eqz  ; export name
0000402: 00                                        ; export kind
0000403: 2e                                        ; export func index
0000404: 06                                        ; string length
0000405: 6933 322e 6571                           i32.eq  ; export name
000040b: 00                                        ; export kind
000040c: 2f                                        ; export func index
000040d: 06                                        ; string length
000040e: 6933 322e 6e65                           i32.ne  ; export name
0000414: 00                                        ; export kind
0000415: 30                                        ; export func index
0000416: 08                                        ; string length
0000417: 6933 322e 6c74 5f73                      i32.lt_s  ; export name
000041f: 00                                        ; export kind
0000420: 31                                        ; export func index
0000421: 08                                        ; string length
0000422: 6933 322e 6c74 5f75                      i32.lt_u  ; export name
000042a: 00                                        ; export kind
000042b: 32                                        ; export func index
000042c: 08                                        ; string length
000042d: 6933 322e 6774 5f73                      i32.gt_s  ; export name
0000435: 00                                        ; export kind
0000436: 33                                        ; export func index
0000437: 08                                        ; string length
0000438: 6933 322e 6774 5f75                      i32.gt_u  ; export name
0000440: 00                                        ; export kind
0000441: 34                                        ; export func index
0000442: 08                                        ; string length
0000443: 6933 322e 6c65 5f73                      i32.le_s  ; export name
000044b: 00                                        ; export kind
000044c: 35                                        ; export func index
000044d: 08                                        ; string length
000044e: 6933 322e 6c65 5f75                      i32.le_u  ; export name
0000456: 00                                        ; export kind
0000457: 36                                        ; export func index
0000458: 08                                        ; string length
0000459: 6933 322e 6765 5f73                      i32.ge_s  ; export name
0000461: 00                                        ; export kind
0000462: 37                                        ; export func index
0000463: 08                                        ; string length
0000464: 6933 322e 6765 5f75                      i32.ge_u  ; export name
000046c: 00                                        ; export kind
000046d: 38                                        ; export func index
000046e: 07                                        ; string length
000046f: 6936 342e 6571 7a                        i64.eqz  ; export name
0000476: 00                                        ; export kind
0000477: 39                                        ; export func index
0000478: 06                                        ; string length
0000479: 6936 342e 6571                           i64.eq  ; export name
000047f: 00                                        ; export kind
0000480: 3a                                        ; export func index
0000481: 06                                        ; string length
0000482: 6936 342e 6e65                           i64.ne  ; export name
0000488: 00                                        ; export kind
0000489: 3b                                        ; export func index
000048a: 08                                        ; string length
000048b: 6936 342e 6c74 5f73                      i64.lt_s  ; export name
0000493: 00                                        ; export kind
0000494: 3c                                        ; export func index
0000495: 08                                        ; string length
0000496: 6936 342e 6c74 5f75                      i64.lt_u  ; export name
000049e: 00                                        ; export kind
000049f: 3d                                        ; export func index
00004a0: 08                                        ; string length
00004a1: 6936 342e 6774 5f73                      i64.gt_s  ; export name
00004a9: 00                                        ; export kind
00004aa: 3e                                        ; export func index
00004ab: 08                                        ; string length
00004ac: 6936 342e 6774 5f75                      i64.gt_u  ; export name
00004b4: 00                                        ; export kind
00004b5: 3f                                        ; export func index
00004b6: 08                                        ; string length
00004b7: 6936 342e 6c65 5f73                      i64.le_s  ; export name
00004bf: 00                                        ; export kind
00004c0: 40                                        ; export func index
00004c1: 08                                        ; string length
00004c2: 6936 342e 6c65 5f75                      i64.le_u  ; export name
00004ca: 00                                        ; export kind
00004cb: 41                                        ; export func index
00004cc: 08                                        ; string length
00004cd: 6936 342e 6765 5f73                      i64.ge_s  ; export name
00004d5: 00                                        ; export kind
00004d6: 42                                        ; export func index
00004d7: 08                                        ; string length
00004d8: 6936 342e 6765 5f75                      i64.ge_u  ; export name
00004e0: 00                                        ; export kind
00004e1: 43                                        ; export func index
00004e2: 06                                        ; string length
00004e3: 6633 322e 6571                           f32.eq  ; export name
00004e9: 00                                        ; export kind
00004ea: 44                                        ; export func index
00004eb: 06                                        ; string length
00004ec: 6633 322e 6e65                           f32.ne  ; export name
00004f2: 00                                        ; export kind
00004f3: 45                                        ; export func index
00004f4: 06                                        ; string length
00004f5: 6633 322e 6c74                           f32.lt  ; export name
00004fb: 00                                        ; export kind
00004fc: 46                                        ; export func index
00004fd: 06                                        ; string length
00004fe: 6633 322e 6774                           f32.gt  ; export name
0000504: 00                                        ; export kind
0000505: 47                                        ; export func index
0000506: 06                                        ; string length
0000507: 6633 322e 6c65                           f32.le  ; export name
000050d: 00                                        ; export kind
000050e: 48                                        ; export func index
000050f: 06                                        ; string length
0000510: 6633 322e 6765                           f32.ge  ; export name
0000516: 00                                        ; export kind
0000517: 49                                        ; export func index
0000518: 06                                        ; string length
0000519: 6636 342e 6571                           f64.eq  ; export name
000051f: 00                                        ; export kind
0000520: 4a                                        ; export func index
0000521: 06                                        ; string length
0000522: 6636 342e 6e65                           f64.ne  ; export name
0000528: 00                                        ; export kind
0000529: 4b                                        ; export func index
000052a: 06                                        ; string length
000052b: 6636 342e 6c74                           f64.lt  ; export name
0000531: 00                                        ; export kind
0000532: 4c                                        ; export func index
0000533: 06                                        ; string length
0000534: 6636 342e 6774                           f64.gt  ; export name
000053a: 00                                        ; export kind
000053b: 4d                                        ; export func index
000053c: 06                                        ; string length
000053d: 6636 342e 6c65                           f64.le  ; export name
0000543: 00                                        ; export kind
0000544: 4e                                        ; export func index
0000545: 06                                        ; string length
0000546: 6636 342e 6765                           f64.ge  ; export name
000054c: 00                                        ; export kind
000054d: 4f                                        ; export func index
000054e: 07                                        ; string length
000054f: 6933 322e 636c 7a                        i32.clz  ; export name
0000556: 00                                        ; export kind
0000557: 50                                        ; export func index
0000558: 07                                        ; string length
0000559: 6933 322e 6374 7a                        i32.ctz  ; export name
0000560: 00                                        ; export kind
0000561: 51                                        ; export func index
0000562: 0a                                        ; string length
0000563: 6933 322e 706f 7063 6e74                 i32.popcnt  ; export name
000056d: 00                                        ; export kind
000056e: 52                                        ; export func index
000056f: 07                                        ; string length
0000570: 6933 322e 6164 64                        i32.add  ; export name
0000577: 00                                        ; export kind
0000578: 53                                        ; export func index
0000579: 07                                        ; string length
000057a: 6933 322e 7375 62                        i32.sub  ; export name
0000581: 00                                        ; export kind
0000582: 54                                        ; export func index
0000583: 07                                        ; string length
0000584: 6933 322e 6d75 6c                        i32.mul  ; export name
000058b: 00                                        ; export kind
000058c: 55                                        ; export func index
000058d: 09                                        ; string length
000058e: 6933 322e 6469 765f 73                   i32.div_s  ; export name
0000597: 00                                        ; export kind
0000598: 56                                        ; export func index
0000599: 09                                        ; string length
000059a: 6933 322e 6469 765f 75                   i32.div_u  ; export name
00005a3: 00                                        ; export kind
00005a4: 57                                        ; export func index
00005a5: 09                                        ; string length
00005a6: 6933 322e 7265 6d5f 73                   i32.rem_s  ; export name
00005af: 00                                        ; export kind
00005b0: 58                                        ; export func index
00005b1: 09                                        ; string length
00005b2: 6933 322e 7265 6d5f 75                   i32.rem_u  ; export name
00005bb: 00                                        ; export kind
00005bc: 59                                        ; export func index
00005bd: 07                                        ; string length
00005be: 6933 322e 616e 64                        i32.and  ; export name
00005c5: 00                                        ; export kind
00005c6: 5a                                        ; export func index
00005c7: 06                                        ; string length
00005c8: 6933 322e 6f72                           i32.or  ; export name
00005ce: 00                                        ; export kind
00005cf: 5b                                        ; export func index
00005d0: 07                                        ; string length
00005d1: 6933 322e 786f 72                        i32.xor  ; export name
00005d8: 00                                        ; export kind
00005d9: 5c                                        ; export func index
00005da: 07                                        ; string length
00005db: 6933 322e 7368 6c                        i32.shl  ; export name
00005e2: 00                                        ; export kind
00005e3: 5d                                        ; export func index
00005e4: 09                                        ; string length
00005e5: 6933 322e 7368 725f 73                   i32.shr_s  ; export name
00005ee: 00                                        ; export kind
00005ef: 5e                                        ; export func index
00005f0: 09                                        ; string length
00005f1: 6933 322e 7368 725f 75                   i32.shr_u  ; export name
00005fa: 00                                        ; export kind
00005fb: 5f                                        ; export func index
00005fc: 08                                        ; string length
00005fd: 6933 322e 726f 746c                      i32.rotl  ; export name
0000605: 00                                        ; export kind
0000606: 60                                        ; export func index
0000607: 08                                        ; string length
0000608: 6933 322e 726f 7472                      i32.rotr  ; export name
0000610: 00                                        ; export kind
0000611: 61                                        ; export func index
0000612: 07                                        ; string length
0000613: 6936 342e 636c 7a                        i64.clz  ; export name
000061a: 00                                        ; export kind
000061b: 62                                        ; export func index
000061c: 07                                        ; string length
000061d: 6936 342e 6374 7a                        i64.ctz  ; export name
0000624: 00                                        ; export kind
0000625: 63                                        ; export func index
0000626: 0a                                        ; string length
0000627: 6936 342e 706f 7063 6e74                 i64.popcnt  ; export name
0000631: 00                                        ; export kind
0000632: 64                                        ; export func index
0000633: 07                                        ; string length
0000634: 6936 342e 6164 64                        i64.add  ; export name
000063b: 00                                        ; export kind
000063c: 65                                        ; export func index
000063d: 07                                        ; string length
000063e: 6936 342e 7375 62                        i64.sub  ; export name
0000645: 00                                        ; export kind
0000646: 66                                        ; export func index
0000647: 07                                        ; string length
0000648: 6936 342e 6d75 6c                        i64.mul  ; export name
000064f: 00                                        ; export kind
0000650: 67                                        ; export func index
0000651: 09                                        ; string length
0000652: 6936 342e 6469 765f 73                   i64.div_s  ; export name
000065b: 00                                        ; export kind
000065c: 68                                        ; export func index
000065d: 09                                        ; string length
000065e: 6936 342e 6469 765f 75                   i64.div_u  ; export name
0000667: 00                                        ; export kind
0000668: 69                                        ; export func index
0000669: 09                                        ; string length
000066a: 6936 342e 7265 6d5f 73                   i64.rem_s  ; export name
0000673: 00                                        ; export kind
0000674: 6a                                        ; export func index
0000675: 09                                        ; string length
0000676: 6936 342e 7265 6d5f 75                   i64.rem_u  ; export name
000067f: 00                                        ; export kind
0000680: 6b                                        ; export func index
0000681: 07                                        ; string length
0000682: 6936 342e 616e 64                        i64.and  ; export name
0000689: 00                                        ; export kind
000068a: 6c                                        ; export func index
000068b: 06                                        ; string length
000068c: 6936 342e 6f72                           i64.or  ; export name
0000692: 00                                        ; export kind
0000693: 6d                                        ; export func index
0000694: 07                                        ; string length
0000695: 6936 342e 786f 72                        i64.xor  ; export name
000069c: 00                                        ; export kind
000069d: 6e                                        ; export func index
000069e: 07                                        ; string length
000069f: 6936 342e 7368 6c                        i64.shl  ; export name
00006a6: 00                                        ; export kind
00006a7: 6f                                        ; export func index
00006a8: 09                                        ; string length
00006a9: 6936 342e 7368 725f 73                   i64.shr_s  ; export name
00006b2: 00                                        ; export kind
00006b3: 70                                        ; export func index
00006b4: 09                                        ; string length
00006b5: 6936 342e 7368 725f 75                   i64.shr_u  ; export name
00006be: 00                                        ; export kind
00006bf: 71                                        ; export func index
00006c0: 08                                        ; string length
00006c1: 6936 342e 726f 746c                      i64.rotl  ; export name
00006c9: 00                                        ; export kind
00006ca: 72                                        ; export func index
00006cb: 08                                        ; string length
00006cc: 6936 342e 726f 7472                      i64.rotr  ; export name
00006d4: 00                                        ; export kind
00006d5: 73                                        ; export func index
00006d6: 07                                        ; string length
00006d7: 6633 322e 6162 73                        f32.abs  ; export name
00006de: 00                                        ; export kind
00006df: 74                                        ; export func index
00006e0: 07                                        ; string length
00006e1: 6633 322e 6e65 67                        f32.neg  ; export name
00006e8: 00                                        ; export kind
00006e9: 75                                        ; export func index
00006ea: 08                                        ; string length
00006eb: 6633 322e 6365 696c                      f32.ceil  ; export name
00006f3: 00                                        ; export kind
00006f4: 76                                        ; export func index
00006f5: 09                                        ; string length
00006f6: 6633 322e 666c 6f6f 72                   f32.floor  ; export name
00006ff: 00                                        ; export kind
0000700: 77                                        ; export func index
0000701: 09                                        ; string length
0000702: 6633 322e 7472 756e 63                   f32.trunc  ; export name
000070b: 00                                        ; export kind
000070c: 78                                        ; export func index
000070d: 0b                                        ; string length
000070e: 6633 322e 6e65 6172 6573 74              f32.nearest  ; export name
0000719: 00                                        ; export kind
000071a: 79                                        ; export func index
000071b: 08                                        ; string length
000071c: 6633 322e 7371 7274                      f32.sqrt  ; export name
0000724: 00                                        ; export kind
0000725: 7a                                        ; export func index
0000726: 07                                        ; string length
0000727: 6633 322e 6164 64                        f32.add  ; export name
000072e: 00                                        ; export kind
000072f: 7b                                        ; export func index
0000730: 07                                        ; string length
0000731: 6633 322e 7375 62                        f32.sub  ; export name
0000738: 00                                        ; export kind
0000739: 7c                                        ; export func index
000073a: 07                                        ; string length
000073b: 6633 322e 6d75 6c                        f32.mul  ; export name
0000742: 00                                        ; export kind
0000743: 7d                                        ; export func index
0000744: 07                                        ; string length
0000745: 6633 322e 6469 76                        f32.div  ; export name
000074c: 00                                        ; export kind
000074d: 7e                                        ; export func index
000074e: 07                                        ; string length
000074f: 6633 322e 6d69 6e                        f32.min  ; export name
0000756: 00                                        ; export kind
0000757: 7f                                        ; export func index
0000758: 07                                        ; string length
0000759: 6633 322e 6d61 78                        f32.max  ; export name
0000760: 00                                        ; export kind
0000761: 8001                                      ; export func index
0000763: 0c                                        ; string length
0000764: 6633 322e 636f 7079 7369 676e            f32.copysign  ; export name
0000770: 00                                        ; export kind
0000771: 8101                                      ; export func index
0000773: 07                                        ; string length
0000774: 6636 342e 6162 73                        f64.abs  ; export name
000077b: 00                                        ; export kind
000077c: 8201                                      ; export func index
000077e: 07                                        ; string length
000077f: 6636 342e 6e65 67                        f64.neg  ; export name
0000786: 00                                        ; export kind
0000787: 8301                                      ; export func index
0000789: 08                                        ; string length
000078a: 6636 342e 6365 696c                      f64.ceil  ; export name
0000792: 00                                        ; export kind
0000793: 8401                                      ; export func index
0000795: 09                                        ; string length
0000796: 6636 342e 666c 6f6f 72                   f64.floor  ; export name
000079f: 00                                        ; export kind
00007a0: 8501                                      ; export func index
00007a2: 09                                        ; string length
00007a3: 6636 342e 7472 756e 63                   f64.trunc  ; export name
00007ac: 00                                        ; export kind
00007ad: 8601                                      ; export func index
00007af: 0b                                        ; string length
00007b0: 6636 342e 6e65 6172 6573 74              f64.nearest  ; export name
00007bb: 00                                        ; export kind
00007bc: 8701                                      ; export func index
00007be: 08                                        ; string length
00007bf: 6636 342e 7371 7274                      f64.sqrt  ; export name
00007c7: 00                                        ; export kind
00007c8: 8801                                      ; export func index
00007ca: 07                                        ; string length
00007cb: 6636 342e 6164 64                        f64.add  ; export name
00007d2: 00                                        ; export kind
00007d3: 8901                                      ; export func index
00007d5: 07                                        ; string length
00007d6: 6636 342e 7375 62                        f64.sub  ; export name
00007dd: 00                                        ; export kind
00007de: 8a01                                      ; export func index
00007e0: 07                                        ; string length
00007e1: 6636 342e 6d75 6c                        f64.mul  ; export name
00007e8: 00                                        ; export kind
00007e9: 8b01                                      ; export func index
00007eb: 07                                        ; string length
00007ec: 6636 342e 6469 76                        f64.div  ; export name
00007f3: 00                                        ; export kind
00007f4: 8c01                                      ; export func index
00007f6: 07                                        ; string length
00007f7: 6636 342e 6d69 6e                        f64.min  ; export name
00007fe: 00                                        ; export kind
00007ff: 8d01                                      ; export func index
0000801: 07                                        ; string length
0000802: 6636 342e 6d61 78                        f64.max  ; export name
0000809: 00                                        ; export kind
000080a: 8e01                                      ; export func index
000080c: 0c                                        ; string length
000080d: 6636 342e 636f 7079 7369 676e            f64.copysign  ; export name
0000819: 00                                        ; export kind
000081a: 8f01                                      ; export func index
000081c: 0c                                        ; string length
000081d: 6933 322e 7772 6170 2f69 3634            i32.wrap/i64  ; export name
0000829: 00                                        ; export kind
000082a: 9001                                      ; export func index
000082c: 0f                                        ; string length
000082d: 6933 322e 7472 756e 635f 732f 6633 32    i32.trunc_s/f32  ; export name
000083c: 00                                        ; export kind
000083d: 9101                                      ; export func index
000083f: 0f                                        ; string length
0000840: 6933 322e 7472 756e 635f 752f 6633 32    i32.trunc_u/f32  ; export name
000084f: 00                                        ; export kind
0000850: 9201                                      ; export func index
0000852: 0f                                        ; string length
0000853: 6933 322e 7472 756e 635f 732f 6636 34    i32.trunc_s/f64  ; export name
0000862: 00                                        ; export kind
0000863: 9301                                      ; export func index
0000865: 0f                                        ; string length
0000866: 6933 322e 7472 756e 635f 752f 6636 34    i32.trunc_u/f64  ; export name
0000875: 00                                        ; export kind
0000876: 9401                                      ; export func index
0000878: 10                                        ; string length
0000879: 6936 342e 6578 7465 6e64 5f73 2f69 3332  i64.extend_s/i32  ; export name
0000889: 00                                        ; export kind
000088a: 9501                                      ; export func index
000088c: 10                                        ; string length
000088d: 6936 342e 6578 7465 6e64 5f75 2f69 3332  i64.extend_u/i32  ; export name
000089d: 00                                        ; export kind
000089e: 9601                                      ; export func index
00008a0: 0f                                        ; string length
00008a1: 6936 342e 7472 756e 635f 732f 6633 32    i64.trunc_s/f32  ; export name
00008b0: 00                                        ; export kind
00008b1: 9701                                      ; export func index
00008b3: 0f                                        ; string length
00008b4: 6936 342e 7472 756e 635f 752f 6633 32    i64.trunc_u/f32  ; export name
00008c3: 00                                        ; export kind
00008c4: 9801                                      ; export func index
00008c6: 0f                                        ; string length
00008c7: 6936 342e 7472 756e 635f 732f 6636 34    i64.trunc_s/f64  ; export name
00008d6: 00                                        ; export kind
00008d7: 9901                                      ; export func index
00008d9: 0f                                        ; string length
00008da: 6936 342e 7472 756e 635f 752f 6636 34    i64.trunc_u/f64  ; export name
00008e9: 00                                        ; export kind
00008ea: 9a01                                      ; export func index
00008ec: 11                                        ; string length
00008ed: 6633 322e 636f 6e76 6572 745f 732f 6933  f32.convert_s/i3
00008fd: 32                                       2  ; export name
00008fe: 00                                        ; export kind
00008ff: 9b01                                      ; export func index
0000901: 11                                        ; string length
0000902: 6633 322e 636f 6e76 6572 745f 752f 6933  f32.convert_u/i3
0000912: 32                                       2  ; export name
0000913: 00                                        ; export kind
0000914: 9c01                                      ; export func index
0000916: 11                                        ; string length
0000917: 6633 322e 636f 6e76 6572 745f 732f 6936  f32.convert_s/i6
0000927: 34                                       4  ; export name
0000928: 00                                        ; export kind
0000929: 9d01                                      ; export func index
000092b: 11                                        ; string length
000092c: 6633 322e 636f 6e76 6572 745f 752f 6936  f32.convert_u/i6
000093c: 34                                       4  ; export name
000093d: 00                                        ; export kind
000093e: 9e01                                      ; export func index
0000940: 0e                                        ; string length
0000941: 6633 322e 6465 6d6f 7465 2f66 3634       f32.demote/f64  ; export name
000094f: 00                                        ; export kind
0000950: 9f01                                      ; export func index
0000952: 11                                        ; string length
0000953: 6636 342e 636f 6e76 6572 745f 732f 6933  f64.convert_s/i3
0000963: 32                                       2  ; export name
0000964: 00                                        ; export kind
0000965: a001                                      ; export func index
0000967: 11                                        ; string length
0000968: 6636 342e 636f 6e76 6572 745f 752f 6933  f64.convert_u/i3
0000978: 32                                       2  ; export name
0000979: 00                                        ; export kind
000097a: a101                                      ; export func index
000097c: 11                                        ; string length
000097d: 6636 342e 636f 6e76 6572 745f 732f 6936  f64.convert_s/i6
000098d: 34                                       4  ; export name
000098e: 00                                        ; export kind
000098f: a201                                      ; export func index
0000991: 11                                        ; string length
0000992: 6636 342e 636f 6e76 6572 745f 752f 6936  f64.convert_u/i6
00009a2: 34                                       4  ; export name
00009a3: 00                                        ; export kind
00009a4: a301                                      ; export func index
00009a6: 0f                                        ; string length
00009a7: 6636 342e 7072 6f6d 6f74 652f 6633 32    f64.promote/f32  ; export name
00009b6: 00                                        ; export kind
00009b7: a401                                      ; export func index
00009b9: 13                                        ; string length
00009ba: 6933 322e 7265 696e 7465 7270 7265 742f  i32.reinterpret/
00009ca: 6633 32                                  f32  ; export name
00009cd: 00                                        ; export kind
00009ce: a501                                      ; export func index
00009d0: 13                                        ; string length
00009d1: 6633 322e 7265 696e 7465 7270 7265 742f  f32.reinterpret/
00009e1: 6933 32                                  i32  ; export name
00009e4: 00                                        ; export kind
00009e5: a601                                      ; export func index
00009e7: 13                                        ; string length
00009e8: 6936 342e 7265 696e 7465 7270 7265 742f  i64.reinterpret/
00009f8: 6636 34                                  f64  ; export name
00009fb: 00                                        ; export kind
00009fc: a701                                      ; export func index
00009fe: 13                                        ; string length
00009ff: 6636 342e 7265 696e 7465 7270 7265 742f  f64.reinterpret/
0000a0f: 6936 34                                  i64  ; export name
0000a12: 00                                        ; export kind
0000a13: a801                                      ; export func index
0000a15: 0d                                        ; string length
0000a16: 6933 322e 6578 7465 6e64 385f 73         i32.extend8_s  ; export name
0000a23: 00                                        ; export kind
0000a24: a901                                      ; export func index
0000a26: 0e                                        ; string length
0000a27: 6933 322e 6578 7465 6e64 3136 5f73       i32.extend16_s  ; export name
0000a35: 00                                        ; export kind
0000a36: aa01                                      ; export func index
0000a38: 0d                                        ; string length
0000a39: 6936 342e 6578 7465 6e64 385f 73         i64.extend8_s  ; export name
0000a46: 00                                        ; export kind
0000a47: ab01                                      ; export func index
0000a49: 0e                                        ; string length
0000a4a: 6936 342e 6578 7465 6e64 3136 5f73       i64.extend16_s  ; export name
0000a58: 00                                        ; export kind
0000a59: ac01                                      ; export func index
0000a5b: 0e                                        ; string length
0000a5c: 6936 342e 6578 7465 6e64 3332 5f73       i64.extend32_s  ; export name
0000a6a: 00                                        ; export kind
0000a6b: ad01                                      ; export func index
0000a6d: 06                                        ; string length
0000a6e: 616c 6c6f 6361                           alloca  ; export name
0000a74: 00                                        ; export kind
0000a75: ae01                                      ; export func index
0000a77: 09                                        ; string length
0000a78: 6272 5f75 6e6c 6573 73                   br_unless  ; export name
0000a81: 00                                        ; export kind
0000a82: af01                                      ; export func index
0000a84: 09                                        ; string length
0000a85: 6361 6c6c 5f68 6f73 74                   call_host  ; export name
0000a8e: 00                                        ; export kind
0000a8f: b001                                      ; export func index
0000a91: 04                                        ; string length
0000a92: 6461 7461                                data  ; export name
0000a96: 00                                        ; export kind
0000a97: b101                                      ; export func index
0000a99: 09                                        ; string length
0000a9a: 6472 6f70 5f6b 6565 70                   drop_keep  ; export name
0000aa3: 00                                        ; export kind
0000aa4: b201                                      ; export func index
0000aa6: 13                                        ; string length
0000aa7: 6933 322e 7472 756e 635f 733a 7361 742f  i32.trunc_s:sat/
0000ab7: 6633 32                                  f32  ; export name
0000aba: 00                                        ; export kind
0000abb: b301                                      ; export func index
0000abd: 13                                        ; string length
0000abe: 6933 322e 7472 756e 635f 753a 7361 742f  i32.trunc_u:sat/
0000ace: 6633 32                                  f32  ; export name
0000ad1: 00                                        ; export kind
0000ad2: b401                                      ; export func index
0000ad4: 13                                        ; string length
0000ad5: 6933 322e 7472 756e 635f 733a 7361 742f  i32.trunc_s:sat/
0000ae5: 6636 34                                  f64  ; export name
0000ae8: 00                                        ; export kind
0000ae9: b501                                      ; export func index
0000aeb: 13                                        ; string length
0000aec: 6933 322e 7472 756e 635f 753a 7361 742f  i32.trunc_u:sat/
0000afc: 6636 34                                  f64  ; export name
0000aff: 00                                        ; export kind
0000b00: b601                                      ; export func index
0000b02: 13                                        ; string length
0000b03: 6936 342e 7472 756e 635f 733a 7361 742f  i64.trunc_s:sat/
0000b13: 6633 32                                  f32  ; export name
0000b16: 00                                        ; export kind
0000b17: b701                                      ; export func index
0000b19: 13                                        ; string length
0000b1a: 6936 342e 7472 756e 635f 753a 7361 742f  i64.trunc_u:sat/
0000b2a: 6633 32                                  f32  ; export name
0000b2d: 00                                        ; export kind
0000b2e: b801                                      ; export func index
0000b30: 13                                        ; string length
0000b31: 6936 342e 7472 756e 635f 733a 7361 742f  i64.trunc_s:sat/
0000b41: 6636 34                                  f64  ; export name
0000b44: 00                                        ; export kind
0000b45: b901                                      ; export func index
0000b47: 13                                        ; string length
0000b48: 6936 342e 7472 756e 635f 753a 7361 742f  i64.trunc_u:sat/
0000b58: 6636 34                                  f64  ; export name
0000b5b: 00                                        ; export kind
0000b5c: ba01                                      ; export func index
0000b5e: 09                                        ; string length
0000b5f: 7631 3238 2e6c 6f61 64                   v128.load  ; export name
0000b68: 00                                        ; export kind
0000b69: bb01                                      ; export func index
0000b6b: 0a                                        ; string length
0000b6c: 7631 3238 2e73 746f 7265                 v128.store  ; export name
0000b76: 00                                        ; export kind
0000b77: bc01                                      ; export func index
0000b79: 0a                                        ; string length
0000b7a: 7631 3238 2e63 6f6e 7374                 v128.const  ; export name
0000b84: 00                                        ; export kind
0000b85: bd01                                      ; export func index
0000b87: 0d                                        ; string length
0000b88: 7638 7831 362e 7368 7566 666c 65         v8x16.shuffle  ; export name
0000b95: 00                                        ; export kind
0000b96: be01                                      ; export func index
0000b98: 0b                                        ; string length
0000b99: 6938 7831 362e 7370 6c61 74              i8x16.splat  ; export name
0000ba4: 00                                        ; export kind
0000ba5: bf01                                      ; export func index
0000ba7: 14                                        ; string length
0000ba8: 6938 7831 362e 6578 7472 6163 745f 6c61  i8x16.extract_la
0000bb8: 6e65 5f73                                ne_s  ; export name
0000bbc: 00                                        ; export kind
0000bbd: c001                                      ; export func index
0000bbf: 14                                        ; string length
0000bc0: 6938 7831 362e 6578 7472 6163 745f 6c61  i8x16.extract_la
0000bd0: 6e65 5f75                                ne_u  ; export name
0000bd4: 00                                        ; export kind
0000bd5: c101                                      ; export func index
0000bd7: 12                                        ; string length
0000bd8: 6938 7831 362e 7265 706c 6163 655f 6c61  i8x16.replace_la
0000be8: 6e65                                     ne  ; export name
0000bea: 00                                        ; export kind
0000beb: c201                                      ; export func index
0000bed: 0b                                        ; string length
0000bee: 6931 3678 382e 7370 6c61 74              i16x8.splat  ; export name
0000bf9: 00                                        ; export kind
0000bfa: c301                                      ; export func index
0000bfc: 14                                        ; string length
0000bfd: 6931 3678 382e 6578 7472 6163 745f 6c61  i16x8.extract_la
0000c0d: 6e65 5f73                                ne_s  ; export name
0000c11: 00                                        ; export kind
0000c12: c401                                      ; export func index
0000c14: 14                                        ; string length
0000c15: 6931 3678 382e 6578 7472 6163 745f 6c61  i16x8.extract_la
0000c25: 6e65 5f75                                ne_u  ; export name
0000c29: 00                                        ; export kind
0000c2a: c501                                      ; export func index
0000c2c: 12                                        ; string length
0000c2d: 6931 3678 382e 7265 706c 6163 655f 6c61  i16x8.replace_la
0000c3d: 6e65                                     ne  ; export name
0000c3f: 00                                        ; export kind
0000c40: c601                                      ; export func index
0000c42: 0b                                        ; string length
0000c43: 6933 3278 342e 7370 6c61 74              i32x4.splat  ; export name
0000c4e: 00                                        ; export kind
0000c4f: c701                                      ; export func index
0000c51: 12                                        ; string length
0000c52: 6933 3278 342e 6578 7472 6163 745f 6c61  i32x4.extract_la
0000c62: 6e65                                     ne  ; export name
0000c64: 00                                        ; export kind
0000c65: c801                                      ; export func index
0000c67: 12                                        ; string length
0000c68: 6933 3278 342e 7265 706c 6163 655f 6c61  i32x4.replace_la
0000c78: 6e65                                     ne  ; export name
0000c7a: 00                                        ; export kind
0000c7b: c901                                      ; export func index
0000c7d: 0b                                        ; string length
0000c7e: 6936 3478 322e 7370 6c61 74              i64x2.splat  ; export name
0000c89: 00                                        ; export kind
0000c8a: ca01                                      ; export func index
0000c8c: 12                                        ; string length
0000c8d: 6936 3478 322e 6578 7472 6163 745f 6c61  i64x2.extract_la
0000c9d: 6e65                                     ne  ; export name
0000c9f: 00                                        ; export kind
0000ca0: cb01                                      ; export func index
0000ca2: 12                                        ; string length
0000ca3: 6936 3478 322e 7265 706c 6163 655f 6c61  i64x2.replace_la
0000cb3: 6e65                                     ne  ; export name
0000cb5: 00                                        ; export kind
0000cb6: cc01                                      ; export func index
0000cb8: 0b                                        ; string length
0000cb9: 6633 3278 342e 7370 6c61 74              f32x4.splat  ; export name
0000cc4: 00                                        ; export kind
0000cc5: cd01                                      ; export func index
0000cc7: 12                                        ; string length
0000cc8: 6633 3278 342e 6578 7472 6163 745f 6c61  f32x4.extract_la
0000cd8: 6e65                                     ne  ; export name
0000cda: 00                                        ; export kind
0000cdb: ce01                                      ; export func index
0000cdd: 12                                        ; string length
0000cde: 6633 3278 342e 7265 706c 6163 655f 6c61  f32x4.replace_la
0000cee: 6e65                                     ne  ; export name
0000cf0: 00                                        ; export kind
0000cf1: cf01                                      ; export func index
0000cf3: 0b                                        ; string length
0000cf4: 6636 3478 322e 7370 6c61 74              f64x2.splat  ; export name
0000cff: 00                                        ; export kind
0000d00: d001                                      ; export func index
0000d02: 12                                        ; string length
0000d03: 6636 3478 322e 6578 7472 6163 745f 6c61  f64x2.extract_la
0000d13: 6e65                                     ne  ; export name
0000d15: 00                                        ; export kind
0000d16: d101                                      ; export func index
0000d18: 12                                        ; string length
0000d19: 6636 3478 322e 7265 706c 6163 655f 6c61  f64x2.replace_la
0000d29: 6e65                                     ne  ; export name
0000d2b: 00                                        ; export kind
0000d2c: d201                                      ; export func index
0000d2e: 08                                        ; string length
0000d2f: 6938 7831 362e 6571                      i8x16.eq  ; export name
0000d37: 00                                        ; export kind
0000d38: d301                                      ; export func index
0000d3a: 08                                        ; string length
0000d3b: 6938 7831 362e 6e65                      i8x16.ne  ; export name
0000d43: 00                                        ; export kind
0000d44: d401                                      ; export func index
0000d46: 0a                                        ; string length
0000d47: 6938 7831 362e 6c74 5f73                 i8x16.lt_s  ; export name
0000d51: 00                                        ; export kind
0000d52: d501                                      ; export func index
0000d54: 0a                                        ; string length
0000d55: 6938 7831 362e 6c74 5f75                 i8x16.lt_u  ; export name
0000d5f: 00                                        ; export kind
0000d60: d601                                      ; export func index
0000d62: 0a                                        ; string length
0000d63: 6938 7831 362e 6774 5f73                 i8x16.gt_s  ; export name
0000d6d: 00                                        ; export kind
0000d6e: d701                                      ; export func index
0000d70: 0a                                        ; string length
0000d71: 6938 7831 362e 6774 5f75                 i8x16.gt_u  ; export name
0000d7b: 00                                        ; export kind
0000d7c: d801                                      ; export func index
0000d7e: 0a                                        ; string length
0000d7f: 6938 7831 362e 6c65 5f73                 i8x16.le_s  ; export name
0000d89: 00                                        ; export kind
0000d8a: d901                                      ; export func index
0000d8c: 0a                                        ; string length
0000d8d: 6938 7831 362e 6c65 5f75                 i8x16.le_u  ; export name
0000d97: 00                                        ; export kind
0000d98: da01                                      ; export func index
0000d9a: 0a                                        ; string length
0000d9b: 6938 7831 362e 6765 5f73                 i8x16.ge_s  ; export name
0000da5: 00                                        ; export kind
0000da6: db01                                      ; export func index
0000da8: 0a                                        ; string length
0000da9: 6938 7831 362e 6765 5f75                 i8x16.ge_u  ; export name
0000db3: 00                                        ; export kind
0000db4: dc01                                      ; export func index
0000db6: 08                                        ; string length
0000db7: 6931 3678 382e 6571                      i16x8.eq  ; export name
0000dbf: 00                                        ; export kind
0000dc0: dd01                                      ; export func index
0000dc2: 08                                        ; string length
0000dc3: 6931 3678 382e 6e65                      i16x8.ne  ; export name
0000dcb: 00                                        ; export kind
0000dcc: de01                                      ; export func index
0000dce: 0a                                        ; string length
0000dcf: 6931 3678 382e 6c74 5f73                 i16x8.lt_s  ; export name
0000dd9: 00                                        ; export kind
0000dda: df01                                      ; export func index
0000ddc: 0a                                        ; string length
0000ddd: 6931 3678 382e 6c74 5f75                 i16x8.lt_u  ; export name
0000de7: 00                                        ; export kind
0000de8: e001                                      ; export func index
0000dea: 0a                                        ; string length
0000deb: 6931 3678 382e 6774 5f73                 i16x8.gt_s  ; export name
0000df5: 00                                        ; export kind
0000df6: e101                                      ; export func index
0000df8: 0a                                        ; string length
0000df9: 6931 3678 382e 6774 5f75                 i16x8.gt_u  ; export name
0000e03: 00                                        ; export kind
0000e04: e201                                      ; export func index
0000e06: 0a                                        ; string length
0000e07: 6931 3678 382e 6c65 5f73                 i16x8.le_s  ; export name
0000e11: 00                                        ; export kind
0000e12: e301                                      ; export func index
0000e14: 0a                                        ; string length
0000e15: 6931 3678 382e 6c65 5f75                 i16x8.le_u  ; export name
0000e1f: 00                                        ; export kind
0000e20: e401                                      ; export func index
0000e22: 0a                                        ; string length
0000e23: 6931 3678 382e 6765 5f73                 i16x8.ge_s  ; export name
0000e2d: 00                                        ; export kind
0000e2e: e501                                      ; export func index
0000e30: 0a                                        ; string length
0000e31: 6931 3678 382e 6765 5f75                 i16x8.ge_u  ; export name
0000e3b: 00                                        ; export kind
0000e3c: e601                                      ; export func index
0000e3e: 08                                        ; string length
0000e3f: 6933 3278 342e 6571                      i32x4.eq  ; export name
0000e47: 00                                        ; export kind
0000e48: e701                                      ; export func index
0000e4a: 08                                        ; string length
0000e4b: 6933 3278 342e 6e65                      i32x4.ne  ; export name
0000e53: 00                                        ; export kind
0000e54: e801                                      ; export func index
0000e56: 0a                                        ; string length
0000e57: 6933 3278 342e 6c74 5f73                 i32x4.lt_s  ; export name
0000e61: 00                                        ; export kind
0000e62: e901                                      ; export func index
0000e64: 0a                                        ; string length
0000e65: 6933 3278 342e 6c74 5f75                 i32x4.lt_u  ; export name
0000e6f: 00                                        ; export kind
0000e70: ea01                                      ; export func index
0000e72: 0a                                        ; string length
0000e73: 6933 3278 342e 6774 5f73                 i32x4.gt_s  ; export name
0000e7d: 00                                        ; export kind
0000e7e: eb01                                      ; export func index
0000e80: 0a                                        ; string length
0000e81: 6933 3278 342e 6774 5f75                 i32x4.gt_u  ; export name
0000e8b: 00                                        ; export kind
0000e8c: ec01                                      ; export func index
0000e8e: 0a                                        ; string length
0000e8f: 6933 3278 342e 6c65 5f73                 i32x4.le_s  ; export name
0000e99: 00                                        ; export kind
0000e9a: ed01                                      ; export func index
0000e9c: 0a                                        ; string length
0000e9d: 6933 3278 342e 6c65 5f75                 i32x4.le_u  ; export name
0000ea7: 00                                        ; export kind
0000ea8: ee01                                      ; export func index
0000eaa: 0a                                        ; string length
0000eab: 6933 3278 342e 6765 5f73                 i32x4.ge_s  ; export name
0000eb5: 00                                        ; export kind
0000eb6: ef01                                      ; export func index
0000eb8: 0a                                        ; string length
0000eb9: 6933 3278 342e 6765 5f75                 i32x4.ge_u  ; export name
0000ec3: 00                                        ; export kind
0000ec4: f001                                      ; export func index
0000ec6: 08                                        ; string length
0000ec7: 6633 3278 342e 6571                      f32x4.eq  ; export name
0000ecf: 00                                        ; export kind
0000ed0: f101                                      ; export func index
0000ed2: 08                                        ; string length
0000ed3: 6633 3278 342e 6e65                      f32x4.ne  ; export name
0000edb: 00                                        ; export kind
0000edc: f201                                      ; export func index
0000ede: 08                                        ; string length
0000edf: 6633 3278 342e 6c74                      f32x4.lt  ; export name
0000ee7: 00                                        ; export kind
0000ee8: f301                                      ; export func index
0000eea: 08                                        ; string length
0000eeb: 6633 3278 342e 6774                      f32x4.gt  ; export name
0000ef3: 00                                        ; export kind
0000ef4: f401                                      ; export func index
0000ef6: 08                                        ; string length
0000ef7: 6633 3278 342e 6c65                      f32x4.le  ; export name
0000eff: 00                                        ; export kind
0000f00: f501                                      ; export func index
0000f02: 08                                        ; string length
0000f03: 6633 3278 342e 6765                      f32x4.ge  ; export name
0000f0b: 00                                        ; export kind
0000f0c: f601                                      ; export func index
0000f0e: 08                                        ; string length
0000f0f: 6636 3478 322e 6571                      f64x2.eq  ; export name
0000f17: 00                                        ; export kind
0000f18: f701                                      ; export func index
0000f1a: 08                                        ; string length
0000f1b: 6636 3478 322e 6e65                      f64x2.ne  ; export name
0000f23: 00                                        ; export kind
0000f24: f801                                      ; export func index
0000f26: 08                                        ; string length
0000f27: 6636 3478 322e 6c74                      f64x2.lt  ; export name
0000f2f: 00                                        ; export kind
0000f30: f901                                      ; export func index
0000f32: 08                                        ; string length
0000f33: 6636 3478 322e 6774                      f64x2.gt  ; export name
0000f3b: 00                                        ; export kind
0000f3c: fa01                                      ; export func index
0000f3e: 08                                        ; string length
0000f3f: 6636 3478 322e 6c65                      f64x2.le  ; export name
0000f47: 00                                        ; export kind
0000f48: fb01                                      ; export func index
0000f4a: 08                                        ; string length
0000f4b: 6636 3478 322e 6765                      f64x2.ge  ; export name
0000f53: 00                                        ; export kind
0000f54: fc01                                      ; export func index
0000f56: 08                                        ; string length
0000f57: 7631 3238 2e6e 6f74                      v128.not  ; export name
0000f5f: 00                                        ; export kind
0000f60: fd01                                      ; export func index
0000f62: 08                                        ; string length
0000f63: 7631 3238 2e61 6e64                      v128.and  ; export name
0000f6b: 00                                        ; export kind
0000f6c: fe01                                      ; export func index
0000f6e: 07                                        ; string length
0000f6f: 7631 3238 2e6f 72                        v128.or  ; export name
0000f76: 00                                        ; export kind
0000f77: ff01                                      ; export func index
0000f79: 08                                        ; string length
0000f7a: 7631 3238 2e78 6f72                      v128.xor  ; export name
0000f82: 00                                        ; export kind
0000f83: 8002                                      ; export func index
0000f85: 0e                                        ; string length
0000f86: 7631 3238 2e62 6974 7365 6c65 6374       v128.bitselect  ; export name
0000f94: 00                                        ; export kind
0000f95: 8102                                      ; export func index
0000f97: 09                                        ; string length
0000f98: 6938 7831 362e 6e65 67                   i8x16.neg  ; export name
0000fa1: 00                                        ; export kind
0000fa2: 8202                                      ; export func index
0000fa4: 0e                                        ; string length
0000fa5: 6938 7831 362e 616e 795f 7472 7565       i8x16.any_true  ; export name
0000fb3: 00                                        ; export kind
0000fb4: 8302                                      ; export func index
0000fb6: 0e                                        ; string length
0000fb7: 6938 7831 362e 616c 6c5f 7472 7565       i8x16.all_true  ; export name
0000fc5: 00                                        ; export kind
0000fc6: 8402                                      ; export func index
0000fc8: 09                                        ; string length
0000fc9: 6938 7831 362e 7368 6c                   i8x16.shl  ; export name
0000fd2: 00                                        ; export kind
0000fd3: 8502                                      ; export func index
0000fd5: 0b                                        ; string length
0000fd6: 6938 7831 362e 7368 725f 73              i8x16.shr_s  ; export name
0000fe1: 00                                        ; export kind
0000fe2: 8602                                      ; export func index
0000fe4: 0b                                        ; string length
0000fe5: 6938 7831 362e 7368 725f 75              i8x16.shr_u  ; export name
0000ff0: 00                                        ; export kind
0000ff1: 8702                                      ; export func index
0000ff3: 09                                        ; string length
0000ff4: 6938 7831 362e 6164 64                   i8x16.add  ; export name
0000ffd: 00                                        ; export kind
0000ffe: 8802                                      ; export func index
0001000: 14                                        ; string length
0001001: 6938 7831 362e 6164 645f 7361 7475 7261  i8x16.add_satura
0001011: 7465 5f73                                te_s  ; export name
0001015: 00                                        ; export kind
0001016: 8902                                      ; export func index
0001018: 14                                        ; string length
0001019: 6938 7831 362e 6164 645f 7361 7475 7261  i8x16.add_satura
0001029: 7465 5f75                                te_u  ; export name
000102d: 00                                        ; export kind
000102e: 8a02                                      ; export func index
0001030: 09                                        ; string length
0001031: 6938 7831 362e 7375 62                   i8x16.sub  ; export name
000103a: 00                                        ; export kind
000103b: 8b02                                      ; export func index
000103d: 14                                        ; string length
000103e: 6938 7831 362e 7375 625f 7361 7475 7261  i8x16.sub_satura
000104e: 7465 5f73                                te_s  ; export name
0001052: 00                                        ; export kind
0001053: 8c02                                      ; export func index
0001055: 14                                        ; string length
0001056: 6938 7831 362e 7375 625f 7361 7475 7261  i8x16.sub_satura
0001066: 7465 5f75                                te_u  ; export name
000106a: 00                                        ; export kind
000106b: 8d02                                      ; export func index
000106d: 09                                        ; string length
000106e: 6938 7831 362e 6d75 6c                   i8x16.mul  ; export name
0001077: 00                                        ; export kind
0001078: 8e02                                      ; export func index
000107a: 09                                        ; string length
000107b: 6931 3678 382e 6e65 67                   i16x8.neg  ; export name
0001084: 00                                        ; export kind
0001085: 8f02                                      ; export func index
0001087: 0e                                        ; string length
0001088: 6931 3678 382e 616e 795f 7472 7565       i16x8.any_true  ; export name
0001096: 00                                        ; export kind
0001097: 9002                                      ; export func index
0001099: 0e                                        ; string length
000109a: 6931 3678 382e 616c 6c5f 7472 7565       i16x8.all_true  ; export name
00010a8: 00                                        ; export kind
00010a9: 9102                                      ; export func index
00010ab: 09                                        ; string length
00010ac: 6931 3678 382e 7368 6c                   i16x8.shl  ; export name
00010b5: 00                                        ; export kind
00010b6: 9202                                      ; export func index
00010b8: 0b                                        ; string length
00010b9: 6931 3678 382e 7368 725f 73              i16x8.shr_s  ; export name
00010c4: 00                                        ; export kind
00010c5: 9302                                      ; export func index
00010c7: 0b                                        ; string length
00010c8: 6931 3678 382e 7368 725f 75              i16x8.shr_u  ; export name
00010d3: 00                                        ; export kind
00010d4: 9402                                      ; export func index
00010d6: 09                                        ; string length
00010d7: 6931 3678 382e 6164 64                   i16x8.add  ; export name
00010e0: 00                                        ; export kind
00010e1: 9502                                      ; export func index
00010e3: 14                                        ; string length
00010e4: 6931 3678 382e 6164 645f 7361 7475 7261  i16x8.add_satura
00010f4: 7465 5f73                                te_s  ; export name
00010f8: 00                                        ; export kind
00010f9: 9602                                      ; export func index
00010fb: 14                                        ; string length
00010fc: 6931 3678 382e 6164 645f 7361 7475 7261  i16x8.add_satura
000110c: 7465 5f75                                te_u  ; export name
0001110: 00                                        ; export kind
0001111: 9702                                      ; export func index
0001113: 09                                        ; string length
0001114: 6931 3678 382e 7375 62                   i16x8.sub  ; export name
000111d: 00                                        ; export kind
000111e: 9802                                      ; export func index
0001120: 14                                        ; string length
0001121: 6931 3678 382e 7375 625f 7361 7475 7261  i16x8.sub_satura
0001131: 7465 5f73                                te_s  ; export name
0001135: 00                                        ; export kind
0001136: 9902                                      ; export func index
0001138: 14                                        ; string length
0001139: 6931 3678 382e 7375 625f 7361 7475 7261  i16x8.sub_satura
0001149: 7465 5f75                                te_u  ; export name
000114d: 00                                        ; export kind
000114e: 9a02                                      ; export func index
0001150: 09                                        ; string length
0001151: 6931 3678 382e 6d75 6c                   i16x8.mul  ; export name
000115a: 00                                        ; export kind
000115b: 9b02                                      ; export func index
000115d: 09                                        ; string length
000115e: 6933 3278 342e 6e65 67                   i32x4.neg  ; export name
0001167: 00                                        ; export kind
0001168: 9c02                                      ; export func index
000116a: 0e                                        ; string length
000116b: 6933 3278 342e 616e 795f 7472 7565       i32x4.any_true  ; export name
0001179: 00                                        ; export kind
000117a: 9d02                                      ; export func index
000117c: 0e                                        ; string length
000117d: 6933 3278 342e 616c 6c5f 7472 7565       i32x4.all_true  ; export name
000118b: 00                                        ; export kind
000118c: 9e02                                      ; export func index
000118e: 09                                        ; string length
000118f: 6933 3278 342e 7368 6c                   i32x4.shl  ; export name
0001198: 00                                        ; export kind
0001199: 9f02                                      ; export func index
000119b: 0b                                        ; string length
000119c: 6933 3278 342e 7368 725f 73              i32x4.shr_s  ; export name
00011a7: 00                                        ; export kind
00011a8: a002                                      ; export func index
00011aa: 0b                                        ; string length
00011ab: 6933 3278 342e 7368 725f 75              i32x4.shr_u  ; export name
00011b6: 00                                        ; export kind
00011b7: a102                                      ; export func index
00011b9: 09                                        ; string length
00011ba: 6933 3278 342e 6164 64                   i32x4.add  ; export name
00011c3: 00                                        ; export kind
00011c4: a202                                      ; export func index
00011c6: 09                                        ; string length
00011c7: 6933 3278 342e 7375 62                   i32x4.sub  ; export name
00011d0: 00                                        ; export kind
00011d1: a302                                      ; export func index
00011d3: 09                                        ; string length
00011d4: 6933 3278 342e 6d75 6c                   i32x4.mul  ; export name
00011dd: 00                                        ; export kind
00011de: a402                                      ; export func index
00011e0: 09                                        ; string length
00011e1: 6936 3478 322e 6e65 67                   i64x2.neg  ; export name
00011ea: 00                                        ; export kind
00011eb: a502                                      ; export func index
00011ed: 0e                                        ; string length
00011ee: 6936 3478 322e 616e 795f 7472 7565       i64x2.any_true  ; export name
00011fc: 00                                        ; export kind
00011fd: a602                                      ; export func index
00011ff: 0e                                        ; string length
0001200: 6936 3478 322e 616c 6c5f 7472 7565       i64x2.all_true  ; export name
000120e: 00                                        ; export kind
000120f: a702                                      ; export func index
0001211: 09                                        ; string length
0001212: 6936 3478 322e 7368 6c                   i64x2.shl  ; export name
000121b: 00                                        ; export kind
000121c: a802                                      ; export func index
000121e: 0b                                        ; string length
000121f: 6936 3478 322e 7368 725f 73              i64x2.shr_s  ; export name
000122a: 00                                        ; export kind
000122b: a902                                      ; export func index
000122d: 0b                                        ; string length
000122e: 6936 3478 322e 7368 725f 75              i64x2.shr_u  ; export name
0001239: 00                                        ; export kind
000123a: aa02                                      ; export func index
000123c: 09                                        ; string length
000123d: 6936 3478 322e 6164 64                   i64x2.add  ; export name
0001246: 00                                        ; export kind
0001247: ab02                                      ; export func index
0001249: 09                                        ; string length
000124a: 6936 3478 322e 7375 62                   i64x2.sub  ; export name
0001253: 00                                        ; export kind
0001254: ac02                                      ; export func index
0001256: 09                                        ; string length
0001257: 6633 3278 342e 6162 73                   f32x4.abs  ; export name
0001260: 00                                        ; export kind
0001261: ad02                                      ; export func index
0001263: 09                                        ; string length
0001264: 6633 3278 342e 6e65 67                   f32x4.neg  ; export name
000126d: 00                                        ; export kind
000126e: ae02                                      ; export func index
0001270: 0a                                        ; string length
0001271: 6633 3278 342e 7371 7274                 f32x4.sqrt  ; export name
000127b: 00                                        ; export kind
000127c: af02                                      ; export func index
000127e: 09                                        ; string length
000127f: 6633 3278 342e 6164 64                   f32x4.add  ; export name
0001288: 00                                        ; export kind
0001289: b002                                      ; export func index
000128b: 09                                        ; string length
000128c: 6633 3278 342e 7375 62                   f32x4.sub  ; export name
0001295: 00                                        ; export kind
0001296: b102                                      ; export func index
0001298: 09                                        ; string length
0001299: 6633 3278 342e 6d75 6c                   f32x4.mul  ; export name
00012a2: 00                                        ; export kind
00012a3: b202                                      ; export func index
00012a5: 09                                        ; string length
00012a6: 6633 3278 342e 6469 76                   f32x4.div  ; export name
00012af: 00                                        ; export kind
00012b0: b302                                      ; export func index
00012b2: 09                                        ; string length
00012b3: 6633 3278 342e 6d69 6e                   f32x4.min  ; export name
00012bc: 00                                        ; export kind
00012bd: b402                                      ; export func index
00012bf: 09                                        ; string length
00012c0: 6633 3278 342e 6d61 78                   f32x4.max  ; export name
00012c9: 00                                        ; export kind
00012ca: b502                                      ; export func index
00012cc: 09                                        ; string length
00012cd: 6636 3478 322e 6162 73                   f64x2.abs  ; export name
00012d6: 00                                        ; export kind
00012d7: b602                                      ; export func index
00012d9: 09                                        ; string length
00012da: 6636 3478 322e 6e65 67                   f64x2.neg  ; export name
00012e3: 00                                        ; export kind
00012e4: b702                                      ; export func index
00012e6: 0a                                        ; string length
00012e7: 6636 3478 322e 7371 7274                 f64x2.sqrt  ; export name
00012f1: 00                                        ; export kind
00012f2: b802                                      ; export func index
00012f4: 09                                        ; string length
00012f5: 6636 3478 322e 6164 64                   f64x2.add  ; export name
00012fe: 00                                        ; export kind
00012ff: b902                                      ; export func index
0001301: 09                                        ; string length
0001302: 6636 3478 322e 7375 62                   f64x2.sub  ; export name
000130b: 00                                        ; export kind
000130c: ba02                                      ; export func index
000130e: 09                                        ; string length
000130f: 6636 3478 322e 6d75 6c                   f64x2.mul  ; export name
0001318: 00                                        ; export kind
0001319: bb02                                      ; export func index
000131b: 09                                        ; string length
000131c: 6636 3478 322e 6469 76                   f64x2.div  ; export name
0001325: 00                                        ; export kind
0001326: bc02                                      ; export func index
0001328: 09                                        ; string length
0001329: 6636 3478 322e 6d69 6e                   f64x2.min  ; export name
0001332: 00                                        ; export kind
0001333: bd02                                      ; export func index
0001335: 09                                        ; string length
0001336: 6636 3478 322e 6d61 78                   f64x2.max  ; export name
000133f: 00                                        ; export kind
0001340: be02                                      ; export func index
0001342: 17                                        ; string length
0001343: 6933 3278 342e 7472 756e 635f 7361 745f  i32x4.trunc_sat_
0001353: 6633 3278 345f 73                        f32x4_s  ; export name
000135a: 00                                        ; export kind
000135b: bf02                                      ; export func index
000135d: 17                                        ; string length
000135e: 6933 3278 342e 7472 756e 635f 7361 745f  i32x4.trunc_sat_
000136e: 6633 3278 345f 75                        f32x4_u  ; export name
0001375: 00                                        ; export kind
0001376: c002                                      ; export func index
0001378: 17                                        ; string length
0001379: 6936 3478 322e 7472 756e 635f 7361 745f  i64x2.trunc_sat_
0001389: 6636 3478 325f 73                        f64x2_s  ; export name
0001390: 00                                        ; export kind
0001391: c102                                      ; export func index
0001393: 17                                        ; string length
0001394: 6936 3478 322e 7472 756e 635f 7361 745f  i64x2.trunc_sat_
00013a4: 6636 3478 325f 75                        f64x2_u  ; export name
00013ab: 00                                        ; export kind
00013ac: c202                                      ; export func index
00013ae: 15                                        ; string length
00013af: 6633 3278 342e 636f 6e76 6572 745f 6933  f32x4.convert_i3
00013bf: 3278 345f 73                             2x4_s  ; export name
00013c4: 00                                        ; export kind
00013c5: c302                                      ; export func index
00013c7: 15                                        ; string length
00013c8: 6633 3278 342e 636f 6e76 6572 745f 6933  f32x4.convert_i3
00013d8: 3278 345f 75                             2x4_u  ; export name
00013dd: 00                                        ; export kind
00013de: c402                                      ; export func index
00013e0: 15                                        ; string length
00013e1: 6636 3478 322e 636f 6e76 6572 745f 6936  f64x2.convert_i6
00013f1: 3478 325f 73                             4x2_s  ; export name
00013f6: 00                                        ; export kind
00013f7: c502                                      ; export func index
00013f9: 15                                        ; string length
00013fa: 6636 3478 322e 636f 6e76 6572 745f 6936  f64x2.convert_i6
000140a: 3478 325f 75                             4x2_u  ; export name
000140f: 00                                        ; export kind
0001410: c602                                      ; export func index
0001412: 0d                                        ; string length
0001413: 6174 6f6d 6963 2e6e 6f74 6966 79         atomic.notify  ; export name
0001420: 00                                        ; export kind
0001421: c702                                      ; export func index
0001423: 0f                                        ; string length
0001424: 6933 322e 6174 6f6d 6963 2e77 6169 74    i32.atomic.wait  ; export name
0001433: 00                                        ; export kind
0001434: c802                                      ; export func index
0001436: 0f                                        ; string length
0001437: 6936 342e 6174 6f6d 6963 2e77 6169 74    i64.atomic.wait  ; export name
0001446: 00                                        ; export kind
0001447: c902                                      ; export func index
0001449: 0f                                        ; string length
000144a: 6933 322e 6174 6f6d 6963 2e6c 6f61 64    i32.atomic.load  ; export name
0001459: 00                                        ; export kind
000145a: ca02                                      ; export func index
000145c: 0f                                        ; string length
000145d: 6936 342e 6174 6f6d 6963 2e6c 6f61 64    i64.atomic.load  ; export name
000146c: 00                                        ; export kind
000146d: cb02                                      ; export func index
000146f: 12                                        ; string length
0001470: 6933 322e 6174 6f6d 6963 2e6c 6f61 6438  i32.atomic.load8
0001480: 5f75                                     _u  ; export name
0001482: 00                                        ; export kind
0001483: cc02                                      ; export func index
0001485: 13                                        ; string length
0001486: 6933 322e 6174 6f6d 6963 2e6c 6f61 6431  i32.atomic.load1
0001496: 365f 75                                  6_u  ; export name
0001499: 00                                        ; export kind
000149a: cd02                                      ; export func index
000149c: 12                                        ; string length
000149d: 6936 342e 6174 6f6d 6963 2e6c 6f61 6438  i64.atomic.load8
00014ad: 5f75                                     _u  ; export name
00014af: 00                                        ; export kind
00014b0: ce02                                      ; export func index
00014b2: 13                                        ; string length
00014b3: 6936 342e 6174 6f6d 6963 2e6c 6f61 6431  i64.atomic.load1
00014c3: 365f 75                                  6_u  ; export name
00014c6: 00                                        ; export kind
00014c7: cf02                                      ; export func index
00014c9: 13                                        ; string length
00014ca: 6936 342e 6174 6f6d 6963 2e6c 6f61 6433  i64.atomic.load3
00014da: 325f 75                                  2_u  ; export name
00014dd: 00                                        ; export kind
00014de: d002                                      ; export func index
00014e0: 10                                        ; string length
00014e1: 6933 322e 6174 6f6d 6963 2e73 746f 7265  i32.atomic.store  ; export name
00014f1: 00                                        ; export kind
00014f2: d102                                      ; export func index
00014f4: 10                                        ; string length
00014f5: 6936 342e 6174 6f6d 6963 2e73 746f 7265  i64.atomic.store  ; export name
0001505: 00                                        ; export kind
0001506: d202                                      ; export func index
0001508: 11                                        ; string length
0001509: 6933 322e 6174 6f6d 6963 2e73 746f 7265  i32.atomic.store
0001519: 38                                       8  ; export name
000151a: 00                                        ; export kind
000151b: d302                                      ; export func index
000151d: 12                                        ; string length
000151e: 6933 322e 6174 6f6d 6963 2e73 746f 7265  i32.atomic.store
000152e: 3136                                     16  ; export name
0001530: 00                                        ; export kind
0001531: d402                                      ; export func index
0001533: 11                                        ; string length
0001534: 6936 342e 6174 6f6d 6963 2e73 746f 7265  i64.atomic.store
0001544: 38                                       8  ; export name
0001545: 00                                        ; export kind
0001546: d502                                      ; export func index
0001548: 12                                        ; string length
0001549: 6936 342e 6174 6f6d 6963 2e73 746f 7265  i64.atomic.store
0001559: 3136                                     16  ; export name
000155b: 00                                        ; export kind
000155c: d602                                      ; export func index
000155e: 12                                        ; string length
000155f: 6936 342e 6174 6f6d 6963 2e73 746f 7265  i64.atomic.store
000156f: 3332                                     32  ; export name
0001571: 00                                        ; export kind
0001572: d702                                      ; export func index
0001574: 12                                        ; string length
0001575: 6933 322e 6174 6f6d 6963 2e72 6d77 2e61  i32.atomic.rmw.a
0001585: 6464                                     dd  ; export name
0001587: 00                                        ; export kind
0001588: d802                                      ; export func index
000158a: 12                                        ; string length
000158b: 6936 342e 6174 6f6d 6963 2e72 6d77 2e61  i64.atomic.rmw.a
000159b: 6464                                     dd  ; export name
000159d: 00                                        ; export kind
000159e: d902                                      ; export func index
00015a0: 15                                        ; string length
00015a1: 6933 322e 6174 6f6d 6963 2e72 6d77 382e  i32.atomic.rmw8.
00015b1: 6164 645f 75                             add_u  ; export name
00015b6: 00                                        ; export kind
00015b7: da02                                      ; export func index
00015b9: 16                                        ; string length
00015ba: 6933 322e 6174 6f6d 6963 2e72 6d77 3136  i32.atomic.rmw16
00015ca: 2e61 6464 5f75                           .add_u  ; export name
00015d0: 00                                        ; export kind
00015d1: db02                                      ; export func index
00015d3: 15                                        ; string length
00015d4: 6936 342e 6174 6f6d 6963 2e72 6d77 382e  i64.atomic.rmw8.
00015e4: 6164 645f 75                             add_u  ; export name
00015e9: 00                                        ; export kind
00015ea: dc02                                      ; export func index
00015ec: 16                                        ; string length
00015ed: 6936 342e 6174 6f6d 6963 2e72 6d77 3136  i64.atomic.rmw16
00015fd: 2e61 6464 5f75                           .add_u  ; export name
0001603: 00                                        ; export kind
0001604: dd02                                      ; export func index
0001606: 16                                        ; string length
0001607: 6936 342e 6174 6f6d 6963 2e72 6d77 3332  i64.atomic.rmw32
0001617: 2e61 6464 5f75                           .add_u  ; export name
000161d: 00                                        ; export kind
000161e: de02                                      ; export func index
0001620: 12                                        ; string length
0001621: 6933 322e 6174 6f6d 6963 2e72 6d77 2e73  i32.atomic.rmw.s
0001631: 7562                                     ub  ; export name
0001633: 00                                        ; export kind
0001634: df02                                      ; export func index
0001636: 12                                        ; string length
0001637: 6936 342e 6174 6f6d 6963 2e72 6d77 2e73  i64.atomic.rmw.s
0001647: 7562                                     ub  ; export name
0001649: 00                                        ; export kind
000164a: e002                                      ; export func index
000164c: 15                                        ; string length
000164d: 6933 322e 6174 6f6d 6963 2e72 6d77 382e  i32.atomic.rmw8.
000165d: 7375 625f 75                             sub_u  ; export name
0001662: 00                                        ; export kind
0001663: e102                                      ; export func index
0001665: 16                                        ; string length
0001666: 6933 322e 6174 6f6d 6963 2e72 6d77 3136  i32.atomic.rmw16
0001676: 2e73 7562 5f75                           .sub_u  ; export name
000167c: 00                                        ; export kind
000167d: e202                                      ; export func index
000167f: 15                                        ; string length
0001680: 6936 342e 6174 6f6d 6963 2e72 6d77 382e  i64.atomic.rmw8.
0001690: 7375 625f 75                             sub_u  ; export name
0001695: 00                                        ; export kind
0001696: e302                                      ; export func index
0001698: 16                                        ; string length
0001699: 6936 342e 6174 6f6d 6963 2e72 6d77 3136  i64.atomic.rmw16
00016a9: 2e73 7562 5f75                           .sub_u  ; export name
00016af: 00                                        ; export kind
00016b0: e402                                      ; export func index
00016b2: 16                                        ; string length
00016b3: 6936 342e 6174 6f6d 6963 2e72 6d77 3332  i64.atomic.rmw32
00016c3: 2e73 7562 5f75                           .sub_u  ; export name
00016c9: 00                                        ; export kind
00016ca: e502                                      ; export func index
00016cc: 12                                        ; string length
00016cd: 6933 322e 6174 6f6d 6963 2e72 6d77 2e61  i32.atomic.rmw.a
00016dd: 6e64                                     nd  ; export name
00016df: 00                                        ; export kind
00016e0: e602                                      ; export func index
00016e2: 12                                        ; string length
00016e3: 6936 342e 6174 6f6d 6963 2e72 6d77 2e61  i64.atomic.rmw.a
00016f3: 6e64                                     nd  ; export name
00016f5: 00                                        ; export kind
00016f6: e702                                      ; export func index
00016f8: 15                                        ; string length
00016f9: 6933 322e 6174 6f6d 6963 2e72 6d77 382e  i32.atomic.rmw8.
0001709: 616e 645f 75                             and_u  ; export name
000170e: 00                                        ; export kind
000170f: e802                                      ; export func index
0001711: 16                                        ; string length
0001712: 6933 322e 6174 6f6d 6963 2e72 6d77 3136  i32.atomic.rmw16
0001722: 2e61 6e64 5f75                           .and_u  ; export name
0001728: 00                                        ; export kind
0001729: e902                                      ; export func index
000172b: 15                                        ; string length
000172c: 6936 342e 6174 6f6d 6963 2e72 6d77 382e  i64.atomic.rmw8.
000173c: 616e 645f 75                             and_u  ; export name
0001741: 00                                        ; export kind
0001742: ea02                                      ; export func index
0001744: 16                                        ; string length
0001745: 6936 342e 6174 6f6d 6963 2e72 6d77 3136  i64.atomic.rmw16
0001755: 2e61 6e64 5f75                           .and_u  ; export name
000175b: 00                                        ; export kind
000175c: eb02                                      ; export func index
000175e: 16                                        ; string length
000175f: 6936 342e 6174 6f6d 6963 2e72 6d77 3332  i64.atomic.rmw32
000176f: 2e61 6e64 5f75                           .and_u  ; export name
0001775: 00                                        ; export kind
0001776: ec02                                      ; export func index
0001778: 11                                        ; string length
0001779: 6933 322e 6174 6f6d 6963 2e72 6d77 2e6f  i32.atomic.rmw.o
0001789: 72                                       r  ; export name
000178a: 00                                        ; export kind
000178b: ed02                                      ; export func index
000178d: 11                                        ; string length
000178e: 6936 342e 6174 6f6d 6963 2e72 6d77 2e6f  i64.atomic.rmw.o
000179e: 72                                       r  ; export name
000179f: 00                                        ; export kind
00017a0: ee02                                      ; export func index
00017a2: 14                                        ; string length
00017a3: 6933 322e 6174 6f6d 6963 2e72 6d77 382e  i32.atomic.rmw8.
00017b3: 6f72 5f75                                or_u  ; export name
00017b7: 00                                        ; export kind
00017b8: ef02                                      ; export func index
00017ba: 15                                        ; string length
00017bb: 6933 322e 6174 6f6d 6963 2e72 6d77 3136  i32.atomic.rmw16
00017cb: 2e6f 725f 75                             .or_u  ; export name
00017d0: 00                                        ; export kind
00017d1: f002                                      ; export func index
00017d3: 14                                        ; string length
00017d4: 6936 342e 6174 6f6d 6963 2e72 6d77 382e  i64.atomic.rmw8.
00017e4: 6f72 5f75                                or_u  ; export name
00017e8: 00                                        ; export kind
00017e9: f102                                      ; export func index
00017eb: 15                                        ; string length
00017ec: 6936 342e 6174 6f6d 6963 2e72 6d77 3136  i64.atomic.rmw16
00017fc: 2e6f 725f 75                             .or_u  ; export name
0001801: 00                                        ; export kind
0001802: f202                                      ; export func index
0001804: 15                                        ; string length
0001805: 6936 342e 6174 6f6d 6963 2e72 6d77 3332  i64.atomic.rmw32
0001815: 2e6f 725f 75                             .or_u  ; export name
000181a: 00                                        ; export kind
000181b: f302                                      ; export func index
000181d: 12                                        ; string length
000181e: 6933 322e 6174 6f6d 6963 2e72 6d77 2e78  i32.atomic.rmw.x
000182e: 6f72                                     or  ; export name
0001830: 00                                        ; export kind
0001831: f402                                      ; export func index
0001833: 12                                        ; string length
0001834: 6936 342e 6174 6f6d 6963 2e72 6d77 2e78  i64.atomic.rmw.x
0001844: 6f72                                     or  ; export name
0001846: 00                                        ; export kind
0001847: f502                                      ; export func index
0001849: 15                                        ; string length
000184a: 6933 322e 6174 6f6d 6963 2e72 6d77 382e  i32.atomic.rmw8.
000185a: 786f 725f 75                             xor_u  ; export name
000185f: 00                                        ; export kind
0001860: f602                                      ; export func index
0001862: 16                                        ; string length
0001863: 6933 322e 6174 6f6d 6963 2e72 6d77 3136  i32.atomic.rmw16
0001873: 2e78 6f72 5f75                           .xor_u  ; export name
0001879: 00                                        ; export kind
000187a: f702                                      ; export func index
000187c: 15                                        ; string length
000187d: 6936 342e 6174 6f6d 6963 2e72 6d77 382e  i64.atomic.rmw8.
000188d: 786f 725f 75                             xor_u  ; export name
0001892: 00                                        ; export kind
0001893: f802                                      ; export func index
0001895: 16                                        ; string length
0001896: 6936 342e 6174 6f6d 6963 2e72 6d77 3136  i64.atomic.rmw16
00018a6: 2e78 6f72 5f75                           .xor_u  ; export name
00018ac: 00                                        ; export kind
00018ad: f902                                      ; export func index
00018af: 16                                        ; string length
00018b0: 6936 342e 6174 6f6d 6963 2e72 6d77 3332  i64.atomic.rmw32
00018c0: 2e78 6f72 5f75                           .xor_u  ; export name
00018c6: 00                                        ; export kind
00018c7: fa02                                      ; export func index
00018c9: 13                                        ; string length
00018ca: 6933 322e 6174 6f6d 6963 2e72 6d77 2e78  i32.atomic.rmw.x
00018da: 6368 67                                  chg  ; export name
00018dd: 00                                        ; export kind
00018de: fb02                                      ; export func index
00018e0: 13                                        ; string length
00018e1: 6936 342e 6174 6f6d 6963 2e72 6d77 2e78  i64.atomic.rmw.x
00018f1: 6368 67                                  chg  ; export name
00018f4: 00                                        ; export kind
00018f5: fc02                                      ; export func index
00018f7: 16                                        ; string length
00018f8: 6933 322e 6174 6f6d 6963 2e72 6d77 382e  i32.atomic.rmw8.
0001908: 7863 6867 5f75                           xchg_u  ; export name
000190e: 00                                        ; export kind
000190f: fd02                                      ; export func index
0001911: 17                                        ; string length
0001912: 6933 322e 6174 6f6d 6963 2e72 6d77 3136  i32.atomic.rmw16
0001922: 2e78 6368 675f 75                        .xchg_u  ; export name
0001929: 00                                        ; export kind
000192a: fe02                                      ; export func index
000192c: 16                                        ; string length
000192d: 6936 342e 6174 6f6d 6963 2e72 6d77 382e  i64.atomic.rmw8.
000193d: 7863 6867 5f75                           xchg_u  ; export name
0001943: 00                                        ; export kind
0001944: ff02                                      ; export func index
0001946: 17                                        ; string length
0001947: 6936 342e 6174 6f6d 6963 2e72 6d77 3136  i64.atomic.rmw16
0001957: 2e78 6368 675f 75                        .xchg_u  ; export name
000195e: 00                                        ; export kind
000195f: 8003                                      ; export func index
0001961: 17                                        ; string length
0001962: 6936 342e 6174 6f6d 6963 2e72 6d77 3332  i64.atomic.rmw32
0001972: 2e78 6368 675f 75                        .xchg_u  ; export name
0001979: 00                                        ; export kind
000197a: 8103                                      ; export func index
000197c: 16                                        ; string length
000197d: 6933 322e 6174 6f6d 6963 2e72 6d77 2e63  i32.atomic.rmw.c
000198d: 6d70 7863 6867                           mpxchg  ; export name
0001993: 00                                        ; export kind
0001994: 8203                                      ; export func index
0001996: 16                                        ; string length
0001997: 6936 342e 6174 6f6d 6963 2e72 6d77 2e63  i64.atomic.rmw.c
00019a7: 6d70 7863 6867                           mpxchg  ; export name
00019ad: 00                                        ; export kind
00019ae: 8303                                      ; export func index
00019b0: 19                                        ; string length
00019b1: 6933 322e 6174 6f6d 6963 2e72 6d77 382e  i32.atomic.rmw8.
00019c1: 636d 7078 6368 675f 75                   cmpxchg_u  ; export name
00019ca: 00                                        ; export kind
00019cb: 8403                                      ; export func index
00019cd: 1a                                        ; string length
00019ce: 6933 322e 6174 6f6d 6963 2e72 6d77 3136  i32.atomic.rmw16
00019de: 2e63 6d70 7863 6867 5f75                 .cmpxchg_u  ; export name
00019e8: 00                                        ; export kind
00019e9: 8503                                      ; export func index
00019eb: 19                                        ; string length
00019ec: 6936 342e 6174 6f6d 6963 2e72 6d77 382e  i64.atomic.rmw8.
00019fc: 636d 7078 6368 675f 75                   cmpxchg_u  ; export name
0001a05: 00                                        ; export kind
0001a06: 8603                                      ; export func index
0001a08: 1a                                        ; string length
0001a09: 6936 342e 6174 6f6d 6963 2e72 6d77 3136  i64.atomic.rmw16
0001a19: 2e63 6d70 7863 6867 5f75                 .cmpxchg_u  ; export name
0001a23: 00                                        ; export kind
0001a24: 8703                                      ; export func index
0001a26: 1a                                        ; string length
0001a27: 6936 342e 6174 6f6d 6963 2e72 6d77 3332  i64.atomic.rmw32
0001a37: 2e63 6d70 7863 6867 5f75                 .cmpxchg_u  ; export name
0001a41: 00                                        ; export kind
0001a42: 8803                                      ; export func index
; move data: [1c6, 1a44) -> [1c7, 1a45)
00001c5: fe30                                      ; FIXUP section size
; section "Elem" (9)
0001a45: 09                                        ; section code
0001a46: 00                                        ; section size (guess)
0001a47: 01                                        ; num elem segments
; elem segment header 0
0001a48: 00                                      
0001a49: 41                                        ; i32.const
0001a4a: 00                                        ; i32 literal
0001a4b: 0b                                        ; end
0001a4c: 02                                        ; num function indices
0001a4d: 01                                        ; function index
0001a4e: 01                                        ; function index
0001a46: 08                                        ; FIXUP section size
; section "Code" (10)
0001a4f: 0a                                        ; section code
0001a50: 00                                        ; section size (guess)
0001a51: 8803                                      ; num functions
; function body 0
0001a53: 00                                        ; func body size (guess)
0001a54: 00                                        ; local decl count
0001a55: 0b                                        ; end
0001a53: 02                                        ; FIXUP func body size
; function body 1
0001a56: 00                                        ; func body size (guess)
0001a57: 00                                        ; local decl count
0001a58: 00                                        ; unreachable
0001a59: 0b                                        ; end
0001a56: 03                                        ; FIXUP func body size
; function body 2
0001a5a: 00                                        ; func body size (guess)
0001a5b: 00                                        ; local decl count
0001a5c: 0c                                        ; br
0001a5d: 00                                        ; break depth
0001a5e: 0b                                        ; end
0001a5a: 04                                        ; FIXUP func body size
; function body 3
0001a5f: 00                                        ; func body size (guess)
0001a60: 00                                        ; local decl count
0001a61: 41                                        ; i32.const
0001a62: 01                                        ; i32 literal
0001a63: 0e                                        ; br_table
0001a64: 00                                        ; num targets
0001a65: 00                                        ; break depth for default
0001a66: 0b                                        ; end
0001a5f: 07                                        ; FIXUP func body size
; function body 4
0001a67: 00                                        ; func body size (guess)
0001a68: 00                                        ; local decl count
0001a69: 0f                                        ; return
0001a6a: 0b                                        ; end
0001a67: 03                                        ; FIXUP func body size
; function body 5
0001a6b: 00                                        ; func body size (guess)
0001a6c: 00                                        ; local decl count
0001a6d: 10                                        ; call
0001a6e: 01                                        ; function index
0001a6f: 0b                                        ; end
0001a6b: 04                                        ; FIXUP func body size
; function body 6
0001a70: 00                                        ; func body size (guess)
0001a71: 00                                        ; local decl count
0001a72: 41                                        ; i32.const
0001a73: 01                                        ; i32 literal
0001a74: 11                                        ; call_indirect
0001a75: 00                                        ; signature index
0001a76: 00                                        ; call_indirect reserved
0001a77: 0b                                        ; end
0001a70: 07                                        ; FIXUP func body size
; function body 7
0001a78: 00                                        ; func body size (guess)
0001a79: 00                                        ; local decl count
0001a7a: 12                                        ; return_call
0001a7b: 01                                        ; function index
0001a7c: 0b                                        ; end
0001a78: 04                                        ; FIXUP func body size
; function body 8
0001a7d: 00                                        ; func body size (guess)
0001a7e: 00                                        ; local decl count
0001a7f: 41                                        ; i32.const
0001a80: 01                                        ; i32 literal
0001a81: 13                                        ; return_call_indirect
0001a82: 00                                        ; signature index
0001a83: 00                                        ; return_call_indirect reserved
0001a84: 0b                                        ; end
0001a7d: 07                                        ; FIXUP func body size
; function body 9
0001a85: 00                                        ; func body size (guess)
0001a86: 00                                        ; local decl count
0001a87: 41                                        ; i32.const
0001a88: 01                                        ; i32 literal
0001a89: 1a                                        ; drop
0001a8a: 0b                                        ; end
0001a85: 05                                        ; FIXUP func body size
; function body 10
0001a8b: 00                                        ; func body size (guess)
0001a8c: 00                                        ; local decl count
0001a8d: 41                                        ; i32.const
0001a8e: 01                                        ; i32 literal
0001a8f: 41                                        ; i32.const
0001a90: 02                                        ; i32 literal
0001a91: 41                                        ; i32.const
0001a92: 03                                        ; i32 literal
0001a93: 1b                                        ; select
0001a94: 1a                                        ; drop
0001a95: 0b                                        ; end
0001a8b: 0a                                        ; FIXUP func body size
; function body 11
0001a96: 00                                        ; func body size (guess)
0001a97: 01                                        ; local decl count
0001a98: 01                                        ; local type count
0001a99: 7f                                        ; i32
0001a9a: 20                                        ; local.get
0001a9b: 00                                        ; local index
0001a9c: 1a                                        ; drop
0001a9d: 0b                                        ; end
0001a96: 07                                        ; FIXUP func body size
; function body 12
0001a9e: 00                                        ; func body size (guess)
0001a9f: 01                                        ; local decl count
0001aa0: 01                                        ; local type count
0001aa1: 7f                                        ; i32
0001aa2: 41                                        ; i32.const
0001aa3: 01                                        ; i32 literal
0001aa4: 21                                        ; local.set
0001aa5: 00                                        ; local index
0001aa6: 0b                                        ; end
0001a9e: 08                                        ; FIXUP func body size
; function body 13
0001aa7: 00                                        ; func body size (guess)
0001aa8: 01                                        ; local decl count
0001aa9: 01                                        ; local type count
0001aaa: 7f                                        ; i32
0001aab: 41                                        ; i32.const
0001aac: 01                                        ; i32 literal
0001aad: 22                                        ; local.tee
0001aae: 00                                        ; local index
0001aaf: 1a                                        ; drop
0001ab0: 0b                                        ; end
0001aa7: 09                                        ; FIXUP func body size
; function body 14
0001ab1: 00                                        ; func body size (guess)
0001ab2: 00                                        ; local decl count
0001ab3: 23                                        ; global.get
0001ab4: 00                                        ; global index
0001ab5: 1a                                        ; drop
0001ab6: 0b                                        ; end
0001ab1: 05                                        ; FIXUP func body size
; function body 15
0001ab7: 00                                        ; func body size (guess)
0001ab8: 00                                        ; local decl count
0001ab9: 41                                        ; i32.const
0001aba: 01                                        ; i32 literal
0001abb: 24                                        ; global.set
0001abc: 00                                        ; global index
0001abd: 0b                                        ; end
0001ab7: 06                                        ; FIXUP func body size
; function body 16
0001abe: 00                                        ; func body size (guess)
0001abf: 00                                        ; local decl count
0001ac0: 41                                        ; i32.const
0001ac1: 01                                        ; i32 literal
0001ac2: 28                                        ; i32.load
0001ac3: 02                                        ; alignment
0001ac4: 02                                        ; load offset
0001ac5: 1a                                        ; drop
0001ac6: 0b                                        ; end
0001abe: 08                                        ; FIXUP func body size
; function body 17
0001ac7: 00                                        ; func body size (guess)
0001ac8: 00                                        ; local decl count
0001ac9: 41                                        ; i32.const
0001aca: 01                                        ; i32 literal
0001acb: 29                                        ; i64.load
0001acc: 03                                        ; alignment
0001acd: 02                                        ; load offset
0001ace: 1a                                        ; drop
0001acf: 0b                                        ; end
0001ac7: 08                                        ; FIXUP func body size
; function body 18
0001ad0: 00                                        ; func body size (guess)
0001ad1: 00                                        ; local decl count
0001ad2: 41                                        ; i32.const
0001ad3: 01                                        ; i32 literal
0001ad4: 2a                                        ; f32.load
0001ad5: 02                                        ; alignment
0001ad6: 02                                        ; load offset
0001ad7: 1a                                        ; drop
0001ad8: 0b                                        ; end
0001ad0: 08                                        ; FIXUP func body size
; function body 19
0001ad9: 00                                        ; func body size (guess)
0001ada: 00                                        ; local decl count
0001adb: 41                                        ; i32.const
0001adc: 01                                        ; i32 literal
0001add: 2b                                        ; f64.load
0001ade: 03                                        ; alignment
0001adf: 02                                        ; load offset
0001ae0: 1a                                        ; drop
0001ae1: 0b                                        ; end
0001ad9: 08                                        ; FIXUP func body size
; function body 20
0001ae2: 00                                        ; func body size (guess)
0001ae3: 00                                        ; local decl count
0001ae4: 41                                        ; i32.const
0001ae5: 01                                        ; i32 literal
0001ae6: 2c                                        ; i32.load8_s
0001ae7: 00                                        ; alignment
0001ae8: 02                                        ; load offset
0001ae9: 1a                                        ; drop
0001aea: 0b                                        ; end
0001ae2: 08                                        ; FIXUP func body size
; function body 21
0001aeb: 00                                        ; func body size (guess)
0001aec: 00                                        ; local decl count
0001aed: 41                                        ; i32.const
0001aee: 01                                        ; i32 literal
0001aef: 2d                                        ; i32.load8_u
0001af0: 00                                        ; alignment
0001af1: 02                                        ; load offset
0001af2: 1a                                        ; drop
0001af3: 0b                                        ; end
0001aeb: 08                                        ; FIXUP func body size
; function body 22
0001af4: 00                                        ; func body size (guess)
0001af5: 00                                        ; local decl count
0001af6: 41                                        ; i32.const
0001af7: 01                                        ; i32 literal
0001af8: 2e                                        ; i32.load16_s
0001af9: 01                                        ; alignment
0001afa: 02                                        ; load offset
0001afb: 1a                                        ; drop
0001afc: 0b                                        ; end
0001af4: 08                                        ; FIXUP func body size
; function body 23
0001afd: 00                                        ; func body size (guess)
0001afe: 00                                        ; local decl count
0001aff: 41                                        ; i32.const
0001b00: 01                                        ; i32 literal
0001b01: 2f                                        ; i32.load16_u
0001b02: 01                                        ; alignment
0001b03: 02                                        ; load offset
0001b04: 1a                                        ; drop
0001b05: 0b                                        ; end
0001afd: 08                                        ; FIXUP func body size
; function body 24
0001b06: 00                                        ; func body size (guess)
0001b07: 00                                        ; local decl count
0001b08: 41                                        ; i32.const
0001b09: 01                                        ; i32 literal
0001b0a: 30                                        ; i64.load8_s
0001b0b: 00                                        ; alignment
0001b0c: 02                                        ; load offset
0001b0d: 1a                                        ; drop
0001b0e: 0b                                        ; end
0001b06: 08                                        ; FIXUP func body size
; function body 25
0001b0f: 00                                        ; func body size (guess)
0001b10: 00                                        ; local decl count
0001b11: 41                                        ; i32.const
0001b12: 01                                        ; i32 literal
0001b13: 31                                        ; i64.load8_u
0001b14: 00                                        ; alignment
0001b15: 02                                        ; load offset
0001b16: 1a                                        ; drop
0001b17: 0b                                        ; end
0001b0f: 08                                        ; FIXUP func body size
; function body 26
0001b18: 00                                        ; func body size (guess)
0001b19: 00                                        ; local decl count
0001b1a: 41                                        ; i32.const
0001b1b: 01                                        ; i32 literal
0001b1c: 32                                        ; i64.load16_s
0001b1d: 01                                        ; alignment
0001b1e: 02                                        ; load offset
0001b1f: 1a                                        ; drop
0001b20: 0b                                        ; end
0001b18: 08                                        ; FIXUP func body size
; function body 27
0001b21: 00                                        ; func body size (guess)
0001b22: 00                                        ; local decl count
0001b23: 41                                        ; i32.const
0001b24: 01                                        ; i32 literal
0001b25: 33                                        ; i64.load16_u
0001b26: 01                                        ; alignment
0001b27: 02                                        ; load offset
0001b28: 1a                                        ; drop
0001b29: 0b                                        ; end
0001b21: 08                                        ; FIXUP func body size
; function body 28
0001b2a: 00                                        ; func body size (guess)
0001b2b: 00                                        ; local decl count
0001b2c: 41                                        ; i32.const
0001b2d: 01                                        ; i32 literal
0001b2e: 34                                        ; i64.load32_s
0001b2f: 02                                        ; alignment
0001b30: 02                                        ; load offset
0001b31: 1a                                        ; drop
0001b32: 0b                                        ; end
0001b2a: 08                                        ; FIXUP func body size
; function body 29
0001b33: 00                                        ; func body size (guess)
0001b34: 00                                        ; local decl count
0001b35: 41                                        ; i32.const
0001b36: 01                                        ; i32 literal
0001b37: 35                                        ; i64.load32_u
0001b38: 02                                        ; alignment
0001b39: 02                                        ; load offset
0001b3a: 1a                                        ; drop
0001b3b: 0b                                        ; end
0001b33: 08                                        ; FIXUP func body size
; function body 30
0001b3c: 00                                        ; func body size (guess)
0001b3d: 00                                        ; local decl count
0001b3e: 41                                        ; i32.const
0001b3f: 01                                        ; i32 literal
0001b40: 41                                        ; i32.const
0001b41: 02                                        ; i32 literal
0001b42: 36                                        ; i32.store
0001b43: 02                                        ; alignment
0001b44: 02                                        ; store offset
0001b45: 0b                                        ; end
0001b3c: 09                                        ; FIXUP func body size
; function body 31
0001b46: 00                                        ; func body size (guess)
0001b47: 00                                        ; local decl count
0001b48: 41                                        ; i32.const
0001b49: 01                                        ; i32 literal
0001b4a: 42                                        ; i64.const
0001b4b: 02                                        ; i64 literal
0001b4c: 37                                        ; i64.store
0001b4d: 03                                        ; alignment
0001b4e: 02                                        ; store offset
0001b4f: 0b                                        ; end
0001b46: 09                                        ; FIXUP func body size
; function body 32
0001b50: 00                                        ; func body size (guess)
0001b51: 00                                        ; local decl count
0001b52: 41                                        ; i32.const
0001b53: 01                                        ; i32 literal
0001b54: 43                                        ; f32.const
0001b55: 0000 0040                                 ; f32 literal
0001b59: 38                                        ; f32.store
0001b5a: 02                                        ; alignment
0001b5b: 02                                        ; store offset
0001b5c: 0b                                        ; end
0001b50: 0c                                        ; FIXUP func body size
; function body 33
0001b5d: 00                                        ; func body size (guess)
0001b5e: 00                                        ; local decl count
0001b5f: 41                                        ; i32.const
0001b60: 01                                        ; i32 literal
0001b61: 44                                        ; f64.const
0001b62: 0000 0000 0000 0040                       ; f64 literal
0001b6a: 39                                        ; f64.store
0001b6b: 03                                        ; alignment
0001b6c: 02                                        ; store offset
0001b6d: 0b                                        ; end
0001b5d: 10                                        ; FIXUP func body size
; function body 34
0001b6e: 00                                        ; func body size (guess)
0001b6f: 00                                        ; local decl count
0001b70: 41                                        ; i32.const
0001b71: 01                                        ; i32 literal
0001b72: 41                                        ; i32.const
0001b73: 02                                        ; i32 literal
0001b74: 3a                                        ; i32.store8
0001b75: 00                                        ; alignment
0001b76: 02                                        ; store offset
0001b77: 0b                                        ; end
0001b6e: 09                                        ; FIXUP func body size
; function body 35
0001b78: 00                                        ; func body size (guess)
0001b79: 00                                        ; local decl count
0001b7a: 41                                        ; i32.const
0001b7b: 01                                        ; i32 literal
0001b7c: 41                                        ; i32.const
0001b7d: 02                                        ; i32 literal
0001b7e: 3b                                        ; i32.store16
0001b7f: 01                                        ; alignment
0001b80: 02                                        ; store offset
0001b81: 0b                                        ; end
0001b78: 09                                        ; FIXUP func body size
; function body 36
0001b82: 00                                        ; func body size (guess)
0001b83: 00                                        ; local decl count
0001b84: 41                                        ; i32.const
0001b85: 01                                        ; i32 literal
0001b86: 42                                        ; i64.const
0001b87: 02                                        ; i64 literal
0001b88: 3c                                        ; i64.store8
0001b89: 00                                        ; alignment
0001b8a: 02                                        ; store offset
0001b8b: 0b                                        ; end
0001b82: 09                                        ; FIXUP func body size
; function body 37
0001b8c: 00                                        ; func body size (guess)
0001b8d: 00                                        ; local decl count
0001b8e: 41                                        ; i32.const
0001b8f: 01                                        ; i32 literal
0001b90: 42                                        ; i64.const
0001b91: 02                                        ; i64 literal
0001b92: 3d                                        ; i64.store16
0001b93: 01                                        ; alignment
0001b94: 02                                        ; store offset
0001b95: 0b                                        ; end
0001b8c: 09                                        ; FIXUP func body size
; function body 38
0001b96: 00                                        ; func body size (guess)
0001b97: 00                                        ; local decl count
0001b98: 41                                        ; i32.const
0001b99: 01                                        ; i32 literal
0001b9a: 42                                        ; i64.const
0001b9b: 02                                        ; i64 literal
0001b9c: 3e                                        ; i64.store32
0001b9d: 02                                        ; alignment
0001b9e: 02                                        ; store offset
0001b9f: 0b                                        ; end
0001b96: 09                                        ; FIXUP func body size
; function body 39
0001ba0: 00                                        ; func body size (guess)
0001ba1: 00                                        ; local decl count
0001ba2: 3f                                        ; memory.size
0001ba3: 00                                        ; memory.size reserved
0001ba4: 1a                                        ; drop
0001ba5: 0b                                        ; end
0001ba0: 05                                        ; FIXUP func body size
; function body 40
0001ba6: 00                                        ; func body size (guess)
0001ba7: 00                                        ; local decl count
0001ba8: 41                                        ; i32.const
0001ba9: 01                                        ; i32 literal
0001baa: 40                                        ; memory.grow
0001bab: 00                                        ; memory.grow reserved
0001bac: 1a                                        ; drop
0001bad: 0b                                        ; end
0001ba6: 07                                        ; FIXUP func body size
; function body 41
0001bae: 00                                        ; func body size (guess)
0001baf: 00                                        ; local decl count
0001bb0: 41                                        ; i32.const
0001bb1: 01                                        ; i32 literal
0001bb2: 1a                                        ; drop
0001bb3: 0b                                        ; end
0001bae: 05                                        ; FIXUP func body size
; function body 42
0001bb4: 00                                        ; func body size (guess)
0001bb5: 00                                        ; local decl count
0001bb6: 42                                        ; i64.const
0001bb7: 01                                        ; i64 literal
0001bb8: 1a                                        ; drop
0001bb9: 0b                                        ; end
0001bb4: 05                                        ; FIXUP func body size
; function body 43
0001bba: 00                                        ; func body size (guess)
0001bbb: 00                                        ; local decl count
0001bbc: 43                                        ; f32.const
0001bbd: 0000 803f                                 ; f32 literal
0001bc1: 1a                                        ; drop
0001bc2: 0b                                        ; end
0001bba: 08                                        ; FIXUP func body size
; function body 44
0001bc3: 00                                        ; func body size (guess)
0001bc4: 00                                        ; local decl count
0001bc5: 44                                        ; f64.const
0001bc6: 0000 0000 0000 f03f                       ; f64 literal
0001bce: 1a                                        ; drop
0001bcf: 0b                                        ; end
0001bc3: 0c                                        ; FIXUP func body size
; function body 45
0001bd0: 00                                        ; func body size (guess)
0001bd1: 00                                        ; local decl count
0001bd2: 41                                        ; i32.const
0001bd3: 01                                        ; i32 literal
0001bd4: 45                                        ; i32.eqz
0001bd5: 1a                                        ; drop
0001bd6: 0b                                        ; end
0001bd0: 06                                        ; FIXUP func body size
; function body 46
0001bd7: 00                                        ; func body size (guess)
0001bd8: 00                                        ; local decl count
0001bd9: 41                                        ; i32.const
0001bda: 01                                        ; i32 literal
0001bdb: 41                                        ; i32.const
0001bdc: 02                                        ; i32 literal
0001bdd: 46                                        ; i32.eq
0001bde: 1a                                        ; drop
0001bdf: 0b                                        ; end
0001bd7: 08                                        ; FIXUP func body size
; function body 47
0001be0: 00                                        ; func body size (guess)
0001be1: 00                                        ; local decl count
0001be2: 41                                        ; i32.const
0001be3: 01                                        ; i32 literal
0001be4: 41                                        ; i32.const
0001be5: 02                                        ; i32 literal
0001be6: 47                                        ; i32.ne
0001be7: 1a                                        ; drop
0001be8: 0b                                        ; end
0001be0: 08                                        ; FIXUP func body size
; function body 48
0001be9: 00                                        ; func body size (guess)
0001bea: 00                                        ; local decl count
0001beb: 41                                        ; i32.const
0001bec: 01                                        ; i32 literal
0001bed: 41                                        ; i32.const
0001bee: 02                                        ; i32 literal
0001bef: 48                                        ; i32.lt_s
0001bf0: 1a                                        ; drop
0001bf1: 0b                                        ; end
0001be9: 08                                        ; FIXUP func body size
; function body 49
0001bf2: 00                                        ; func body size (guess)
0001bf3: 00                                        ; local decl count
0001bf4: 41                                        ; i32.const
0001bf5: 01                                        ; i32 literal
0001bf6: 41                                        ; i32.const
0001bf7: 02                                        ; i32 literal
0001bf8: 49                                        ; i32.lt_u
0001bf9: 1a                                        ; drop
0001bfa: 0b                                        ; end
0001bf2: 08                                        ; FIXUP func body size
; function body 50
0001bfb: 00                                        ; func body size (guess)
0001bfc: 00                                        ; local decl count
0001bfd: 41                                        ; i32.const
0001bfe: 01                                        ; i32 literal
0001bff: 41                                        ; i32.const
0001c00: 02                                        ; i32 literal
0001c01: 4a                                        ; i32.gt_s
0001c02: 1a                                        ; drop
0001c03: 0b                                        ; end
0001bfb: 08                                        ; FIXUP func body size
; function body 51
0001c04: 00                                        ; func body size (guess)
0001c05: 00                                        ; local decl count
0001c06: 41                                        ; i32.const
0001c07: 01                                        ; i32 literal
0001c08: 41                                        ; i32.const
0001c09: 02                                        ; i32 literal
0001c0a: 4b                                        ; i32.gt_u
0001c0b: 1a                                        ; drop
0001c0c: 0b                                        ; end
0001c04: 08                                        ; FIXUP func body size
; function body 52
0001c0d: 00                                        ; func body size (guess)
0001c0e: 00                                        ; local decl count
0001c0f: 41                                        ; i32.const
0001c10: 01                                        ; i32 literal
0001c11: 41                                        ; i32.const
0001c12: 02                                        ; i32 literal
0001c13: 4c                                        ; i32.le_s
0001c14: 1a                                        ; drop
0001c15: 0b                                        ; end
0001c0d: 08                                        ; FIXUP func body size
; function body 53
0001c16: 00                                        ; func body size (guess)
0001c17: 00                                        ; local decl count
0001c18: 41                                        ; i32.const
0001c19: 01                                        ; i32 literal
0001c1a: 41                                        ; i32.const
0001c1b: 02                                        ; i32 literal
0001c1c: 4d                                        ; i32.le_u
0001c1d: 1a                                        ; drop
0001c1e: 0b                                        ; end
0001c16: 08                                        ; FIXUP func body size
; function body 54
0001c1f: 00                                        ; func body size (guess)
0001c20: 00                                        ; local decl count
0001c21: 41                                        ; i32.const
0001c22: 01                                        ; i32 literal
0001c23: 41                                        ; i32.const
0001c24: 02                                        ; i32 literal
0001c25: 4e                                        ; i32.ge_s
0001c26: 1a                                        ; drop
0001c27: 0b                                        ; end
0001c1f: 08                                        ; FIXUP func body size
; function body 55
0001c28: 00                                        ; func body size (guess)
0001c29: 00                                        ; local decl count
0001c2a: 41                                        ; i32.const
0001c2b: 01                                        ; i32 literal
0001c2c: 41                                        ; i32.const
0001c2d: 02                                        ; i32 literal
0001c2e: 4f                                        ; i32.ge_u
0001c2f: 1a                                        ; drop
0001c30: 0b                                        ; end
0001c28: 08                                        ; FIXUP func body size
; function body 56
0001c31: 00                                        ; func body size (guess)
0001c32: 00                                        ; local decl count
0001c33: 42                                        ; i64.const
0001c34: 01                                        ; i64 literal
0001c35: 50                                        ; i64.eqz
0001c36: 1a                                        ; drop
0001c37: 0b                                        ; end
0001c31: 06                                        ; FIXUP func body size
; function body 57
0001c38: 00                                        ; func body size (guess)
0001c39: 00                                        ; local decl count
0001c3a: 42                                        ; i64.const
0001c3b: 01                                        ; i64 literal
0001c3c: 42                                        ; i64.const
0001c3d: 02                                        ; i64 literal
0001c3e: 51                                        ; i64.eq
0001c3f: 1a                                        ; drop
0001c40: 0b                                        ; end
0001c38: 08                                        ; FIXUP func body size
; function body 58
0001c41: 00                                        ; func body size (guess)
0001c42: 00                                        ; local decl count
0001c43: 42                                        ; i64.const
0001c44: 01                                        ; i64 literal
0001c45: 42                                        ; i64.const
0001c46: 02                                        ; i64 literal
0001c47: 52                                        ; i64.ne
0001c48: 1a                                        ; drop
0001c49: 0b                                        ; end
0001c41: 08                                        ; FIXUP func body size
; function body 59
0001c4a: 00                                        ; func body size (guess)
0001c4b: 00                                        ; local decl count
0001c4c: 42                                        ; i64.const
0001c4d: 01                                        ; i64 literal
0001c4e: 42                                        ; i64.const
0001c4f: 02                                        ; i64 literal
0001c50: 53                                        ; i64.lt_s
0001c51: 1a                                        ; drop
0001c52: 0b                                        ; end
0001c4a: 08                                        ; FIXUP func body size
; function body 60
0001c53: 00                                        ; func body size (guess)
0001c54: 00                                        ; local decl count
0001c55: 42                                        ; i64.const
0001c56: 01                                        ; i64 literal
0001c57: 42                                        ; i64.const
0001c58: 02                                        ; i64 literal
0001c59: 54                                        ; i64.lt_u
0001c5a: 1a                                        ; drop
0001c5b: 0b                                        ; end
0001c53: 08                                        ; FIXUP func body size
; function body 61
0001c5c: 00                                        ; func body size (guess)
0001c5d: 00                                        ; local decl count
0001c5e: 42                                        ; i64.const
0001c5f: 01                                        ; i64 literal
0001c60: 42                                        ; i64.const
0001c61: 02                                        ; i64 literal
0001c62: 55                                        ; i64.gt_s
0001c63: 1a                                        ; drop
0001c64: 0b                                        ; end
0001c5c: 08                                        ; FIXUP func body size
; function body 62
0001c65: 00                                        ; func body size (guess)
0001c66: 00                                        ; local decl count
0001c67: 42                                        ; i64.const
0001c68: 01                                        ; i64 literal
0001c69: 42                                        ; i64.const
0001c6a: 02                                        ; i64 literal
0001c6b: 56                                        ; i64.gt_u
0001c6c: 1a                                        ; drop
0001c6d: 0b                                        ; end
0001c65: 08                                        ; FIXUP func body size
; function body 63
0001c6e: 00                                        ; func body size (guess)
0001c6f: 00                                        ; local decl count
0001c70: 42                                        ; i64.const
0001c71: 01                                        ; i64 literal
0001c72: 42                                        ; i64.const
0001c73: 02                                        ; i64 literal
0001c74: 57                                        ; i64.le_s
0001c75: 1a                                        ; drop
0001c76: 0b                                        ; end
0001c6e: 08                                        ; FIXUP func body size
; function body 64
0001c77: 00                                        ; func body size (guess)
0001c78: 00                                        ; local decl count
0001c79: 42                                        ; i64.const
0001c7a: 01                                        ; i64 literal
0001c7b: 42                                        ; i64.const
0001c7c: 02                                        ; i64 literal
0001c7d: 58                                        ; i64.le_u
0001c7e: 1a                                        ; drop
0001c7f: 0b                                        ; end
0001c77: 08                                        ; FIXUP func body size
; function body 65
0001c80: 00                                        ; func body size (guess)
0001c81: 00                                        ; local decl count
0001c82: 42                                        ; i64.const
0001c83: 01                                        ; i64 literal
0001c84: 42                                        ; i64.const
0001c85: 02                                        ; i64 literal
0001c86: 59                                        ; i64.ge_s
0001c87: 1a                                        ; drop
0001c88: 0b                                        ; end
0001c80: 08                                        ; FIXUP func body size
; function body 66
0001c89: 00                                        ; func body size (guess)
0001c8a: 00                                        ; local decl count
0001c8b: 42                                        ; i64.const
0001c8c: 01                                        ; i64 literal
0001c8d: 42                                        ; i64.const
0001c8e: 02                                        ; i64 literal
0001c8f: 5a                                        ; i64.ge_u
0001c90: 1a                                        ; drop
0001c91: 0b                                        ; end
0001c89: 08                                        ; FIXUP func body size
; function body 67
0001c92: 00                                        ; func body size (guess)
0001c93: 00                                        ; local decl count
0001c94: 43                                        ; f32.const
0001c95: 0000 803f                                 ; f32 literal
0001c99: 43                                        ; f32.const
0001c9a: 0000 0040                                 ; f32 literal
0001c9e: 5b                                        ; f32.eq
0001c9f: 1a                                        ; drop
0001ca0: 0b                                        ; end
0001c92: 0e                                        ; FIXUP func body size
; function body 68
0001ca1: 00                                        ; func body size (guess)
0001ca2: 00                                        ; local decl count
0001ca3: 43                                        ; f32.const
0001ca4: 0000 803f                                 ; f32 literal
0001ca8: 43                                        ; f32.const
0001ca9: 0000 0040                                 ; f32 literal
0001cad: 5c                                        ; f32.ne
0001cae: 1a                                        ; drop
0001caf: 0b                                        ; end
0001ca1: 0e                                        ; FIXUP func body size
; function body 69
0001cb0: 00                                        ; func body size (guess)
0001cb1: 00                                        ; local decl count
0001cb2: 43                                        ; f32.const
0001cb3: 0000 803f                                 ; f32 literal
0001cb7: 43                                        ; f32.const
0001cb8: 0000 0040                                 ; f32 literal
0001cbc: 5d                                        ; f32.lt
0001cbd: 1a                                        ; drop
0001cbe: 0b                                        ; end
0001cb0: 0e                                        ; FIXUP func body size
; function body 70
0001cbf: 00                                        ; func body size (guess)
0001cc0: 00                                        ; local decl count
0001cc1: 43                                        ; f32.const
0001cc2: 0000 803f                                 ; f32 literal
0001cc6: 43                                        ; f32.const
0001cc7: 0000 0040                                 ; f32 literal
0001ccb: 5e                                        ; f32.gt
0001ccc: 1a                                        ; drop
0001ccd: 0b                                        ; end
0001cbf: 0e                                        ; FIXUP func body size
; function body 71
0001cce: 00                                        ; func body size (guess)
0001ccf: 00                                        ; local decl count
0001cd0: 43                                        ; f32.const
0001cd1: 0000 803f                                 ; f32 literal
0001cd5: 43                                        ; f32.const
0001cd6: 0000 0040                                 ; f32 literal
0001cda: 5f                                        ; f32.le
0001cdb: 1a                                        ; drop
0001cdc: 0b                                        ; end
0001cce: 0e                                        ; FIXUP func body size
; function body 72
0001cdd: 00                                        ; func body size (guess)
0001cde: 00                                        ; local decl count
0001cdf: 43                                        ; f32.const
0001ce0: 0000 803f                                 ; f32 literal
0001ce4: 43                                        ; f32.const
0001ce5: 0000 0040                                 ; f32 literal
0001ce9: 60                                        ; f32.ge
0001cea: 1a                                        ; drop
0001ceb: 0b                                        ; end
0001cdd: 0e                                        ; FIXUP func body size
; function body 73
0001cec: 00                                        ; func body size (guess)
0001ced: 00                                        ; local decl count
0001cee: 44                                        ; f64.const
0001cef: 0000 0000 0000 f03f                       ; f64 literal
0001cf7: 44                                        ; f64.const
0001cf8: 0000 0000 0000 0040                       ; f64 literal
0001d00: 61                                        ; f64.eq
0001d01: 1a                                        ; drop
0001d02: 0b                                        ; end
0001cec: 16                                        ; FIXUP func body size
; function body 74
0001d03: 00                                        ; func body size (guess)
0001d04: 00                                        ; local decl count
0001d05: 44                                        ; f64.const
0001d06: 0000 0000 0000 f03f                       ; f64 literal
0001d0e: 44                                        ; f64.const
0001d0f: 0000 0000 0000 0040                       ; f64 literal
0001d17: 62                                        ; f64.ne
0001d18: 1a                                        ; drop
0001d19: 0b                                        ; end
0001d03: 16                                        ; FIXUP func body size
; function body 75
0001d1a: 00                                        ; func body size (guess)
0001d1b: 00                                        ; local decl count
0001d1c: 44                                        ; f64.const
0001d1d: 0000 0000 0000 f03f                       ; f64 literal
0001d25: 44                                        ; f64.const
0001d26: 0000 0000 0000 0040                       ; f64 literal
0001d2e: 63                                        ; f64.lt
0001d2f: 1a                                        ; drop
0001d30: 0b                                        ; end
0001d1a: 16                                        ; FIXUP func body size
; function body 76
0001d31: 00                                        ; func body size (guess)
0001d32: 00                                        ; local decl count
0001d33: 44                                        ; f64.const
0001d34: 0000 0000 0000 f03f                       ; f64 literal
0001d3c: 44                                        ; f64.const
0001d3d: 0000 0000 0000 0040                       ; f64 literal
0001d45: 64                                        ; f64.gt
0001d46: 1a                                        ; drop
0001d47: 0b                                        ; end
0001d31: 16                                        ; FIXUP func body size
; function body 77
0001d48: 00                                        ; func body size (guess)
0001d49: 00                                        ; local decl count
0001d4a: 44                                        ; f64.const
0001d4b: 0000 0000 0000 f03f                       ; f64 literal
0001d53: 44                                        ; f64.const
0001d54: 0000 0000 0000 0040                       ; f64 literal
0001d5c: 65                                        ; f64.le
0001d5d: 1a                                        ; drop
0001d5e: 0b                                        ; end
0001d48: 16                                        ; FIXUP func body size
; function body 78
0001d5f: 00                                        ; func body size (guess)
0001d60: 00                                        ; local decl count
0001d61: 44                                        ; f64.const
0001d62: 0000 0000 0000 f03f                       ; f64 literal
0001d6a: 44                                        ; f64.const
0001d6b: 0000 0000 0000 0040                       ; f64 literal
0001d73: 66                                        ; f64.ge
0001d74: 1a                                        ; drop
0001d75: 0b                                        ; end
0001d5f: 16                                        ; FIXUP func body size
; function body 79
0001d76: 00                                        ; func body size (guess)
0001d77: 00                                        ; local decl count
0001d78: 41                                        ; i32.const
0001d79: 01                                        ; i32 literal
0001d7a: 67                                        ; i32.clz
0001d7b: 1a                                        ; drop
0001d7c: 0b                                        ; end
0001d76: 06                                        ; FIXUP func body size
; function body 80
0001d7d: 00                                        ; func body size (guess)
0001d7e: 00                                        ; local decl count
0001d7f: 41                                        ; i32.const
0001d80: 01                                        ; i32 literal
0001d81: 68                                        ; i32.ctz
0001d82: 1a                                        ; drop
0001d83: 0b                                        ; end
0001d7d: 06                                        ; FIXUP func body size
; function body 81
0001d84: 00                                        ; func body size (guess)
0001d85: 00                                        ; local decl count
0001d86: 41                                        ; i32.const
0001d87: 01                                        ; i32 literal
0001d88: 69                                        ; i32.popcnt
0001d89: 1a                                        ; drop
0001d8a: 0b                                        ; end
0001d84: 06                                        ; FIXUP func body size
; function body 82
0001d8b: 00                                        ; func body size (guess)
0001d8c: 00                                        ; local decl count
0001d8d: 41                                        ; i32.const
0001d8e: 01                                        ; i32 literal
0001d8f: 41                                        ; i32.const
0001d90: 02                                        ; i32 literal
0001d91: 6a                                        ; i32.add
0001d92: 1a                                        ; drop
0001d93: 0b                                        ; end
0001d8b: 08                                        ; FIXUP func body size
; function body 83
0001d94: 00                                        ; func body size (guess)
0001d95: 00                                        ; local decl count
0001d96: 41                                        ; i32.const
0001d97: 01                                        ; i32 literal
0001d98: 41                                        ; i32.const
0001d99: 02                                        ; i32 literal
0001d9a: 6b                                        ; i32.sub
0001d9b: 1a                                        ; drop
0001d9c: 0b                                        ; end
0001d94: 08                                        ; FIXUP func body size
; function body 84
0001d9d: 00                                        ; func body size (guess)
0001d9e: 00                                        ; local decl count
0001d9f: 41                                        ; i32.const
0001da0: 01                                        ; i32 literal
0001da1: 41                                        ; i32.const
0001da2: 02                                        ; i32 literal
0001da3: 6c                                        ; i32.mul
0001da4: 1a                                        ; drop
0001da5: 0b                                        ; end
0001d9d: 08                                        ; FIXUP func body size
; function body 85
0001da6: 00                                        ; func body size (guess)
0001da7: 00                                        ; local decl count
0001da8: 41                                        ; i32.const
0001da9: 01                                        ; i32 literal
0001daa: 41                                        ; i32.const
0001dab: 02                                        ; i32 literal
0001dac: 6d                                        ; i32.div_s
0001dad: 1a                                        ; drop
0001dae: 0b                                        ; end
0001da6: 08                                        ; FIXUP func body size
; function body 86
0001daf: 00                                        ; func body size (guess)
0001db0: 00                                        ; local decl count
0001db1: 41                                        ; i32.const
0001db2: 01                                        ; i32 literal
0001db3: 41                                        ; i32.const
0001db4: 02                                        ; i32 literal
0001db5: 6e                                        ; i32.div_u
0001db6: 1a                                        ; drop
0001db7: 0b                                        ; end
0001daf: 08                                        ; FIXUP func body size
; function body 87
0001db8: 00                                        ; func body size (guess)
0001db9: 00                                        ; local decl count
0001dba: 41                                        ; i32.const
0001dbb: 01                                        ; i32 literal
0001dbc: 41                                        ; i32.const
0001dbd: 02                                        ; i32 literal
0001dbe: 6f                                        ; i32.rem_s
0001dbf: 1a                                        ; drop
0001dc0: 0b                                        ; end
0001db8: 08                                        ; FIXUP func body size
; function body 88
0001dc1: 00                                        ; func body size (guess)
0001dc2: 00                                        ; local decl count
0001dc3: 41                                        ; i32.const
0001dc4: 01                                        ; i32 literal
0001dc5: 41                                        ; i32.const
0001dc6: 02                                        ; i32 literal
0001dc7: 70                                        ; i32.rem_u
0001dc8: 1a                                        ; drop
0001dc9: 0b                                        ; end
0001dc1: 08                                        ; FIXUP func body size
; function body 89
0001dca: 00                                        ; func body size (guess)
0001dcb: 00                                        ; local decl count
0001dcc: 41                                        ; i32.const
0001dcd: 01                                        ; i32 literal
0001dce: 41                                        ; i32.const
0001dcf: 02                                        ; i32 literal
0001dd0: 71                                        ; i32.and
0001dd1: 1a                                        ; drop
0001dd2: 0b                                        ; end
0001dca: 08                                        ; FIXUP func body size
; function body 90
0001dd3: 00                                        ; func body size (guess)
0001dd4: 00                                        ; local decl count
0001dd5: 41                                        ; i32.const
0001dd6: 01                                        ; i32 literal
0001dd7: 41                                        ; i32.const
0001dd8: 02                                        ; i32 literal
0001dd9: 72                                        ; i32.or
0001dda: 1a                                        ; drop
0001ddb: 0b                                        ; end
0001dd3: 08                                        ; FIXUP func body size
; function body 91
0001ddc: 00                                        ; func body size (guess)
0001ddd: 00                                        ; local decl count
0001dde: 41                                        ; i32.const
0001ddf: 01                                        ; i32 literal
0001de0: 41                                        ; i32.const
0001de1: 02                                        ; i32 literal
0001de2: 73                                        ; i32.xor
0001de3: 1a                                        ; drop
0001de4: 0b                                        ; end
0001ddc: 08                                        ; FIXUP func body size
; function body 92
0001de5: 00                                        ; func body size (guess)
0001de6: 00                                        ; local decl count
0001de7: 41                                        ; i32.const
0001de8: 01                                        ; i32 literal
0001de9: 41                                        ; i32.const
0001dea: 02                                        ; i32 literal
0001deb: 74                                        ; i32.shl
0001dec: 1a                                        ; drop
0001ded: 0b                                        ; end
0001de5: 08                                        ; FIXUP func body size
; function body 93
0001dee: 00                                        ; func body size (guess)
0001def: 00                                        ; local decl count
0001df0: 41                                        ; i32.const
0001df1: 01                                        ; i32 literal
0001df2: 41                                        ; i32.const
0001df3: 02                                        ; i32 literal
0001df4: 75                                        ; i32.shr_s
0001df5: 1a                                        ; drop
0001df6: 0b                                        ; end
0001dee: 08                                        ; FIXUP func body size
; function body 94
0001df7: 00                                        ; func body size (guess)
0001df8: 00                                        ; local decl count
0001df9: 41                                        ; i32.const
0001dfa: 01                                        ; i32 literal
0001dfb: 41                                        ; i32.const
0001dfc: 02                                        ; i32 literal
0001dfd: 76                                        ; i32.shr_u
0001dfe: 1a                                        ; drop
0001dff: 0b                                        ; end
0001df7: 08                                        ; FIXUP func body size
; function body 95
0001e00: 00                                        ; func body size (guess)
0001e01: 00                                        ; local decl count
0001e02: 41                                        ; i32.const
0001e03: 01                                        ; i32 literal
0001e04: 41                                        ; i32.const
0001e05: 02                                        ; i32 literal
0001e06: 77                                        ; i32.rotl
0001e07: 1a                                        ; drop
0001e08: 0b                                        ; end
0001e00: 08                                        ; FIXUP func body size
; function body 96
0001e09: 00                                        ; func body size (guess)
0001e0a: 00                                        ; local decl count
0001e0b: 41                                        ; i32.const
0001e0c: 01                                        ; i32 literal
0001e0d: 41                                        ; i32.const
0001e0e: 02                                        ; i32 literal
0001e0f: 78                                        ; i32.rotr
0001e10: 1a                                        ; drop
0001e11: 0b                                        ; end
0001e09: 08                                        ; FIXUP func body size
; function body 97
0001e12: 00                                        ; func body size (guess)
0001e13: 00                                        ; local decl count
0001e14: 42                                        ; i64.const
0001e15: 01                                        ; i64 literal
0001e16: 79                                        ; i64.clz
0001e17: 1a                                        ; drop
0001e18: 0b                                        ; end
0001e12: 06                                        ; FIXUP func body size
; function body 98
0001e19: 00                                        ; func body size (guess)
0001e1a: 00                                        ; local decl count
0001e1b: 42                                        ; i64.const
0001e1c: 01                                        ; i64 literal
0001e1d: 7a                                        ; i64.ctz
0001e1e: 1a                                        ; drop
0001e1f: 0b                                        ; end
0001e19: 06                                        ; FIXUP func body size
; function body 99
0001e20: 00                                        ; func body size (guess)
0001e21: 00                                        ; local decl count
0001e22: 42                                        ; i64.const
0001e23: 01                                        ; i64 literal
0001e24: 7b                                        ; i64.popcnt
0001e25: 1a                                        ; drop
0001e26: 0b                                        ; end
0001e20: 06                                        ; FIXUP func body size
; function body 100
0001e27: 00                                        ; func body size (guess)
0001e28: 00                                        ; local decl count
0001e29: 42                                        ; i64.const
0001e2a: 01                                        ; i64 literal
0001e2b: 42                                        ; i64.const
0001e2c: 02                                        ; i64 literal
0001e2d: 7c                                        ; i64.add
0001e2e: 1a                                        ; drop
0001e2f: 0b                                        ; end
0001e27: 08                                        ; FIXUP func body size
; function body 101
0001e30: 00                                        ; func body size (guess)
0001e31: 00                                        ; local decl count
0001e32: 42                                        ; i64.const
0001e33: 01                                        ; i64 literal
0001e34: 42                                        ; i64.const
0001e35: 02                                        ; i64 literal
0001e36: 7d                                        ; i64.sub
0001e37: 1a                                        ; drop
0001e38: 0b                                        ; end
0001e30: 08                                        ; FIXUP func body size
; function body 102
0001e39: 00                                        ; func body size (guess)
0001e3a: 00                                        ; local decl count
0001e3b: 42                                        ; i64.const
0001e3c: 01                                        ; i64 literal
0001e3d: 42                                        ; i64.const
0001e3e: 02                                        ; i64 literal
0001e3f: 7e                                        ; i64.mul
0001e40: 1a                                        ; drop
0001e41: 0b                                        ; end
0001e39: 08                                        ; FIXUP func body size
; function body 103
0001e42: 00                                        ; func body size (guess)
0001e43: 00                                        ; local decl count
0001e44: 42                                        ; i64.const
0001e45: 01                                        ; i64 literal
0001e46: 42                                        ; i64.const
0001e47: 02                                        ; i64 literal
0001e48: 7f                                        ; i64.div_s
0001e49: 1a                                        ; drop
0001e4a: 0b                                        ; end
0001e42: 08                                        ; FIXUP func body size
; function body 104
0001e4b: 00                                        ; func body size (guess)
0001e4c: 00                                        ; local decl count
0001e4d: 42                                        ; i64.const
0001e4e: 01                                        ; i64 literal
0001e4f: 42                                        ; i64.const
0001e50: 02                                        ; i64 literal
0001e51: 80                                        ; i64.div_u
0001e52: 1a                                        ; drop
0001e53: 0b                                        ; end
0001e4b: 08                                        ; FIXUP func body size
; function body 105
0001e54: 00                                        ; func body size (guess)
0001e55: 00                                        ; local decl count
0001e56: 42                                        ; i64.const
0001e57: 01                                        ; i64 literal
0001e58: 42                                        ; i64.const
0001e59: 02                                        ; i64 literal
0001e5a: 81                                        ; i64.rem_s
0001e5b: 1a                                        ; drop
0001e5c: 0b                                        ; end
0001e54: 08                                        ; FIXUP func body size
; function body 106
0001e5d: 00                                        ; func body size (guess)
0001e5e: 00                                        ; local decl count
0001e5f: 42                                        ; i64.const
0001e60: 01                                        ; i64 literal
0001e61: 42                                        ; i64.const
0001e62: 02                                        ; i64 literal
0001e63: 82                                        ; i64.rem_u
0001e64: 1a                                        ; drop
0001e65: 0b                                        ; end
0001e5d: 08                                        ; FIXUP func body size
; function body 107
0001e66: 00                                        ; func body size (guess)
0001e67: 00                                        ; local decl count
0001e68: 42                                        ; i64.const
0001e69: 01                                        ; i64 literal
0001e6a: 42                                        ; i64.const
0001e6b: 02                                        ; i64 literal
0001e6c: 83                                        ; i64.and
0001e6d: 1a                                        ; drop
0001e6e: 0b                                        ; end
0001e66: 08                                        ; FIXUP func body size
; function body 108
0001e6f: 00                                        ; func body size (guess)
0001e70: 00                                        ; local decl count
0001e71: 42                                        ; i64.const
0001e72: 01                                        ; i64 literal
0001e73: 42                                        ; i64.const
0001e74: 02                                        ; i64 literal
0001e75: 84                                        ; i64.or
0001e76: 1a                                        ; drop
0001e77: 0b                                        ; end
0001e6f: 08                                        ; FIXUP func body size
; function body 109
0001e78: 00                                        ; func body size (guess)
0001e79: 00                                        ; local decl count
0001e7a: 42                                        ; i64.const
0001e7b: 01                                        ; i64 literal
0001e7c: 42                                        ; i64.const
0001e7d: 02                                        ; i64 literal
0001e7e: 85                                        ; i64.xor
0001e7f: 1a                                        ; drop
0001e80: 0b                                        ; end
0001e78: 08                                        ; FIXUP func body size
; function body 110
0001e81: 00                                        ; func body size (guess)
0001e82: 00                                        ; local decl count
0001e83: 42                                        ; i64.const
0001e84: 01                                        ; i64 literal
0001e85: 42                                        ; i64.const
0001e86: 02                                        ; i64 literal
0001e87: 86                                        ; i64.shl
0001e88: 1a                                        ; drop
0001e89: 0b                                        ; end
0001e81: 08                                        ; FIXUP func body size
; function body 111
0001e8a: 00                                        ; func body size (guess)
0001e8b: 00                                        ; local decl count
0001e8c: 42                                        ; i64.const
0001e8d: 01                                        ; i64 literal
0001e8e: 42                                        ; i64.const
0001e8f: 02                                        ; i64 literal
0001e90: 87                                        ; i64.shr_s
0001e91: 1a                                        ; drop
0001e92: 0b                                        ; end
0001e8a: 08                                        ; FIXUP func body size
; function body 112
0001e93: 00                                        ; func body size (guess)
0001e94: 00                                        ; local decl count
0001e95: 42                                        ; i64.const
0001e96: 01                                        ; i64 literal
0001e97: 42                                        ; i64.const
0001e98: 02                                        ; i64 literal
0001e99: 88                                        ; i64.shr_u
0001e9a: 1a                                        ; drop
0001e9b: 0b                                        ; end
0001e93: 08                                        ; FIXUP func body size
; function body 113
0001e9c: 00                                        ; func body size (guess)
0001e9d: 00                                        ; local decl count
0001e9e: 42                                        ; i64.const
0001e9f: 01                                        ; i64 literal
0001ea0: 42                                        ; i64.const
0001ea1: 02                                        ; i64 literal
0001ea2: 89                                        ; i64.rotl
0001ea3: 1a                                        ; drop
0001ea4: 0b                                        ; end
0001e9c: 08                                        ; FIXUP func body size
; function body 114
0001ea5: 00                                        ; func body size (guess)
0001ea6: 00                                        ; local decl count
0001ea7: 42                                        ; i64.const
0001ea8: 01                                        ; i64 literal
0001ea9: 42                                        ; i64.const
0001eaa: 02                                        ; i64 literal
0001eab: 8a                                        ; i64.rotr
0001eac: 1a                                        ; drop
0001ead: 0b                                        ; end
0001ea5: 08                                        ; FIXUP func body size
; function body 115
0001eae: 00                                        ; func body size (guess)
0001eaf: 00                                        ; local decl count
0001eb0: 43                                        ; f32.const
0001eb1: 0000 803f                                 ; f32 literal
0001eb5: 8b                                        ; f32.abs
0001eb6: 1a                                        ; drop
0001eb7: 0b                                        ; end
0001eae: 09                                        ; FIXUP func body size
; function body 116
0001eb8: 00                                        ; func body size (guess)
0001eb9: 00                                        ; local decl count
0001eba: 43                                        ; f32.const
0001ebb: 0000 803f                                 ; f32 literal
0001ebf: 8c                                        ; f32.neg
0001ec0: 1a                                        ; drop
0001ec1: 0b                                        ; end
0001eb8: 09                                        ; FIXUP func body size
; function body 117
0001ec2: 00                                        ; func body size (guess)
0001ec3: 00                                        ; local decl count
0001ec4: 43                                        ; f32.const
0001ec5: 0000 803f                                 ; f32 literal
0001ec9: 8d                                        ; f32.ceil
0001eca: 1a                                        ; drop
0001ecb: 0b                                        ; end
0001ec2: 09                                        ; FIXUP func body size
; function body 118
0001ecc: 00                                        ; func body size (guess)
0001ecd: 00                                        ; local decl count
0001ece: 43                                        ; f32.const
0001ecf: 0000 803f                                 ; f32 literal
0001ed3: 8e                                        ; f32.floor
0001ed4: 1a                                        ; drop
0001ed5: 0b                                        ; end
0001ecc: 09                                        ; FIXUP func body size
; function body 119
0001ed6: 00                                        ; func body size (guess)
0001ed7: 00                                        ; local decl count
0001ed8: 43                                        ; f32.const
0001ed9: 0000 803f                                 ; f32 literal
0001edd: 8f                                        ; f32.trunc
0001ede: 1a                                        ; drop
0001edf: 0b                                        ; end
0001ed6: 09                                        ; FIXUP func body size
; function body 120
0001ee0: 00                                        ; func body size (guess)
0001ee1: 00                                        ; local decl count
0001ee2: 43                                        ; f32.const
0001ee3: 0000 803f                                 ; f32 literal
0001ee7: 90                                        ; f32.nearest
0001ee8: 1a                                        ; drop
0001ee9: 0b                                        ; end
0001ee0: 09                                        ; FIXUP func body size
; function body 121
0001eea: 00                                        ; func body size (guess)
0001eeb: 00                                        ; local decl count
0001eec: 43                                        ; f32.const
0001eed: 0000 803f                                 ; f32 literal
0001ef1: 91                                        ; f32.sqrt
0001ef2: 1a                                        ; drop
0001ef3: 0b                                        ; end
0001eea: 09                                        ; FIXUP func body size
; function body 122
0001ef4: 00                                        ; func body size (guess)
0001ef5: 00                                        ; local decl count
0001ef6: 43                                        ; f32.const
0001ef7: 0000 803f                                 ; f32 literal
0001efb: 43                                        ; f32.const
0001efc: 0000 0040                                 ; f32 literal
0001f00: 92                                        ; f32.add
0001f01: 1a                                        ; drop
0001f02: 0b                                        ; end
0001ef4: 0e                                        ; FIXUP func body size
; function body 123
0001f03: 00                                        ; func body size (guess)
0001f04: 00                                        ; local decl count
0001f05: 43                                        ; f32.const
0001f06: 0000 803f                                 ; f32 literal
0001f0a: 43                                        ; f32.const
0001f0b: 0000 0040                                 ; f32 literal
0001f0f: 93                                        ; f32.sub
0001f10: 1a                                        ; drop
0001f11: 0b                                        ; end
0001f03: 0e                                        ; FIXUP func body size
; function body 124
0001f12: 00                                        ; func body size (guess)
0001f13: 00                                        ; local decl count
0001f14: 43                                        ; f32.const
0001f15: 0000 803f                                 ; f32 literal
0001f19: 43                                        ; f32.const
0001f1a: 0000 0040                                 ; f32 literal
0001f1e: 94                                        ; f32.mul
0001f1f: 1a                                        ; drop
0001f20: 0b                                        ; end
0001f12: 0e                                        ; FIXUP func body size
; function body 125
0001f21: 00                                        ; func body size (guess)
0001f22: 00                                        ; local decl count
0001f23: 43                                        ; f32.const
0001f24: 0000 803f                                 ; f32 literal
0001f28: 43                                        ; f32.const
0001f29: 0000 0040                                 ; f32 literal
0001f2d: 95                                        ; f32.div
0001f2e: 1a                                        ; drop
0001f2f: 0b                                        ; end
0001f21: 0e                                        ; FIXUP func body size
; function body 126
0001f30: 00                                        ; func body size (guess)
0001f31: 00                                        ; local decl count
0001f32: 43                                        ; f32.const
0001f33: 0000 803f                                 ; f32 literal
0001f37: 43                                        ; f32.const
0001f38: 0000 0040                                 ; f32 literal
0001f3c: 96                                        ; f32.min
0001f3d: 1a                                        ; drop
0001f3e: 0b                                        ; end
0001f30: 0e                                        ; FIXUP func body size
; function body 127
0001f3f: 00                                        ; func body size (guess)
0001f40: 00                                        ; local decl count
0001f41: 43                                        ; f32.const
0001f42: 0000 803f                                 ; f32 literal
0001f46: 43                                        ; f32.const
0001f47: 0000 0040                                 ; f32 literal
0001f4b: 97                                        ; f32.max
0001f4c: 1a                                        ; drop
0001f4d: 0b                                        ; end
0001f3f: 0e                                        ; FIXUP func body size
; function body 128
0001f4e: 00                                        ; func body size (guess)
0001f4f: 00                                        ; local decl count
0001f50: 43                                        ; f32.const
0001f51: 0000 803f                                 ; f32 literal
0001f55: 43                                        ; f32.const
0001f56: 0000 0040                                 ; f32 literal
0001f5a: 98                                        ; f32.copysign
0001f5b: 1a                                        ; drop
0001f5c: 0b                                        ; end
0001f4e: 0e                                        ; FIXUP func body size
; function body 129
0001f5d: 00                                        ; func body size (guess)
0001f5e: 00                                        ; local decl count
0001f5f: 44                                        ; f64.const
0001f60: 0000 0000 0000 f03f                       ; f64 literal
0001f68: 99                                        ; f64.abs
0001f69: 1a                                        ; drop
0001f6a: 0b                                        ; end
0001f5d: 0d                                        ; FIXUP func body size
; function body 130
0001f6b: 00                                        ; func body size (guess)
0001f6c: 00                                        ; local decl count
0001f6d: 44                                        ; f64.const
0001f6e: 0000 0000 0000 f03f                       ; f64 literal
0001f76: 9a                                        ; f64.neg
0001f77: 1a                                        ; drop
0001f78: 0b                                        ; end
0001f6b: 0d                                        ; FIXUP func body size
; function body 131
0001f79: 00                                        ; func body size (guess)
0001f7a: 00                                        ; local decl count
0001f7b: 44                                        ; f64.const
0001f7c: 0000 0000 0000 f03f                       ; f64 literal
0001f84: 9b                                        ; f64.ceil
0001f85: 1a                                        ; drop
0001f86: 0b                                        ; end
0001f79: 0d                                        ; FIXUP func body size
; function body 132
0001f87: 00                                        ; func body size (guess)
0001f88: 00                                        ; local decl count
0001f89: 44                                        ; f64.const
0001f8a: 0000 0000 0000 f03f                       ; f64 literal
0001f92: 9c                                        ; f64.floor
0001f93: 1a                                        ; drop
0001f94: 0b                                        ; end
0001f87: 0d                                        ; FIXUP func body size
; function body 133
0001f95: 00                                        ; func body size (guess)
0001f96: 00                                        ; local decl count
0001f97: 44                                        ; f64.const
0001f98: 0000 0000 0000 f03f                       ; f64 literal
0001fa0: 9d                                        ; f64.trunc
0001fa1: 1a                                        ; drop
0001fa2: 0b                                        ; end
0001f95: 0d                                        ; FIXUP func body size
; function body 134
0001fa3: 00                                        ; func body size (guess)
0001fa4: 00                                        ; local decl count
0001fa5: 44                                        ; f64.const
0001fa6: 0000 0000 0000 f03f                       ; f64 literal
0001fae: 9e                                        ; f64.nearest
0001faf: 1a                                        ; drop
0001fb0: 0b                                        ; end
0001fa3: 0d                                        ; FIXUP func body size
; function body 135
0001fb1: 00                                        ; func body size (guess)
0001fb2: 00                                        ; local decl count
0001fb3: 44                                        ; f64.const
0001fb4: 0000 0000 0000 f03f                       ; f64 literal
0001fbc: 9f                                        ; f64.sqrt
0001fbd: 1a                                        ; drop
0001fbe: 0b                                        ; end
0001fb1: 0d                                        ; FIXUP func body size
; function body 136
0001fbf: 00                                        ; func body size (guess)
0001fc0: 00                                        ; local decl count
0001fc1: 44                                        ; f64.const
0001fc2: 0000 0000 0000 f03f                       ; f64 literal
0001fca: 44                                        ; f64.const
0001fcb: 0000 0000 0000 0040                       ; f64 literal
0001fd3: a0                                        ; f64.add
0001fd4: 1a                                        ; drop
0001fd5: 0b                                        ; end
0001fbf: 16                                        ; FIXUP func body size
; function body 137
0001fd6: 00                                        ; func body size (guess)
0001fd7: 00                                        ; local decl count
0001fd8: 44                                        ; f64.const
0001fd9: 0000 0000 0000 f03f                       ; f64 literal
0001fe1: 44                                        ; f64.const
0001fe2: 0000 0000 0000 0040                       ; f64 literal
0001fea: a1                                        ; f64.sub
0001feb: 1a                                        ; drop
0001fec: 0b                                        ; end
0001fd6: 16                                        ; FIXUP func body size
; function body 138
0001fed: 00                                        ; func body size (guess)
0001fee: 00                                        ; local decl count
0001fef: 44                                        ; f64.const
0001ff0: 0000 0000 0000 f03f                       ; f64 literal
0001ff8: 44                                        ; f64.const
0001ff9: 0000 0000 0000 0040                       ; f64 literal
0002001: a2                                        ; f64.mul
0002002: 1a                                        ; drop
0002003: 0b                                        ; end
0001fed: 16                                        ; FIXUP func body size
; function body 139
0002004: 00                                        ; func body size (guess)
0002005: 00                                        ; local decl count
0002006: 44                                        ; f64.const
0002007: 0000 0000 0000 f03f                       ; f64 literal
000200f: 44                                        ; f64.const
0002010: 0000 0000 0000 0040                       ; f64 literal
0002018: a3                                        ; f64.div
0002019: 1a                                        ; drop
000201a: 0b                                        ; end
0002004: 16                                        ; FIXUP func body size
; function body 140
000201b: 00                                        ; func body size (guess)
000201c: 00                                        ; local decl count
000201d: 44                                        ; f64.const
000201e: 0000 0000 0000 f03f                       ; f64 literal
0002026: 44                                        ; f64.const
0002027: 0000 0000 0000 0040                       ; f64 literal
000202f: a4                                        ; f64.min
0002030: 1a                                        ; drop
0002031: 0b                                        ; end
000201b: 16                                        ; FIXUP func body size
; function body 141
0002032: 00                                        ; func body size (guess)
0002033: 00                                        ; local decl count
0002034: 44                                        ; f64.const
0002035: 0000 0000 0000 f03f                       ; f64 literal
000203d: 44                                        ; f64.const
000203e: 0000 0000 0000 0040                       ; f64 literal
0002046: a5                                        ; f64.max
0002047: 1a                                        ; drop
0002048: 0b                                        ; end
0002032: 16                                        ; FIXUP func body size
; function body 142
0002049: 00                                        ; func body size (guess)
000204a: 00                                        ; local decl count
000204b: 44                                        ; f64.const
000204c: 0000 0000 0000 f03f                       ; f64 literal
0002054: 44                                        ; f64.const
0002055: 0000 0000 0000 0040                       ; f64 literal
000205d: a6                                        ; f64.copysign
000205e: 1a                                        ; drop
000205f: 0b                                        ; end
0002049: 16                                        ; FIXUP func body size
; function body 143
0002060: 00                                        ; func body size (guess)
0002061: 00                                        ; local decl count
0002062: 42                                        ; i64.const
0002063: 01                                        ; i64 literal
0002064: a7                                        ; i32.wrap_i64
0002065: 1a                                        ; drop
0002066: 0b                                        ; end
0002060: 06                                        ; FIXUP func body size
; function body 144
0002067: 00                                        ; func body size (guess)
0002068: 00                                        ; local decl count
0002069: 43                                        ; f32.const
000206a: 0000 803f                                 ; f32 literal
000206e: a8                                        ; i32.trunc_f32_s
000206f: 1a                                        ; drop
0002070: 0b                                        ; end
0002067: 09                                        ; FIXUP func body size
; function body 145
0002071: 00                                        ; func body size (guess)
0002072: 00                                        ; local decl count
0002073: 43                                        ; f32.const
0002074: 0000 803f                                 ; f32 literal
0002078: a9                                        ; i32.trunc_f32_u
0002079: 1a                                        ; drop
000207a: 0b                                        ; end
0002071: 09                                        ; FIXUP func body size
; function body 146
000207b: 00                                        ; func body size (guess)
000207c: 00                                        ; local decl count
000207d: 44                                        ; f64.const
000207e: 0000 0000 0000 f03f                       ; f64 literal
0002086: aa                                        ; i32.trunc_f64_s
0002087: 1a                                        ; drop
0002088: 0b                                        ; end
000207b: 0d                                        ; FIXUP func body size
; function body 147
0002089: 00                                        ; func body size (guess)
000208a: 00                                        ; local decl count
000208b: 44                                        ; f64.const
000208c: 0000 0000 0000 f03f                       ; f64 literal
0002094: ab                                        ; i32.trunc_f64_u
0002095: 1a                                        ; drop
0002096: 0b                                        ; end
0002089: 0d                                        ; FIXUP func body size
; function body 148
0002097: 00                                        ; func body size (guess)
0002098: 00                                        ; local decl count
0002099: 41                                        ; i32.const
000209a: 01                                        ; i32 literal
000209b: ac                                        ; i64.extend_i32_s
000209c: 1a                                        ; drop
000209d: 0b                                        ; end
0002097: 06                                        ; FIXUP func body size
; function body 149
000209e: 00                                        ; func body size (guess)
000209f: 00                                        ; local decl count
00020a0: 41                                        ; i32.const
00020a1: 01                                        ; i32 literal
00020a2: ad                                        ; i64.extend_i32_u
00020a3: 1a                                        ; drop
00020a4: 0b                                        ; end
000209e: 06                                        ; FIXUP func body size
; function body 150
00020a5: 00                                        ; func body size (guess)
00020a6: 00                                        ; local decl count
00020a7: 43                                        ; f32.const
00020a8: 0000 803f                                 ; f32 literal
00020ac: ae                                        ; i64.trunc_f32_s
00020ad: 1a                                        ; drop
00020ae: 0b                                        ; end
00020a5: 09                                        ; FIXUP func body size
; function body 151
00020af: 00                                        ; func body size (guess)
00020b0: 00                                        ; local decl count
00020b1: 43                                        ; f32.const
00020b2: 0000 803f                                 ; f32 literal
00020b6: af                                        ; i64.trunc_f32_u
00020b7: 1a                                        ; drop
00020b8: 0b                                        ; end
00020af: 09                                        ; FIXUP func body size
; function body 152
00020b9: 00                                        ; func body size (guess)
00020ba: 00                                        ; local decl count
00020bb: 44                                        ; f64.const
00020bc: 0000 0000 0000 f03f                       ; f64 literal
00020c4: b0                                        ; i64.trunc_f64_s
00020c5: 1a                                        ; drop
00020c6: 0b                                        ; end
00020b9: 0d                                        ; FIXUP func body size
; function body 153
00020c7: 00                                        ; func body size (guess)
00020c8: 00                                        ; local decl count
00020c9: 44                                        ; f64.const
00020ca: 0000 0000 0000 f03f                       ; f64 literal
00020d2: b1                                        ; i64.trunc_f64_u
00020d3: 1a                                        ; drop
00020d4: 0b                                        ; end
00020c7: 0d                                        ; FIXUP func body size
; function body 154
00020d5: 00                                        ; func body size (guess)
00020d6: 00                                        ; local decl count
00020d7: 41                                        ; i32.const
00020d8: 01                                        ; i32 literal
00020d9: b2                                        ; f32.convert_i32_s
00020da: 1a                                        ; drop
00020db: 0b                                        ; end
00020d5: 06                                        ; FIXUP func body size
; function body 155
00020dc: 00                                        ; func body size (guess)
00020dd: 00                                        ; local decl count
00020de: 41                                        ; i32.const
00020df: 01                                        ; i32 literal
00020e0: b3                                        ; f32.convert_i32_u
00020e1: 1a                                        ; drop
00020e2: 0b                                        ; end
00020dc: 06                                        ; FIXUP func body size
; function body 156
00020e3: 00                                        ; func body size (guess)
00020e4: 00                                        ; local decl count
00020e5: 42                                        ; i64.const
00020e6: 01                                        ; i64 literal
00020e7: b4                                        ; f32.convert_i64_s
00020e8: 1a                                        ; drop
00020e9: 0b                                        ; end
00020e3: 06                                        ; FIXUP func body size
; function body 157
00020ea: 00                                        ; func body size (guess)
00020eb: 00                                        ; local decl count
00020ec: 42                                        ; i64.const
00020ed: 01                                        ; i64 literal
00020ee: b5                                        ; f32.convert_i64_u
00020ef: 1a                                        ; drop
00020f0: 0b                                        ; end
00020ea: 06                                        ; FIXUP func body size
; function body 158
00020f1: 00                                        ; func body size (guess)
00020f2: 00                                        ; local decl count
00020f3: 44                                        ; f64.const
00020f4: 0000 0000 0000 f03f                       ; f64 literal
00020fc: b6                                        ; f32.demote_f64
00020fd: 1a                                        ; drop
00020fe: 0b                                        ; end
00020f1: 0d                                        ; FIXUP func body size
; function body 159
00020ff: 00                                        ; func body size (guess)
0002100: 00                                        ; local decl count
0002101: 41                                        ; i32.const
0002102: 01                                        ; i32 literal
0002103: b7                                        ; f64.convert_i32_s
0002104: 1a                                        ; drop
0002105: 0b                                        ; end
00020ff: 06                                        ; FIXUP func body size
; function body 160
0002106: 00                                        ; func body size (guess)
0002107: 00                                        ; local decl count
0002108: 41                                        ; i32.const
0002109: 01                                        ; i32 literal
000210a: b8                                        ; f64.convert_i32_u
000210b: 1a                                        ; drop
000210c: 0b                                        ; end
0002106: 06                                        ; FIXUP func body size
; function body 161
000210d: 00                                        ; func body size (guess)
000210e: 00                                        ; local decl count
000210f: 42                                        ; i64.const
0002110: 01                                        ; i64 literal
0002111: b9                                        ; f64.convert_i64_s
0002112: 1a                                        ; drop
0002113: 0b                                        ; end
000210d: 06                                        ; FIXUP func body size
; function body 162
0002114: 00                                        ; func body size (guess)
0002115: 00                                        ; local decl count
0002116: 42                                        ; i64.const
0002117: 01                                        ; i64 literal
0002118: ba                                        ; f64.convert_i64_u
0002119: 1a                                        ; drop
000211a: 0b                                        ; end
0002114: 06                                        ; FIXUP func body size
; function body 163
000211b: 00                                        ; func body size (guess)
000211c: 00                                        ; local decl count
000211d: 43                                        ; f32.const
000211e: 0000 803f                                 ; f32 literal
0002122: bb                                        ; f64.promote_f32
0002123: 1a                                        ; drop
0002124: 0b                                        ; end
000211b: 09                                        ; FIXUP func body size
; function body 164
0002125: 00                                        ; func body size (guess)
0002126: 00                                        ; local decl count
0002127: 41                                        ; i32.const
0002128: 01                                        ; i32 literal
0002129: be                                        ; f32.reinterpret_i32
000212a: 1a                                        ; drop
000212b: 0b                                        ; end
0002125: 06                                        ; FIXUP func body size
; function body 165
000212c: 00                                        ; func body size (guess)
000212d: 00                                        ; local decl count
000212e: 43                                        ; f32.const
000212f: 0000 803f                                 ; f32 literal
0002133: bc                                        ; i32.reinterpret_f32
0002134: 1a                                        ; drop
0002135: 0b                                        ; end
000212c: 09                                        ; FIXUP func body size
; function body 166
0002136: 00                                        ; func body size (guess)
0002137: 00                                        ; local decl count
0002138: 42                                        ; i64.const
0002139: 01                                        ; i64 literal
000213a: bf                                        ; f64.reinterpret_i64
000213b: 1a                                        ; drop
000213c: 0b                                        ; end
0002136: 06                                        ; FIXUP func body size
; function body 167
000213d: 00                                        ; func body size (guess)
000213e: 00                                        ; local decl count
000213f: 44                                        ; f64.const
0002140: 0000 0000 0000 f03f                       ; f64 literal
0002148: bd                                        ; i64.reinterpret_f64
0002149: 1a                                        ; drop
000214a: 0b                                        ; end
000213d: 0d                                        ; FIXUP func body size
; function body 168
000214b: 00                                        ; func body size (guess)
000214c: 00                                        ; local decl count
000214d: 41                                        ; i32.const
000214e: 01                                        ; i32 literal
000214f: c0                                        ; i32.extend8_s
0002150: 1a                                        ; drop
0002151: 0b                                        ; end
000214b: 06                                        ; FIXUP func body size
; function body 169
0002152: 00                                        ; func body size (guess)
0002153: 00                                        ; local decl count
0002154: 41                                        ; i32.const
0002155: 01                                        ; i32 literal
0002156: c1                                        ; i32.extend16_s
0002157: 1a                                        ; drop
0002158: 0b                                        ; end
0002152: 06                                        ; FIXUP func body size
; function body 170
0002159: 00                                        ; func body size (guess)
000215a: 00                                        ; local decl count
000215b: 42                                        ; i64.const
000215c: 01                                        ; i64 literal
000215d: c2                                        ; i64.extend8_s
000215e: 1a                                        ; drop
000215f: 0b                                        ; end
0002159: 06                                        ; FIXUP func body size
; function body 171
0002160: 00                                        ; func body size (guess)
0002161: 00                                        ; local decl count
0002162: 42                                        ; i64.const
0002163: 01                                        ; i64 literal
0002164: c3                                        ; i64.extend16_s
0002165: 1a                                        ; drop
0002166: 0b                                        ; end
0002160: 06                                        ; FIXUP func body size
; function body 172
0002167: 00                                        ; func body size (guess)
0002168: 00                                        ; local decl count
0002169: 42                                        ; i64.const
000216a: 01                                        ; i64 literal
000216b: c4                                        ; i64.extend32_s
000216c: 1a                                        ; drop
000216d: 0b                                        ; end
0002167: 06                                        ; FIXUP func body size
; function body 173
000216e: 00                                        ; func body size (guess)
000216f: 01                                        ; local decl count
0002170: 01                                        ; local type count
0002171: 7f                                        ; i32
0002172: 0b                                        ; end
000216e: 04                                        ; FIXUP func body size
; function body 174
0002173: 00                                        ; func body size (guess)
0002174: 00                                        ; local decl count
0002175: 41                                        ; i32.const
0002176: 01                                        ; i32 literal
0002177: 0d                                        ; br_if
0002178: 00                                        ; break depth
0002179: 0b                                        ; end
0002173: 06                                        ; FIXUP func body size
; function body 175
000217a: 00                                        ; func body size (guess)
000217b: 00                                        ; local decl count
000217c: 41                                        ; i32.const
000217d: 01                                        ; i32 literal
000217e: 10                                        ; call
000217f: 00                                        ; function index
0002180: 0b                                        ; end
000217a: 06                                        ; FIXUP func body size
; function body 176
0002181: 00                                        ; func body size (guess)
0002182: 00                                        ; local decl count
0002183: 41                                        ; i32.const
0002184: 01                                        ; i32 literal
0002185: 0e                                        ; br_table
0002186: 00                                        ; num targets
0002187: 00                                        ; break depth for default
0002188: 0b                                        ; end
0002181: 07                                        ; FIXUP func body size
; function body 177
0002189: 00                                        ; func body size (guess)
000218a: 00                                        ; local decl count
000218b: 02                                        ; block
000218c: 7f                                        ; i32
000218d: 41                                        ; i32.const
000218e: 01                                        ; i32 literal
000218f: 41                                        ; i32.const
0002190: 02                                        ; i32 literal
0002191: 0c                                        ; br
0002192: 00                                        ; break depth
0002193: 0b                                        ; end
0002194: 1a                                        ; drop
0002195: 0b                                        ; end
0002189: 0c                                        ; FIXUP func body size
; function body 178
0002196: 00                                        ; func body size (guess)
0002197: 00                                        ; local decl count
0002198: 43                                        ; f32.const
0002199: 0000 803f                                 ; f32 literal
000219d: fc                                        ; prefix
000219e: 00                                        ; i32.trunc_sat_f32_s
000219f: 1a                                        ; drop
00021a0: 0b                                        ; end
0002196: 0a                                        ; FIXUP func body size
; function body 179
00021a1: 00                                        ; func body size (guess)
00021a2: 00                                        ; local decl count
00021a3: 43                                        ; f32.const
00021a4: 0000 803f                                 ; f32 literal
00021a8: fc                                        ; prefix
00021a9: 01                                        ; i32.trunc_sat_f32_u
00021aa: 1a                                        ; drop
00021ab: 0b                                        ; end
00021a1: 0a                                        ; FIXUP func body size
; function body 180
00021ac: 00                                        ; func body size (guess)
00021ad: 00                                        ; local decl count
00021ae: 44                                        ; f64.const
00021af: 0000 0000 0000 f03f                       ; f64 literal
00021b7: fc                                        ; prefix
00021b8: 02                                        ; i32.trunc_sat_f64_s
00021b9: 1a                                        ; drop
00021ba: 0b                                        ; end
00021ac: 0e                                        ; FIXUP func body size
; function body 181
00021bb: 00                                        ; func body size (guess)
00021bc: 00                                        ; local decl count
00021bd: 44                                        ; f64.const
00021be: 0000 0000 0000 f03f                       ; f64 literal
00021c6: fc                                        ; prefix
00021c7: 03                                        ; i32.trunc_sat_f64_u
00021c8: 1a                                        ; drop
00021c9: 0b                                        ; end
00021bb: 0e                                        ; FIXUP func body size
; function body 182
00021ca: 00                                        ; func body size (guess)
00021cb: 00                                        ; local decl count
00021cc: 43                                        ; f32.const
00021cd: 0000 803f                                 ; f32 literal
00021d1: fc                                        ; prefix
00021d2: 04                                        ; i64.trunc_sat_f32_s
00021d3: 1a                                        ; drop
00021d4: 0b                                        ; end
00021ca: 0a                                        ; FIXUP func body size
; function body 183
00021d5: 00                                        ; func body size (guess)
00021d6: 00                                        ; local decl count
00021d7: 43                                        ; f32.const
00021d8: 0000 803f                                 ; f32 literal
00021dc: fc                                        ; prefix
00021dd: 05                                        ; i64.trunc_sat_f32_u
00021de: 1a                                        ; drop
00021df: 0b                                        ; end
00021d5: 0a                                        ; FIXUP func body size
; function body 184
00021e0: 00                                        ; func body size (guess)
00021e1: 00                                        ; local decl count
00021e2: 44                                        ; f64.const
00021e3: 0000 0000 0000 f03f                       ; f64 literal
00021eb: fc                                        ; prefix
00021ec: 06                                        ; i64.trunc_sat_f64_s
00021ed: 1a                                        ; drop
00021ee: 0b                                        ; end
00021e0: 0e                                        ; FIXUP func body size
; function body 185
00021ef: 00                                        ; func body size (guess)
00021f0: 00                                        ; local decl count
00021f1: 44                                        ; f64.const
00021f2: 0000 0000 0000 f03f                       ; f64 literal
00021fa: fc                                        ; prefix
00021fb: 07                                        ; i64.trunc_sat_f64_u
00021fc: 1a                                        ; drop
00021fd: 0b                                        ; end
00021ef: 0e                                        ; FIXUP func body size
; function body 186
00021fe: 00                                        ; func body size (guess)
00021ff: 00                                        ; local decl count
0002200: 41                                        ; i32.const
0002201: 01                                        ; i32 literal
0002202: fd                                        ; prefix
0002203: 00                                        ; v128.load
0002204: 04                                        ; alignment
0002205: 03                                        ; load offset
0002206: 1a                                        ; drop
0002207: 0b                                        ; end
00021fe: 09                                        ; FIXUP func body size
; function body 187
0002208: 00                                        ; func body size (guess)
0002209: 00                                        ; local decl count
000220a: 41                                        ; i32.const
000220b: 01                                        ; i32 literal
000220c: fd                                        ; prefix
000220d: 02                                        ; v128.const
000220e: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
000221e: fd                                        ; prefix
000221f: 01                                        ; v128.store
0002220: 04                                        ; alignment
0002221: 03                                        ; store offset
0002222: 0b                                        ; end
0002208: 1a                                        ; FIXUP func body size
; function body 188
0002223: 00                                        ; func body size (guess)
0002224: 00                                        ; local decl count
0002225: fd                                        ; prefix
0002226: 02                                        ; v128.const
0002227: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002237: 1a                                        ; drop
0002238: 0b                                        ; end
0002223: 15                                        ; FIXUP func body size
; function body 189
0002239: 00                                        ; func body size (guess)
000223a: 00                                        ; local decl count
000223b: fd                                        ; prefix
000223c: 02                                        ; v128.const
000223d: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
000224d: fd                                        ; prefix
000224e: 02                                        ; v128.const
000224f: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
000225f: fd                                        ; prefix
0002260: 03                                        ; v8x16.shuffle
0002261: 0100 0000 0100 0000 0100 0000 0100 0000   ; Simd Lane[16] literal
0002271: 1a                                        ; drop
0002272: 0b                                        ; end
0002239: 39                                        ; FIXUP func body size
; function body 190
0002273: 00                                        ; func body size (guess)
0002274: 00                                        ; local decl count
0002275: 41                                        ; i32.const
0002276: 01                                        ; i32 literal
0002277: fd                                        ; prefix
0002278: 04                                        ; i8x16.splat
0002279: 1a                                        ; drop
000227a: 0b                                        ; end
0002273: 07                                        ; FIXUP func body size
; function body 191
000227b: 00                                        ; func body size (guess)
000227c: 00                                        ; local decl count
000227d: fd                                        ; prefix
000227e: 02                                        ; v128.const
000227f: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
000228f: fd                                        ; prefix
0002290: 05                                        ; i8x16.extract_lane_s
0002291: 0f                                        ; Simd Lane literal
0002292: 1a                                        ; drop
0002293: 0b                                        ; end
000227b: 18                                        ; FIXUP func body size
; function body 192
0002294: 00                                        ; func body size (guess)
0002295: 00                                        ; local decl count
0002296: fd                                        ; prefix
0002297: 02                                        ; v128.const
0002298: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00022a8: fd                                        ; prefix
00022a9: 06                                        ; i8x16.extract_lane_u
00022aa: 0f                                        ; Simd Lane literal
00022ab: 1a                                        ; drop
00022ac: 0b                                        ; end
0002294: 18                                        ; FIXUP func body size
; function body 193
00022ad: 00                                        ; func body size (guess)
00022ae: 00                                        ; local decl count
00022af: fd                                        ; prefix
00022b0: 02                                        ; v128.const
00022b1: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00022c1: 41                                        ; i32.const
00022c2: 00                                        ; i32 literal
00022c3: fd                                        ; prefix
00022c4: 07                                        ; i8x16.replace_lane
00022c5: 0f                                        ; Simd Lane literal
00022c6: 1a                                        ; drop
00022c7: 0b                                        ; end
00022ad: 1a                                        ; FIXUP func body size
; function body 194
00022c8: 00                                        ; func body size (guess)
00022c9: 00                                        ; local decl count
00022ca: 41                                        ; i32.const
00022cb: 01                                        ; i32 literal
00022cc: fd                                        ; prefix
00022cd: 08                                        ; i16x8.splat
00022ce: 1a                                        ; drop
00022cf: 0b                                        ; end
00022c8: 07                                        ; FIXUP func body size
; function body 195
00022d0: 00                                        ; func body size (guess)
00022d1: 00                                        ; local decl count
00022d2: fd                                        ; prefix
00022d3: 02                                        ; v128.const
00022d4: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00022e4: fd                                        ; prefix
00022e5: 09                                        ; i16x8.extract_lane_s
00022e6: 07                                        ; Simd Lane literal
00022e7: 1a                                        ; drop
00022e8: 0b                                        ; end
00022d0: 18                                        ; FIXUP func body size
; function body 196
00022e9: 00                                        ; func body size (guess)
00022ea: 00                                        ; local decl count
00022eb: fd                                        ; prefix
00022ec: 02                                        ; v128.const
00022ed: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00022fd: fd                                        ; prefix
00022fe: 0a                                        ; i16x8.extract_lane_u
00022ff: 07                                        ; Simd Lane literal
0002300: 1a                                        ; drop
0002301: 0b                                        ; end
00022e9: 18                                        ; FIXUP func body size
; function body 197
0002302: 00                                        ; func body size (guess)
0002303: 00                                        ; local decl count
0002304: fd                                        ; prefix
0002305: 02                                        ; v128.const
0002306: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002316: 41                                        ; i32.const
0002317: 00                                        ; i32 literal
0002318: fd                                        ; prefix
0002319: 0b                                        ; i16x8.replace_lane
000231a: 07                                        ; Simd Lane literal
000231b: 1a                                        ; drop
000231c: 0b                                        ; end
0002302: 1a                                        ; FIXUP func body size
; function body 198
000231d: 00                                        ; func body size (guess)
000231e: 00                                        ; local decl count
000231f: 41                                        ; i32.const
0002320: 01                                        ; i32 literal
0002321: fd                                        ; prefix
0002322: 0c                                        ; i32x4.splat
0002323: 1a                                        ; drop
0002324: 0b                                        ; end
000231d: 07                                        ; FIXUP func body size
; function body 199
0002325: 00                                        ; func body size (guess)
0002326: 00                                        ; local decl count
0002327: fd                                        ; prefix
0002328: 02                                        ; v128.const
0002329: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002339: fd                                        ; prefix
000233a: 0d                                        ; i32x4.extract_lane
000233b: 03                                        ; Simd Lane literal
000233c: 1a                                        ; drop
000233d: 0b                                        ; end
0002325: 18                                        ; FIXUP func body size
; function body 200
000233e: 00                                        ; func body size (guess)
000233f: 00                                        ; local decl count
0002340: fd                                        ; prefix
0002341: 02                                        ; v128.const
0002342: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002352: 41                                        ; i32.const
0002353: 00                                        ; i32 literal
0002354: fd                                        ; prefix
0002355: 0e                                        ; i32x4.replace_lane
0002356: 03                                        ; Simd Lane literal
0002357: 1a                                        ; drop
0002358: 0b                                        ; end
000233e: 1a                                        ; FIXUP func body size
; function body 201
0002359: 00                                        ; func body size (guess)
000235a: 00                                        ; local decl count
000235b: 42                                        ; i64.const
000235c: 01                                        ; i64 literal
000235d: fd                                        ; prefix
000235e: 0f                                        ; i64x2.splat
000235f: 1a                                        ; drop
0002360: 0b                                        ; end
0002359: 07                                        ; FIXUP func body size
; function body 202
0002361: 00                                        ; func body size (guess)
0002362: 00                                        ; local decl count
0002363: fd                                        ; prefix
0002364: 02                                        ; v128.const
0002365: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002375: fd                                        ; prefix
0002376: 10                                        ; i64x2.extract_lane
0002377: 01                                        ; Simd Lane literal
0002378: 1a                                        ; drop
0002379: 0b                                        ; end
0002361: 18                                        ; FIXUP func body size
; function body 203
000237a: 00                                        ; func body size (guess)
000237b: 00                                        ; local decl count
000237c: fd                                        ; prefix
000237d: 02                                        ; v128.const
000237e: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
000238e: 42                                        ; i64.const
000238f: 00                                        ; i64 literal
0002390: fd                                        ; prefix
0002391: 11                                        ; i64x2.replace_lane
0002392: 01                                        ; Simd Lane literal
0002393: 1a                                        ; drop
0002394: 0b                                        ; end
000237a: 1a                                        ; FIXUP func body size
; function body 204
0002395: 00                                        ; func body size (guess)
0002396: 00                                        ; local decl count
0002397: 43                                        ; f32.const
0002398: 0000 803f                                 ; f32 literal
000239c: fd                                        ; prefix
000239d: 12                                        ; f32x4.splat
000239e: 1a                                        ; drop
000239f: 0b                                        ; end
0002395: 0a                                        ; FIXUP func body size
; function body 205
00023a0: 00                                        ; func body size (guess)
00023a1: 00                                        ; local decl count
00023a2: fd                                        ; prefix
00023a3: 02                                        ; v128.const
00023a4: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00023b4: fd                                        ; prefix
00023b5: 13                                        ; f32x4.extract_lane
00023b6: 03                                        ; Simd Lane literal
00023b7: 1a                                        ; drop
00023b8: 0b                                        ; end
00023a0: 18                                        ; FIXUP func body size
; function body 206
00023b9: 00                                        ; func body size (guess)
00023ba: 00                                        ; local decl count
00023bb: fd                                        ; prefix
00023bc: 02                                        ; v128.const
00023bd: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00023cd: 43                                        ; f32.const
00023ce: 0000 0000                                 ; f32 literal
00023d2: fd                                        ; prefix
00023d3: 14                                        ; f32x4.replace_lane
00023d4: 03                                        ; Simd Lane literal
00023d5: 1a                                        ; drop
00023d6: 0b                                        ; end
00023b9: 1d                                        ; FIXUP func body size
; function body 207
00023d7: 00                                        ; func body size (guess)
00023d8: 00                                        ; local decl count
00023d9: 44                                        ; f64.const
00023da: 0000 0000 0000 f03f                       ; f64 literal
00023e2: fd                                        ; prefix
00023e3: 15                                        ; f64x2.splat
00023e4: 1a                                        ; drop
00023e5: 0b                                        ; end
00023d7: 0e                                        ; FIXUP func body size
; function body 208
00023e6: 00                                        ; func body size (guess)
00023e7: 00                                        ; local decl count
00023e8: fd                                        ; prefix
00023e9: 02                                        ; v128.const
00023ea: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00023fa: fd                                        ; prefix
00023fb: 16                                        ; f64x2.extract_lane
00023fc: 01                                        ; Simd Lane literal
00023fd: 1a                                        ; drop
00023fe: 0b                                        ; end
00023e6: 18                                        ; FIXUP func body size
; function body 209
00023ff: 00                                        ; func body size (guess)
0002400: 00                                        ; local decl count
0002401: fd                                        ; prefix
0002402: 02                                        ; v128.const
0002403: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002413: 44                                        ; f64.const
0002414: 0000 0000 0000 0000                       ; f64 literal
000241c: fd                                        ; prefix
000241d: 17                                        ; f64x2.replace_lane
000241e: 01                                        ; Simd Lane literal
000241f: 1a                                        ; drop
0002420: 0b                                        ; end
00023ff: 21                                        ; FIXUP func body size
; function body 210
0002421: 00                                        ; func body size (guess)
0002422: 00                                        ; local decl count
0002423: fd                                        ; prefix
0002424: 02                                        ; v128.const
0002425: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002435: fd                                        ; prefix
0002436: 02                                        ; v128.const
0002437: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002447: fd                                        ; prefix
0002448: 18                                        ; i8x16.eq
0002449: 1a                                        ; drop
000244a: 0b                                        ; end
0002421: 29                                        ; FIXUP func body size
; function body 211
000244b: 00                                        ; func body size (guess)
000244c: 00                                        ; local decl count
000244d: fd                                        ; prefix
000244e: 02                                        ; v128.const
000244f: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
000245f: fd                                        ; prefix
0002460: 02                                        ; v128.const
0002461: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002471: fd                                        ; prefix
0002472: 19                                        ; i8x16.ne
0002473: 1a                                        ; drop
0002474: 0b                                        ; end
000244b: 29                                        ; FIXUP func body size
; function body 212
0002475: 00                                        ; func body size (guess)
0002476: 00                                        ; local decl count
0002477: fd                                        ; prefix
0002478: 02                                        ; v128.const
0002479: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002489: fd                                        ; prefix
000248a: 02                                        ; v128.const
000248b: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
000249b: fd                                        ; prefix
000249c: 1a                                        ; i8x16.lt_s
000249d: 1a                                        ; drop
000249e: 0b                                        ; end
0002475: 29                                        ; FIXUP func body size
; function body 213
000249f: 00                                        ; func body size (guess)
00024a0: 00                                        ; local decl count
00024a1: fd                                        ; prefix
00024a2: 02                                        ; v128.const
00024a3: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00024b3: fd                                        ; prefix
00024b4: 02                                        ; v128.const
00024b5: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
00024c5: fd                                        ; prefix
00024c6: 1b                                        ; i8x16.lt_u
00024c7: 1a                                        ; drop
00024c8: 0b                                        ; end
000249f: 29                                        ; FIXUP func body size
; function body 214
00024c9: 00                                        ; func body size (guess)
00024ca: 00                                        ; local decl count
00024cb: fd                                        ; prefix
00024cc: 02                                        ; v128.const
00024cd: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00024dd: fd                                        ; prefix
00024de: 02                                        ; v128.const
00024df: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
00024ef: fd                                        ; prefix
00024f0: 1c                                        ; i8x16.gt_s
00024f1: 1a                                        ; drop
00024f2: 0b                                        ; end
00024c9: 29                                        ; FIXUP func body size
; function body 215
00024f3: 00                                        ; func body size (guess)
00024f4: 00                                        ; local decl count
00024f5: fd                                        ; prefix
00024f6: 02                                        ; v128.const
00024f7: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002507: fd                                        ; prefix
0002508: 02                                        ; v128.const
0002509: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002519: fd                                        ; prefix
000251a: 1d                                        ; i8x16.gt_u
000251b: 1a                                        ; drop
000251c: 0b                                        ; end
00024f3: 29                                        ; FIXUP func body size
; function body 216
000251d: 00                                        ; func body size (guess)
000251e: 00                                        ; local decl count
000251f: fd                                        ; prefix
0002520: 02                                        ; v128.const
0002521: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002531: fd                                        ; prefix
0002532: 02                                        ; v128.const
0002533: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002543: fd                                        ; prefix
0002544: 1e                                        ; i8x16.le_s
0002545: 1a                                        ; drop
0002546: 0b                                        ; end
000251d: 29                                        ; FIXUP func body size
; function body 217
0002547: 00                                        ; func body size (guess)
0002548: 00                                        ; local decl count
0002549: fd                                        ; prefix
000254a: 02                                        ; v128.const
000254b: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
000255b: fd                                        ; prefix
000255c: 02                                        ; v128.const
000255d: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
000256d: fd                                        ; prefix
000256e: 1f                                        ; i8x16.le_u
000256f: 1a                                        ; drop
0002570: 0b                                        ; end
0002547: 29                                        ; FIXUP func body size
; function body 218
0002571: 00                                        ; func body size (guess)
0002572: 00                                        ; local decl count
0002573: fd                                        ; prefix
0002574: 02                                        ; v128.const
0002575: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002585: fd                                        ; prefix
0002586: 02                                        ; v128.const
0002587: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002597: fd                                        ; prefix
0002598: 20                                        ; i8x16.ge_s
0002599: 1a                                        ; drop
000259a: 0b                                        ; end
0002571: 29                                        ; FIXUP func body size
; function body 219
000259b: 00                                        ; func body size (guess)
000259c: 00                                        ; local decl count
000259d: fd                                        ; prefix
000259e: 02                                        ; v128.const
000259f: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00025af: fd                                        ; prefix
00025b0: 02                                        ; v128.const
00025b1: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
00025c1: fd                                        ; prefix
00025c2: 21                                        ; i8x16.ge_u
00025c3: 1a                                        ; drop
00025c4: 0b                                        ; end
000259b: 29                                        ; FIXUP func body size
; function body 220
00025c5: 00                                        ; func body size (guess)
00025c6: 00                                        ; local decl count
00025c7: fd                                        ; prefix
00025c8: 02                                        ; v128.const
00025c9: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00025d9: fd                                        ; prefix
00025da: 02                                        ; v128.const
00025db: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
00025eb: fd                                        ; prefix
00025ec: 22                                        ; i16x8.eq
00025ed: 1a                                        ; drop
00025ee: 0b                                        ; end
00025c5: 29                                        ; FIXUP func body size
; function body 221
00025ef: 00                                        ; func body size (guess)
00025f0: 00                                        ; local decl count
00025f1: fd                                        ; prefix
00025f2: 02                                        ; v128.const
00025f3: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002603: fd                                        ; prefix
0002604: 02                                        ; v128.const
0002605: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002615: fd                                        ; prefix
0002616: 23                                        ; i16x8.ne
0002617: 1a                                        ; drop
0002618: 0b                                        ; end
00025ef: 29                                        ; FIXUP func body size
; function body 222
0002619: 00                                        ; func body size (guess)
000261a: 00                                        ; local decl count
000261b: fd                                        ; prefix
000261c: 02                                        ; v128.const
000261d: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
000262d: fd                                        ; prefix
000262e: 02                                        ; v128.const
000262f: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
000263f: fd                                        ; prefix
0002640: 24                                        ; i16x8.lt_s
0002641: 1a                                        ; drop
0002642: 0b                                        ; end
0002619: 29                                        ; FIXUP func body size
; function body 223
0002643: 00                                        ; func body size (guess)
0002644: 00                                        ; local decl count
0002645: fd                                        ; prefix
0002646: 02                                        ; v128.const
0002647: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002657: fd                                        ; prefix
0002658: 02                                        ; v128.const
0002659: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002669: fd                                        ; prefix
000266a: 25                                        ; i16x8.lt_u
000266b: 1a                                        ; drop
000266c: 0b                                        ; end
0002643: 29                                        ; FIXUP func body size
; function body 224
000266d: 00                                        ; func body size (guess)
000266e: 00                                        ; local decl count
000266f: fd                                        ; prefix
0002670: 02                                        ; v128.const
0002671: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002681: fd                                        ; prefix
0002682: 02                                        ; v128.const
0002683: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002693: fd                                        ; prefix
0002694: 26                                        ; i16x8.gt_s
0002695: 1a                                        ; drop
0002696: 0b                                        ; end
000266d: 29                                        ; FIXUP func body size
; function body 225
0002697: 00                                        ; func body size (guess)
0002698: 00                                        ; local decl count
0002699: fd                                        ; prefix
000269a: 02                                        ; v128.const
000269b: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00026ab: fd                                        ; prefix
00026ac: 02                                        ; v128.const
00026ad: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
00026bd: fd                                        ; prefix
00026be: 27                                        ; i16x8.gt_u
00026bf: 1a                                        ; drop
00026c0: 0b                                        ; end
0002697: 29                                        ; FIXUP func body size
; function body 226
00026c1: 00                                        ; func body size (guess)
00026c2: 00                                        ; local decl count
00026c3: fd                                        ; prefix
00026c4: 02                                        ; v128.const
00026c5: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00026d5: fd                                        ; prefix
00026d6: 02                                        ; v128.const
00026d7: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
00026e7: fd                                        ; prefix
00026e8: 28                                        ; i16x8.le_s
00026e9: 1a                                        ; drop
00026ea: 0b                                        ; end
00026c1: 29                                        ; FIXUP func body size
; function body 227
00026eb: 00                                        ; func body size (guess)
00026ec: 00                                        ; local decl count
00026ed: fd                                        ; prefix
00026ee: 02                                        ; v128.const
00026ef: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00026ff: fd                                        ; prefix
0002700: 02                                        ; v128.const
0002701: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002711: fd                                        ; prefix
0002712: 29                                        ; i16x8.le_u
0002713: 1a                                        ; drop
0002714: 0b                                        ; end
00026eb: 29                                        ; FIXUP func body size
; function body 228
0002715: 00                                        ; func body size (guess)
0002716: 00                                        ; local decl count
0002717: fd                                        ; prefix
0002718: 02                                        ; v128.const
0002719: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002729: fd                                        ; prefix
000272a: 02                                        ; v128.const
000272b: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
000273b: fd                                        ; prefix
000273c: 2a                                        ; i16x8.ge_s
000273d: 1a                                        ; drop
000273e: 0b                                        ; end
0002715: 29                                        ; FIXUP func body size
; function body 229
000273f: 00                                        ; func body size (guess)
0002740: 00                                        ; local decl count
0002741: fd                                        ; prefix
0002742: 02                                        ; v128.const
0002743: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002753: fd                                        ; prefix
0002754: 02                                        ; v128.const
0002755: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002765: fd                                        ; prefix
0002766: 2b                                        ; i16x8.ge_u
0002767: 1a                                        ; drop
0002768: 0b                                        ; end
000273f: 29                                        ; FIXUP func body size
; function body 230
0002769: 00                                        ; func body size (guess)
000276a: 00                                        ; local decl count
000276b: fd                                        ; prefix
000276c: 02                                        ; v128.const
000276d: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
000277d: fd                                        ; prefix
000277e: 02                                        ; v128.const
000277f: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
000278f: fd                                        ; prefix
0002790: 2c                                        ; i32x4.eq
0002791: 1a                                        ; drop
0002792: 0b                                        ; end
0002769: 29                                        ; FIXUP func body size
; function body 231
0002793: 00                                        ; func body size (guess)
0002794: 00                                        ; local decl count
0002795: fd                                        ; prefix
0002796: 02                                        ; v128.const
0002797: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00027a7: fd                                        ; prefix
00027a8: 02                                        ; v128.const
00027a9: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
00027b9: fd                                        ; prefix
00027ba: 2d                                        ; i32x4.ne
00027bb: 1a                                        ; drop
00027bc: 0b                                        ; end
0002793: 29                                        ; FIXUP func body size
; function body 232
00027bd: 00                                        ; func body size (guess)
00027be: 00                                        ; local decl count
00027bf: fd                                        ; prefix
00027c0: 02                                        ; v128.const
00027c1: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00027d1: fd                                        ; prefix
00027d2: 02                                        ; v128.const
00027d3: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
00027e3: fd                                        ; prefix
00027e4: 2e                                        ; i32x4.lt_s
00027e5: 1a                                        ; drop
00027e6: 0b                                        ; end
00027bd: 29                                        ; FIXUP func body size
; function body 233
00027e7: 00                                        ; func body size (guess)
00027e8: 00                                        ; local decl count
00027e9: fd                                        ; prefix
00027ea: 02                                        ; v128.const
00027eb: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00027fb: fd                                        ; prefix
00027fc: 02                                        ; v128.const
00027fd: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
000280d: fd                                        ; prefix
000280e: 2f                                        ; i32x4.lt_u
000280f: 1a                                        ; drop
0002810: 0b                                        ; end
00027e7: 29                                        ; FIXUP func body size
; function body 234
0002811: 00                                        ; func body size (guess)
0002812: 00                                        ; local decl count
0002813: fd                                        ; prefix
0002814: 02                                        ; v128.const
0002815: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002825: fd                                        ; prefix
0002826: 02                                        ; v128.const
0002827: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002837: fd                                        ; prefix
0002838: 30                                        ; i32x4.gt_s
0002839: 1a                                        ; drop
000283a: 0b                                        ; end
0002811: 29                                        ; FIXUP func body size
; function body 235
000283b: 00                                        ; func body size (guess)
000283c: 00                                        ; local decl count
000283d: fd                                        ; prefix
000283e: 02                                        ; v128.const
000283f: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
000284f: fd                                        ; prefix
0002850: 02                                        ; v128.const
0002851: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002861: fd                                        ; prefix
0002862: 31                                        ; i32x4.gt_u
0002863: 1a                                        ; drop
0002864: 0b                                        ; end
000283b: 29                                        ; FIXUP func body size
; function body 236
0002865: 00                                        ; func body size (guess)
0002866: 00                                        ; local decl count
0002867: fd                                        ; prefix
0002868: 02                                        ; v128.const
0002869: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002879: fd                                        ; prefix
000287a: 02                                        ; v128.const
000287b: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
000288b: fd                                        ; prefix
000288c: 32                                        ; i32x4.le_s
000288d: 1a                                        ; drop
000288e: 0b                                        ; end
0002865: 29                                        ; FIXUP func body size
; function body 237
000288f: 00                                        ; func body size (guess)
0002890: 00                                        ; local decl count
0002891: fd                                        ; prefix
0002892: 02                                        ; v128.const
0002893: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00028a3: fd                                        ; prefix
00028a4: 02                                        ; v128.const
00028a5: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
00028b5: fd                                        ; prefix
00028b6: 33                                        ; i32x4.le_u
00028b7: 1a                                        ; drop
00028b8: 0b                                        ; end
000288f: 29                                        ; FIXUP func body size
; function body 238
00028b9: 00                                        ; func body size (guess)
00028ba: 00                                        ; local decl count
00028bb: fd                                        ; prefix
00028bc: 02                                        ; v128.const
00028bd: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00028cd: fd                                        ; prefix
00028ce: 02                                        ; v128.const
00028cf: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
00028df: fd                                        ; prefix
00028e0: 34                                        ; i32x4.ge_s
00028e1: 1a                                        ; drop
00028e2: 0b                                        ; end
00028b9: 29                                        ; FIXUP func body size
; function body 239
00028e3: 00                                        ; func body size (guess)
00028e4: 00                                        ; local decl count
00028e5: fd                                        ; prefix
00028e6: 02                                        ; v128.const
00028e7: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00028f7: fd                                        ; prefix
00028f8: 02                                        ; v128.const
00028f9: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002909: fd                                        ; prefix
000290a: 35                                        ; i32x4.ge_u
000290b: 1a                                        ; drop
000290c: 0b                                        ; end
00028e3: 29                                        ; FIXUP func body size
; function body 240
000290d: 00                                        ; func body size (guess)
000290e: 00                                        ; local decl count
000290f: fd                                        ; prefix
0002910: 02                                        ; v128.const
0002911: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002921: fd                                        ; prefix
0002922: 02                                        ; v128.const
0002923: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002933: fd                                        ; prefix
0002934: 40                                        ; f32x4.eq
0002935: 1a                                        ; drop
0002936: 0b                                        ; end
000290d: 29                                        ; FIXUP func body size
; function body 241
0002937: 00                                        ; func body size (guess)
0002938: 00                                        ; local decl count
0002939: fd                                        ; prefix
000293a: 02                                        ; v128.const
000293b: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
000294b: fd                                        ; prefix
000294c: 02                                        ; v128.const
000294d: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
000295d: fd                                        ; prefix
000295e: 41                                        ; f32x4.ne
000295f: 1a                                        ; drop
0002960: 0b                                        ; end
0002937: 29                                        ; FIXUP func body size
; function body 242
0002961: 00                                        ; func body size (guess)
0002962: 00                                        ; local decl count
0002963: fd                                        ; prefix
0002964: 02                                        ; v128.const
0002965: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002975: fd                                        ; prefix
0002976: 02                                        ; v128.const
0002977: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002987: fd                                        ; prefix
0002988: 42                                        ; f32x4.lt
0002989: 1a                                        ; drop
000298a: 0b                                        ; end
0002961: 29                                        ; FIXUP func body size
; function body 243
000298b: 00                                        ; func body size (guess)
000298c: 00                                        ; local decl count
000298d: fd                                        ; prefix
000298e: 02                                        ; v128.const
000298f: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
000299f: fd                                        ; prefix
00029a0: 02                                        ; v128.const
00029a1: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
00029b1: fd                                        ; prefix
00029b2: 43                                        ; f32x4.gt
00029b3: 1a                                        ; drop
00029b4: 0b                                        ; end
000298b: 29                                        ; FIXUP func body size
; function body 244
00029b5: 00                                        ; func body size (guess)
00029b6: 00                                        ; local decl count
00029b7: fd                                        ; prefix
00029b8: 02                                        ; v128.const
00029b9: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00029c9: fd                                        ; prefix
00029ca: 02                                        ; v128.const
00029cb: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
00029db: fd                                        ; prefix
00029dc: 44                                        ; f32x4.le
00029dd: 1a                                        ; drop
00029de: 0b                                        ; end
00029b5: 29                                        ; FIXUP func body size
; function body 245
00029df: 00                                        ; func body size (guess)
00029e0: 00                                        ; local decl count
00029e1: fd                                        ; prefix
00029e2: 02                                        ; v128.const
00029e3: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00029f3: fd                                        ; prefix
00029f4: 02                                        ; v128.const
00029f5: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002a05: fd                                        ; prefix
0002a06: 45                                        ; f32x4.ge
0002a07: 1a                                        ; drop
0002a08: 0b                                        ; end
00029df: 29                                        ; FIXUP func body size
; function body 246
0002a09: 00                                        ; func body size (guess)
0002a0a: 00                                        ; local decl count
0002a0b: fd                                        ; prefix
0002a0c: 02                                        ; v128.const
0002a0d: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002a1d: fd                                        ; prefix
0002a1e: 02                                        ; v128.const
0002a1f: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002a2f: fd                                        ; prefix
0002a30: 46                                        ; f64x2.eq
0002a31: 1a                                        ; drop
0002a32: 0b                                        ; end
0002a09: 29                                        ; FIXUP func body size
; function body 247
0002a33: 00                                        ; func body size (guess)
0002a34: 00                                        ; local decl count
0002a35: fd                                        ; prefix
0002a36: 02                                        ; v128.const
0002a37: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002a47: fd                                        ; prefix
0002a48: 02                                        ; v128.const
0002a49: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002a59: fd                                        ; prefix
0002a5a: 47                                        ; f64x2.ne
0002a5b: 1a                                        ; drop
0002a5c: 0b                                        ; end
0002a33: 29                                        ; FIXUP func body size
; function body 248
0002a5d: 00                                        ; func body size (guess)
0002a5e: 00                                        ; local decl count
0002a5f: fd                                        ; prefix
0002a60: 02                                        ; v128.const
0002a61: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002a71: fd                                        ; prefix
0002a72: 02                                        ; v128.const
0002a73: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002a83: fd                                        ; prefix
0002a84: 48                                        ; f64x2.lt
0002a85: 1a                                        ; drop
0002a86: 0b                                        ; end
0002a5d: 29                                        ; FIXUP func body size
; function body 249
0002a87: 00                                        ; func body size (guess)
0002a88: 00                                        ; local decl count
0002a89: fd                                        ; prefix
0002a8a: 02                                        ; v128.const
0002a8b: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002a9b: fd                                        ; prefix
0002a9c: 02                                        ; v128.const
0002a9d: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002aad: fd                                        ; prefix
0002aae: 49                                        ; f64x2.gt
0002aaf: 1a                                        ; drop
0002ab0: 0b                                        ; end
0002a87: 29                                        ; FIXUP func body size
; function body 250
0002ab1: 00                                        ; func body size (guess)
0002ab2: 00                                        ; local decl count
0002ab3: fd                                        ; prefix
0002ab4: 02                                        ; v128.const
0002ab5: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002ac5: fd                                        ; prefix
0002ac6: 02                                        ; v128.const
0002ac7: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002ad7: fd                                        ; prefix
0002ad8: 4a                                        ; f64x2.le
0002ad9: 1a                                        ; drop
0002ada: 0b                                        ; end
0002ab1: 29                                        ; FIXUP func body size
; function body 251
0002adb: 00                                        ; func body size (guess)
0002adc: 00                                        ; local decl count
0002add: fd                                        ; prefix
0002ade: 02                                        ; v128.const
0002adf: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002aef: fd                                        ; prefix
0002af0: 02                                        ; v128.const
0002af1: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002b01: fd                                        ; prefix
0002b02: 4b                                        ; f64x2.ge
0002b03: 1a                                        ; drop
0002b04: 0b                                        ; end
0002adb: 29                                        ; FIXUP func body size
; function body 252
0002b05: 00                                        ; func body size (guess)
0002b06: 00                                        ; local decl count
0002b07: fd                                        ; prefix
0002b08: 02                                        ; v128.const
0002b09: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002b19: fd                                        ; prefix
0002b1a: 4c                                        ; v128.not
0002b1b: 1a                                        ; drop
0002b1c: 0b                                        ; end
0002b05: 17                                        ; FIXUP func body size
; function body 253
0002b1d: 00                                        ; func body size (guess)
0002b1e: 00                                        ; local decl count
0002b1f: fd                                        ; prefix
0002b20: 02                                        ; v128.const
0002b21: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002b31: fd                                        ; prefix
0002b32: 02                                        ; v128.const
0002b33: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002b43: fd                                        ; prefix
0002b44: 4d                                        ; v128.and
0002b45: 1a                                        ; drop
0002b46: 0b                                        ; end
0002b1d: 29                                        ; FIXUP func body size
; function body 254
0002b47: 00                                        ; func body size (guess)
0002b48: 00                                        ; local decl count
0002b49: fd                                        ; prefix
0002b4a: 02                                        ; v128.const
0002b4b: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002b5b: fd                                        ; prefix
0002b5c: 02                                        ; v128.const
0002b5d: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002b6d: fd                                        ; prefix
0002b6e: 4e                                        ; v128.or
0002b6f: 1a                                        ; drop
0002b70: 0b                                        ; end
0002b47: 29                                        ; FIXUP func body size
; function body 255
0002b71: 00                                        ; func body size (guess)
0002b72: 00                                        ; local decl count
0002b73: fd                                        ; prefix
0002b74: 02                                        ; v128.const
0002b75: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002b85: fd                                        ; prefix
0002b86: 02                                        ; v128.const
0002b87: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002b97: fd                                        ; prefix
0002b98: 4f                                        ; v128.xor
0002b99: 1a                                        ; drop
0002b9a: 0b                                        ; end
0002b71: 29                                        ; FIXUP func body size
; function body 256
0002b9b: 00                                        ; func body size (guess)
0002b9c: 00                                        ; local decl count
0002b9d: fd                                        ; prefix
0002b9e: 02                                        ; v128.const
0002b9f: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002baf: fd                                        ; prefix
0002bb0: 02                                        ; v128.const
0002bb1: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002bc1: fd                                        ; prefix
0002bc2: 02                                        ; v128.const
0002bc3: 0300 0000 0300 0000 0300 0000 0300 0000   ; v128 literal
0002bd3: fd                                        ; prefix
0002bd4: 50                                        ; v128.bitselect
0002bd5: 1a                                        ; drop
0002bd6: 0b                                        ; end
0002b9b: 3b                                        ; FIXUP func body size
; function body 257
0002bd7: 00                                        ; func body size (guess)
0002bd8: 00                                        ; local decl count
0002bd9: fd                                        ; prefix
0002bda: 02                                        ; v128.const
0002bdb: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002beb: fd                                        ; prefix
0002bec: 51                                        ; i8x16.neg
0002bed: 1a                                        ; drop
0002bee: 0b                                        ; end
0002bd7: 17                                        ; FIXUP func body size
; function body 258
0002bef: 00                                        ; func body size (guess)
0002bf0: 00                                        ; local decl count
0002bf1: fd                                        ; prefix
0002bf2: 02                                        ; v128.const
0002bf3: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002c03: fd                                        ; prefix
0002c04: 52                                        ; i8x16.any_true
0002c05: 1a                                        ; drop
0002c06: 0b                                        ; end
0002bef: 17                                        ; FIXUP func body size
; function body 259
0002c07: 00                                        ; func body size (guess)
0002c08: 00                                        ; local decl count
0002c09: fd                                        ; prefix
0002c0a: 02                                        ; v128.const
0002c0b: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002c1b: fd                                        ; prefix
0002c1c: 53                                        ; i8x16.all_true
0002c1d: 1a                                        ; drop
0002c1e: 0b                                        ; end
0002c07: 17                                        ; FIXUP func body size
; function body 260
0002c1f: 00                                        ; func body size (guess)
0002c20: 00                                        ; local decl count
0002c21: fd                                        ; prefix
0002c22: 02                                        ; v128.const
0002c23: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002c33: 41                                        ; i32.const
0002c34: 00                                        ; i32 literal
0002c35: fd                                        ; prefix
0002c36: 54                                        ; i8x16.shl
0002c37: 1a                                        ; drop
0002c38: 0b                                        ; end
0002c1f: 19                                        ; FIXUP func body size
; function body 261
0002c39: 00                                        ; func body size (guess)
0002c3a: 00                                        ; local decl count
0002c3b: fd                                        ; prefix
0002c3c: 02                                        ; v128.const
0002c3d: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002c4d: 41                                        ; i32.const
0002c4e: 00                                        ; i32 literal
0002c4f: fd                                        ; prefix
0002c50: 55                                        ; i8x16.shr_s
0002c51: 1a                                        ; drop
0002c52: 0b                                        ; end
0002c39: 19                                        ; FIXUP func body size
; function body 262
0002c53: 00                                        ; func body size (guess)
0002c54: 00                                        ; local decl count
0002c55: fd                                        ; prefix
0002c56: 02                                        ; v128.const
0002c57: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002c67: 41                                        ; i32.const
0002c68: 00                                        ; i32 literal
0002c69: fd                                        ; prefix
0002c6a: 56                                        ; i8x16.shr_u
0002c6b: 1a                                        ; drop
0002c6c: 0b                                        ; end
0002c53: 19                                        ; FIXUP func body size
; function body 263
0002c6d: 00                                        ; func body size (guess)
0002c6e: 00                                        ; local decl count
0002c6f: fd                                        ; prefix
0002c70: 02                                        ; v128.const
0002c71: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002c81: fd                                        ; prefix
0002c82: 02                                        ; v128.const
0002c83: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002c93: fd                                        ; prefix
0002c94: 57                                        ; i8x16.add
0002c95: 1a                                        ; drop
0002c96: 0b                                        ; end
0002c6d: 29                                        ; FIXUP func body size
; function body 264
0002c97: 00                                        ; func body size (guess)
0002c98: 00                                        ; local decl count
0002c99: fd                                        ; prefix
0002c9a: 02                                        ; v128.const
0002c9b: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002cab: fd                                        ; prefix
0002cac: 02                                        ; v128.const
0002cad: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002cbd: fd                                        ; prefix
0002cbe: 58                                        ; i8x16.add_saturate_s
0002cbf: 1a                                        ; drop
0002cc0: 0b                                        ; end
0002c97: 29                                        ; FIXUP func body size
; function body 265
0002cc1: 00                                        ; func body size (guess)
0002cc2: 00                                        ; local decl count
0002cc3: fd                                        ; prefix
0002cc4: 02                                        ; v128.const
0002cc5: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002cd5: fd                                        ; prefix
0002cd6: 02                                        ; v128.const
0002cd7: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002ce7: fd                                        ; prefix
0002ce8: 59                                        ; i8x16.add_saturate_u
0002ce9: 1a                                        ; drop
0002cea: 0b                                        ; end
0002cc1: 29                                        ; FIXUP func body size
; function body 266
0002ceb: 00                                        ; func body size (guess)
0002cec: 00                                        ; local decl count
0002ced: fd                                        ; prefix
0002cee: 02                                        ; v128.const
0002cef: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002cff: fd                                        ; prefix
0002d00: 02                                        ; v128.const
0002d01: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002d11: fd                                        ; prefix
0002d12: 5a                                        ; i8x16.sub
0002d13: 1a                                        ; drop
0002d14: 0b                                        ; end
0002ceb: 29                                        ; FIXUP func body size
; function body 267
0002d15: 00                                        ; func body size (guess)
0002d16: 00                                        ; local decl count
0002d17: fd                                        ; prefix
0002d18: 02                                        ; v128.const
0002d19: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002d29: fd                                        ; prefix
0002d2a: 02                                        ; v128.const
0002d2b: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002d3b: fd                                        ; prefix
0002d3c: 5b                                        ; i8x16.sub_saturate_s
0002d3d: 1a                                        ; drop
0002d3e: 0b                                        ; end
0002d15: 29                                        ; FIXUP func body size
; function body 268
0002d3f: 00                                        ; func body size (guess)
0002d40: 00                                        ; local decl count
0002d41: fd                                        ; prefix
0002d42: 02                                        ; v128.const
0002d43: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002d53: fd                                        ; prefix
0002d54: 02                                        ; v128.const
0002d55: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002d65: fd                                        ; prefix
0002d66: 5c                                        ; i8x16.sub_saturate_u
0002d67: 1a                                        ; drop
0002d68: 0b                                        ; end
0002d3f: 29                                        ; FIXUP func body size
; function body 269
0002d69: 00                                        ; func body size (guess)
0002d6a: 00                                        ; local decl count
0002d6b: fd                                        ; prefix
0002d6c: 02                                        ; v128.const
0002d6d: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002d7d: fd                                        ; prefix
0002d7e: 02                                        ; v128.const
0002d7f: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002d8f: fd                                        ; prefix
0002d90: 5d                                        ; i8x16.mul
0002d91: 1a                                        ; drop
0002d92: 0b                                        ; end
0002d69: 29                                        ; FIXUP func body size
; function body 270
0002d93: 00                                        ; func body size (guess)
0002d94: 00                                        ; local decl count
0002d95: fd                                        ; prefix
0002d96: 02                                        ; v128.const
0002d97: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002da7: fd                                        ; prefix
0002da8: 62                                        ; i16x8.neg
0002da9: 1a                                        ; drop
0002daa: 0b                                        ; end
0002d93: 17                                        ; FIXUP func body size
; function body 271
0002dab: 00                                        ; func body size (guess)
0002dac: 00                                        ; local decl count
0002dad: fd                                        ; prefix
0002dae: 02                                        ; v128.const
0002daf: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002dbf: fd                                        ; prefix
0002dc0: 63                                        ; i16x8.any_true
0002dc1: 1a                                        ; drop
0002dc2: 0b                                        ; end
0002dab: 17                                        ; FIXUP func body size
; function body 272
0002dc3: 00                                        ; func body size (guess)
0002dc4: 00                                        ; local decl count
0002dc5: fd                                        ; prefix
0002dc6: 02                                        ; v128.const
0002dc7: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002dd7: fd                                        ; prefix
0002dd8: 64                                        ; i16x8.all_true
0002dd9: 1a                                        ; drop
0002dda: 0b                                        ; end
0002dc3: 17                                        ; FIXUP func body size
; function body 273
0002ddb: 00                                        ; func body size (guess)
0002ddc: 00                                        ; local decl count
0002ddd: fd                                        ; prefix
0002dde: 02                                        ; v128.const
0002ddf: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002def: 41                                        ; i32.const
0002df0: 00                                        ; i32 literal
0002df1: fd                                        ; prefix
0002df2: 65                                        ; i16x8.shl
0002df3: 1a                                        ; drop
0002df4: 0b                                        ; end
0002ddb: 19                                        ; FIXUP func body size
; function body 274
0002df5: 00                                        ; func body size (guess)
0002df6: 00                                        ; local decl count
0002df7: fd                                        ; prefix
0002df8: 02                                        ; v128.const
0002df9: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002e09: 41                                        ; i32.const
0002e0a: 00                                        ; i32 literal
0002e0b: fd                                        ; prefix
0002e0c: 66                                        ; i16x8.shr_s
0002e0d: 1a                                        ; drop
0002e0e: 0b                                        ; end
0002df5: 19                                        ; FIXUP func body size
; function body 275
0002e0f: 00                                        ; func body size (guess)
0002e10: 00                                        ; local decl count
0002e11: fd                                        ; prefix
0002e12: 02                                        ; v128.const
0002e13: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002e23: 41                                        ; i32.const
0002e24: 00                                        ; i32 literal
0002e25: fd                                        ; prefix
0002e26: 67                                        ; i16x8.shr_u
0002e27: 1a                                        ; drop
0002e28: 0b                                        ; end
0002e0f: 19                                        ; FIXUP func body size
; function body 276
0002e29: 00                                        ; func body size (guess)
0002e2a: 00                                        ; local decl count
0002e2b: fd                                        ; prefix
0002e2c: 02                                        ; v128.const
0002e2d: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002e3d: fd                                        ; prefix
0002e3e: 02                                        ; v128.const
0002e3f: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002e4f: fd                                        ; prefix
0002e50: 68                                        ; i16x8.add
0002e51: 1a                                        ; drop
0002e52: 0b                                        ; end
0002e29: 29                                        ; FIXUP func body size
; function body 277
0002e53: 00                                        ; func body size (guess)
0002e54: 00                                        ; local decl count
0002e55: fd                                        ; prefix
0002e56: 02                                        ; v128.const
0002e57: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002e67: fd                                        ; prefix
0002e68: 02                                        ; v128.const
0002e69: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002e79: fd                                        ; prefix
0002e7a: 69                                        ; i16x8.add_saturate_s
0002e7b: 1a                                        ; drop
0002e7c: 0b                                        ; end
0002e53: 29                                        ; FIXUP func body size
; function body 278
0002e7d: 00                                        ; func body size (guess)
0002e7e: 00                                        ; local decl count
0002e7f: fd                                        ; prefix
0002e80: 02                                        ; v128.const
0002e81: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002e91: fd                                        ; prefix
0002e92: 02                                        ; v128.const
0002e93: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002ea3: fd                                        ; prefix
0002ea4: 6a                                        ; i16x8.add_saturate_u
0002ea5: 1a                                        ; drop
0002ea6: 0b                                        ; end
0002e7d: 29                                        ; FIXUP func body size
; function body 279
0002ea7: 00                                        ; func body size (guess)
0002ea8: 00                                        ; local decl count
0002ea9: fd                                        ; prefix
0002eaa: 02                                        ; v128.const
0002eab: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002ebb: fd                                        ; prefix
0002ebc: 02                                        ; v128.const
0002ebd: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002ecd: fd                                        ; prefix
0002ece: 6b                                        ; i16x8.sub
0002ecf: 1a                                        ; drop
0002ed0: 0b                                        ; end
0002ea7: 29                                        ; FIXUP func body size
; function body 280
0002ed1: 00                                        ; func body size (guess)
0002ed2: 00                                        ; local decl count
0002ed3: fd                                        ; prefix
0002ed4: 02                                        ; v128.const
0002ed5: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002ee5: fd                                        ; prefix
0002ee6: 02                                        ; v128.const
0002ee7: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002ef7: fd                                        ; prefix
0002ef8: 6c                                        ; i16x8.sub_saturate_s
0002ef9: 1a                                        ; drop
0002efa: 0b                                        ; end
0002ed1: 29                                        ; FIXUP func body size
; function body 281
0002efb: 00                                        ; func body size (guess)
0002efc: 00                                        ; local decl count
0002efd: fd                                        ; prefix
0002efe: 02                                        ; v128.const
0002eff: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002f0f: fd                                        ; prefix
0002f10: 02                                        ; v128.const
0002f11: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002f21: fd                                        ; prefix
0002f22: 6d                                        ; i16x8.sub_saturate_u
0002f23: 1a                                        ; drop
0002f24: 0b                                        ; end
0002efb: 29                                        ; FIXUP func body size
; function body 282
0002f25: 00                                        ; func body size (guess)
0002f26: 00                                        ; local decl count
0002f27: fd                                        ; prefix
0002f28: 02                                        ; v128.const
0002f29: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002f39: fd                                        ; prefix
0002f3a: 02                                        ; v128.const
0002f3b: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0002f4b: fd                                        ; prefix
0002f4c: 6e                                        ; i16x8.mul
0002f4d: 1a                                        ; drop
0002f4e: 0b                                        ; end
0002f25: 29                                        ; FIXUP func body size
; function body 283
0002f4f: 00                                        ; func body size (guess)
0002f50: 00                                        ; local decl count
0002f51: fd                                        ; prefix
0002f52: 02                                        ; v128.const
0002f53: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002f63: fd                                        ; prefix
0002f64: 73                                        ; i32x4.neg
0002f65: 1a                                        ; drop
0002f66: 0b                                        ; end
0002f4f: 17                                        ; FIXUP func body size
; function body 284
0002f67: 00                                        ; func body size (guess)
0002f68: 00                                        ; local decl count
0002f69: fd                                        ; prefix
0002f6a: 02                                        ; v128.const
0002f6b: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002f7b: fd                                        ; prefix
0002f7c: 74                                        ; i32x4.any_true
0002f7d: 1a                                        ; drop
0002f7e: 0b                                        ; end
0002f67: 17                                        ; FIXUP func body size
; function body 285
0002f7f: 00                                        ; func body size (guess)
0002f80: 00                                        ; local decl count
0002f81: fd                                        ; prefix
0002f82: 02                                        ; v128.const
0002f83: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002f93: fd                                        ; prefix
0002f94: 75                                        ; i32x4.all_true
0002f95: 1a                                        ; drop
0002f96: 0b                                        ; end
0002f7f: 17                                        ; FIXUP func body size
; function body 286
0002f97: 00                                        ; func body size (guess)
0002f98: 00                                        ; local decl count
0002f99: fd                                        ; prefix
0002f9a: 02                                        ; v128.const
0002f9b: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002fab: 41                                        ; i32.const
0002fac: 00                                        ; i32 literal
0002fad: fd                                        ; prefix
0002fae: 76                                        ; i32x4.shl
0002faf: 1a                                        ; drop
0002fb0: 0b                                        ; end
0002f97: 19                                        ; FIXUP func body size
; function body 287
0002fb1: 00                                        ; func body size (guess)
0002fb2: 00                                        ; local decl count
0002fb3: fd                                        ; prefix
0002fb4: 02                                        ; v128.const
0002fb5: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002fc5: 41                                        ; i32.const
0002fc6: 00                                        ; i32 literal
0002fc7: fd                                        ; prefix
0002fc8: 77                                        ; i32x4.shr_s
0002fc9: 1a                                        ; drop
0002fca: 0b                                        ; end
0002fb1: 19                                        ; FIXUP func body size
; function body 288
0002fcb: 00                                        ; func body size (guess)
0002fcc: 00                                        ; local decl count
0002fcd: fd                                        ; prefix
0002fce: 02                                        ; v128.const
0002fcf: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002fdf: 41                                        ; i32.const
0002fe0: 00                                        ; i32 literal
0002fe1: fd                                        ; prefix
0002fe2: 78                                        ; i32x4.shr_u
0002fe3: 1a                                        ; drop
0002fe4: 0b                                        ; end
0002fcb: 19                                        ; FIXUP func body size
; function body 289
0002fe5: 00                                        ; func body size (guess)
0002fe6: 00                                        ; local decl count
0002fe7: fd                                        ; prefix
0002fe8: 02                                        ; v128.const
0002fe9: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0002ff9: fd                                        ; prefix
0002ffa: 02                                        ; v128.const
0002ffb: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
000300b: fd                                        ; prefix
000300c: 79                                        ; i32x4.add
000300d: 1a                                        ; drop
000300e: 0b                                        ; end
0002fe5: 29                                        ; FIXUP func body size
; function body 290
000300f: 00                                        ; func body size (guess)
0003010: 00                                        ; local decl count
0003011: fd                                        ; prefix
0003012: 02                                        ; v128.const
0003013: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0003023: fd                                        ; prefix
0003024: 02                                        ; v128.const
0003025: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0003035: fd                                        ; prefix
0003036: 7c                                        ; i32x4.sub
0003037: 1a                                        ; drop
0003038: 0b                                        ; end
000300f: 29                                        ; FIXUP func body size
; function body 291
0003039: 00                                        ; func body size (guess)
000303a: 00                                        ; local decl count
000303b: fd                                        ; prefix
000303c: 02                                        ; v128.const
000303d: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
000304d: fd                                        ; prefix
000304e: 02                                        ; v128.const
000304f: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
000305f: fd                                        ; prefix
0003060: 7f                                        ; i32x4.mul
0003061: 1a                                        ; drop
0003062: 0b                                        ; end
0003039: 29                                        ; FIXUP func body size
; function body 292
0003063: 00                                        ; func body size (guess)
0003064: 00                                        ; local decl count
0003065: fd                                        ; prefix
0003066: 02                                        ; v128.const
0003067: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0003077: fd                                        ; prefix
0003078: 8401                                      ; i64x2.neg
000307a: 1a                                        ; drop
000307b: 0b                                        ; end
0003063: 18                                        ; FIXUP func body size
; function body 293
000307c: 00                                        ; func body size (guess)
000307d: 00                                        ; local decl count
000307e: fd                                        ; prefix
000307f: 02                                        ; v128.const
0003080: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0003090: fd                                        ; prefix
0003091: 8501                                      ; i64x2.any_true
0003093: 1a                                        ; drop
0003094: 0b                                        ; end
000307c: 18                                        ; FIXUP func body size
; function body 294
0003095: 00                                        ; func body size (guess)
0003096: 00                                        ; local decl count
0003097: fd                                        ; prefix
0003098: 02                                        ; v128.const
0003099: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00030a9: fd                                        ; prefix
00030aa: 8601                                      ; i64x2.all_true
00030ac: 1a                                        ; drop
00030ad: 0b                                        ; end
0003095: 18                                        ; FIXUP func body size
; function body 295
00030ae: 00                                        ; func body size (guess)
00030af: 00                                        ; local decl count
00030b0: fd                                        ; prefix
00030b1: 02                                        ; v128.const
00030b2: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00030c2: 41                                        ; i32.const
00030c3: 00                                        ; i32 literal
00030c4: fd                                        ; prefix
00030c5: 8701                                      ; i64x2.shl
00030c7: 1a                                        ; drop
00030c8: 0b                                        ; end
00030ae: 1a                                        ; FIXUP func body size
; function body 296
00030c9: 00                                        ; func body size (guess)
00030ca: 00                                        ; local decl count
00030cb: fd                                        ; prefix
00030cc: 02                                        ; v128.const
00030cd: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00030dd: 41                                        ; i32.const
00030de: 00                                        ; i32 literal
00030df: fd                                        ; prefix
00030e0: 8801                                      ; i64x2.shr_s
00030e2: 1a                                        ; drop
00030e3: 0b                                        ; end
00030c9: 1a                                        ; FIXUP func body size
; function body 297
00030e4: 00                                        ; func body size (guess)
00030e5: 00                                        ; local decl count
00030e6: fd                                        ; prefix
00030e7: 02                                        ; v128.const
00030e8: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00030f8: 41                                        ; i32.const
00030f9: 00                                        ; i32 literal
00030fa: fd                                        ; prefix
00030fb: 8901                                      ; i64x2.shr_u
00030fd: 1a                                        ; drop
00030fe: 0b                                        ; end
00030e4: 1a                                        ; FIXUP func body size
; function body 298
00030ff: 00                                        ; func body size (guess)
0003100: 00                                        ; local decl count
0003101: fd                                        ; prefix
0003102: 02                                        ; v128.const
0003103: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0003113: fd                                        ; prefix
0003114: 02                                        ; v128.const
0003115: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0003125: fd                                        ; prefix
0003126: 8a01                                      ; i64x2.add
0003128: 1a                                        ; drop
0003129: 0b                                        ; end
00030ff: 2a                                        ; FIXUP func body size
; function body 299
000312a: 00                                        ; func body size (guess)
000312b: 00                                        ; local decl count
000312c: fd                                        ; prefix
000312d: 02                                        ; v128.const
000312e: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
000313e: fd                                        ; prefix
000313f: 02                                        ; v128.const
0003140: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0003150: fd                                        ; prefix
0003151: 8d01                                      ; i64x2.sub
0003153: 1a                                        ; drop
0003154: 0b                                        ; end
000312a: 2a                                        ; FIXUP func body size
; function body 300
0003155: 00                                        ; func body size (guess)
0003156: 00                                        ; local decl count
0003157: fd                                        ; prefix
0003158: 02                                        ; v128.const
0003159: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0003169: fd                                        ; prefix
000316a: 9501                                      ; f32x4.abs
000316c: 1a                                        ; drop
000316d: 0b                                        ; end
0003155: 18                                        ; FIXUP func body size
; function body 301
000316e: 00                                        ; func body size (guess)
000316f: 00                                        ; local decl count
0003170: fd                                        ; prefix
0003171: 02                                        ; v128.const
0003172: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0003182: fd                                        ; prefix
0003183: 9601                                      ; f32x4.neg
0003185: 1a                                        ; drop
0003186: 0b                                        ; end
000316e: 18                                        ; FIXUP func body size
; function body 302
0003187: 00                                        ; func body size (guess)
0003188: 00                                        ; local decl count
0003189: fd                                        ; prefix
000318a: 02                                        ; v128.const
000318b: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
000319b: fd                                        ; prefix
000319c: 9701                                      ; f32x4.sqrt
000319e: 1a                                        ; drop
000319f: 0b                                        ; end
0003187: 18                                        ; FIXUP func body size
; function body 303
00031a0: 00                                        ; func body size (guess)
00031a1: 00                                        ; local decl count
00031a2: fd                                        ; prefix
00031a3: 02                                        ; v128.const
00031a4: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00031b4: fd                                        ; prefix
00031b5: 02                                        ; v128.const
00031b6: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
00031c6: fd                                        ; prefix
00031c7: 9a01                                      ; f32x4.add
00031c9: 1a                                        ; drop
00031ca: 0b                                        ; end
00031a0: 2a                                        ; FIXUP func body size
; function body 304
00031cb: 00                                        ; func body size (guess)
00031cc: 00                                        ; local decl count
00031cd: fd                                        ; prefix
00031ce: 02                                        ; v128.const
00031cf: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00031df: fd                                        ; prefix
00031e0: 02                                        ; v128.const
00031e1: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
00031f1: fd                                        ; prefix
00031f2: 9b01                                      ; f32x4.sub
00031f4: 1a                                        ; drop
00031f5: 0b                                        ; end
00031cb: 2a                                        ; FIXUP func body size
; function body 305
00031f6: 00                                        ; func body size (guess)
00031f7: 00                                        ; local decl count
00031f8: fd                                        ; prefix
00031f9: 02                                        ; v128.const
00031fa: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
000320a: fd                                        ; prefix
000320b: 02                                        ; v128.const
000320c: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
000321c: fd                                        ; prefix
000321d: 9c01                                      ; f32x4.mul
000321f: 1a                                        ; drop
0003220: 0b                                        ; end
00031f6: 2a                                        ; FIXUP func body size
; function body 306
0003221: 00                                        ; func body size (guess)
0003222: 00                                        ; local decl count
0003223: fd                                        ; prefix
0003224: 02                                        ; v128.const
0003225: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0003235: fd                                        ; prefix
0003236: 02                                        ; v128.const
0003237: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0003247: fd                                        ; prefix
0003248: 9d01                                      ; f32x4.div
000324a: 1a                                        ; drop
000324b: 0b                                        ; end
0003221: 2a                                        ; FIXUP func body size
; function body 307
000324c: 00                                        ; func body size (guess)
000324d: 00                                        ; local decl count
000324e: fd                                        ; prefix
000324f: 02                                        ; v128.const
0003250: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0003260: fd                                        ; prefix
0003261: 02                                        ; v128.const
0003262: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0003272: fd                                        ; prefix
0003273: 9e01                                      ; f32x4.min
0003275: 1a                                        ; drop
0003276: 0b                                        ; end
000324c: 2a                                        ; FIXUP func body size
; function body 308
0003277: 00                                        ; func body size (guess)
0003278: 00                                        ; local decl count
0003279: fd                                        ; prefix
000327a: 02                                        ; v128.const
000327b: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
000328b: fd                                        ; prefix
000328c: 02                                        ; v128.const
000328d: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
000329d: fd                                        ; prefix
000329e: 9f01                                      ; f32x4.max
00032a0: 1a                                        ; drop
00032a1: 0b                                        ; end
0003277: 2a                                        ; FIXUP func body size
; function body 309
00032a2: 00                                        ; func body size (guess)
00032a3: 00                                        ; local decl count
00032a4: fd                                        ; prefix
00032a5: 02                                        ; v128.const
00032a6: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00032b6: fd                                        ; prefix
00032b7: a001                                      ; f64x2.abs
00032b9: 1a                                        ; drop
00032ba: 0b                                        ; end
00032a2: 18                                        ; FIXUP func body size
; function body 310
00032bb: 00                                        ; func body size (guess)
00032bc: 00                                        ; local decl count
00032bd: fd                                        ; prefix
00032be: 02                                        ; v128.const
00032bf: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00032cf: fd                                        ; prefix
00032d0: a101                                      ; f64x2.neg
00032d2: 1a                                        ; drop
00032d3: 0b                                        ; end
00032bb: 18                                        ; FIXUP func body size
; function body 311
00032d4: 00                                        ; func body size (guess)
00032d5: 00                                        ; local decl count
00032d6: fd                                        ; prefix
00032d7: 02                                        ; v128.const
00032d8: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00032e8: fd                                        ; prefix
00032e9: a201                                      ; f64x2.sqrt
00032eb: 1a                                        ; drop
00032ec: 0b                                        ; end
00032d4: 18                                        ; FIXUP func body size
; function body 312
00032ed: 00                                        ; func body size (guess)
00032ee: 00                                        ; local decl count
00032ef: fd                                        ; prefix
00032f0: 02                                        ; v128.const
00032f1: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0003301: fd                                        ; prefix
0003302: 02                                        ; v128.const
0003303: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0003313: fd                                        ; prefix
0003314: a501                                      ; f64x2.add
0003316: 1a                                        ; drop
0003317: 0b                                        ; end
00032ed: 2a                                        ; FIXUP func body size
; function body 313
0003318: 00                                        ; func body size (guess)
0003319: 00                                        ; local decl count
000331a: fd                                        ; prefix
000331b: 02                                        ; v128.const
000331c: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
000332c: fd                                        ; prefix
000332d: 02                                        ; v128.const
000332e: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
000333e: fd                                        ; prefix
000333f: a601                                      ; f64x2.sub
0003341: 1a                                        ; drop
0003342: 0b                                        ; end
0003318: 2a                                        ; FIXUP func body size
; function body 314
0003343: 00                                        ; func body size (guess)
0003344: 00                                        ; local decl count
0003345: fd                                        ; prefix
0003346: 02                                        ; v128.const
0003347: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0003357: fd                                        ; prefix
0003358: 02                                        ; v128.const
0003359: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0003369: fd                                        ; prefix
000336a: a701                                      ; f64x2.mul
000336c: 1a                                        ; drop
000336d: 0b                                        ; end
0003343: 2a                                        ; FIXUP func body size
; function body 315
000336e: 00                                        ; func body size (guess)
000336f: 00                                        ; local decl count
0003370: fd                                        ; prefix
0003371: 02                                        ; v128.const
0003372: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0003382: fd                                        ; prefix
0003383: 02                                        ; v128.const
0003384: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
0003394: fd                                        ; prefix
0003395: a801                                      ; f64x2.div
0003397: 1a                                        ; drop
0003398: 0b                                        ; end
000336e: 2a                                        ; FIXUP func body size
; function body 316
0003399: 00                                        ; func body size (guess)
000339a: 00                                        ; local decl count
000339b: fd                                        ; prefix
000339c: 02                                        ; v128.const
000339d: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00033ad: fd                                        ; prefix
00033ae: 02                                        ; v128.const
00033af: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
00033bf: fd                                        ; prefix
00033c0: a901                                      ; f64x2.min
00033c2: 1a                                        ; drop
00033c3: 0b                                        ; end
0003399: 2a                                        ; FIXUP func body size
; function body 317
00033c4: 00                                        ; func body size (guess)
00033c5: 00                                        ; local decl count
00033c6: fd                                        ; prefix
00033c7: 02                                        ; v128.const
00033c8: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00033d8: fd                                        ; prefix
00033d9: 02                                        ; v128.const
00033da: 0200 0000 0200 0000 0200 0000 0200 0000   ; v128 literal
00033ea: fd                                        ; prefix
00033eb: aa01                                      ; f64x2.max
00033ed: 1a                                        ; drop
00033ee: 0b                                        ; end
00033c4: 2a                                        ; FIXUP func body size
; function body 318
00033ef: 00                                        ; func body size (guess)
00033f0: 00                                        ; local decl count
00033f1: fd                                        ; prefix
00033f2: 02                                        ; v128.const
00033f3: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0003403: fd                                        ; prefix
0003404: ab01                                      ; i32x4.trunc_sat_f32x4_s
0003406: 1a                                        ; drop
0003407: 0b                                        ; end
00033ef: 18                                        ; FIXUP func body size
; function body 319
0003408: 00                                        ; func body size (guess)
0003409: 00                                        ; local decl count
000340a: fd                                        ; prefix
000340b: 02                                        ; v128.const
000340c: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
000341c: fd                                        ; prefix
000341d: ac01                                      ; i32x4.trunc_sat_f32x4_u
000341f: 1a                                        ; drop
0003420: 0b                                        ; end
0003408: 18                                        ; FIXUP func body size
; function body 320
0003421: 00                                        ; func body size (guess)
0003422: 00                                        ; local decl count
0003423: fd                                        ; prefix
0003424: 02                                        ; v128.const
0003425: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0003435: fd                                        ; prefix
0003436: ad01                                      ; i64x2.trunc_sat_f64x2_s
0003438: 1a                                        ; drop
0003439: 0b                                        ; end
0003421: 18                                        ; FIXUP func body size
; function body 321
000343a: 00                                        ; func body size (guess)
000343b: 00                                        ; local decl count
000343c: fd                                        ; prefix
000343d: 02                                        ; v128.const
000343e: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
000344e: fd                                        ; prefix
000344f: ae01                                      ; i64x2.trunc_sat_f64x2_u
0003451: 1a                                        ; drop
0003452: 0b                                        ; end
000343a: 18                                        ; FIXUP func body size
; function body 322
0003453: 00                                        ; func body size (guess)
0003454: 00                                        ; local decl count
0003455: fd                                        ; prefix
0003456: 02                                        ; v128.const
0003457: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0003467: fd                                        ; prefix
0003468: af01                                      ; f32x4.convert_i32x4_s
000346a: 1a                                        ; drop
000346b: 0b                                        ; end
0003453: 18                                        ; FIXUP func body size
; function body 323
000346c: 00                                        ; func body size (guess)
000346d: 00                                        ; local decl count
000346e: fd                                        ; prefix
000346f: 02                                        ; v128.const
0003470: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0003480: fd                                        ; prefix
0003481: b001                                      ; f32x4.convert_i32x4_u
0003483: 1a                                        ; drop
0003484: 0b                                        ; end
000346c: 18                                        ; FIXUP func body size
; function body 324
0003485: 00                                        ; func body size (guess)
0003486: 00                                        ; local decl count
0003487: fd                                        ; prefix
0003488: 02                                        ; v128.const
0003489: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
0003499: fd                                        ; prefix
000349a: b101                                      ; f64x2.convert_i64x2_s
000349c: 1a                                        ; drop
000349d: 0b                                        ; end
0003485: 18                                        ; FIXUP func body size
; function body 325
000349e: 00                                        ; func body size (guess)
000349f: 00                                        ; local decl count
00034a0: fd                                        ; prefix
00034a1: 02                                        ; v128.const
00034a2: 0100 0000 0100 0000 0100 0000 0100 0000   ; v128 literal
00034b2: fd                                        ; prefix
00034b3: b201                                      ; f64x2.convert_i64x2_u
00034b5: 1a                                        ; drop
00034b6: 0b                                        ; end
000349e: 18                                        ; FIXUP func body size
; function body 326
00034b7: 00                                        ; func body size (guess)
00034b8: 00                                        ; local decl count
00034b9: 41                                        ; i32.const
00034ba: 01                                        ; i32 literal
00034bb: 41                                        ; i32.const
00034bc: 02                                        ; i32 literal
00034bd: fe                                        ; prefix
00034be: 00                                        ; atomic.notify
00034bf: 02                                        ; alignment
00034c0: 03                                        ; memory offset
00034c1: 1a                                        ; drop
00034c2: 0b                                        ; end
00034b7: 0b                                        ; FIXUP func body size
; function body 327
00034c3: 00                                        ; func body size (guess)
00034c4: 00                                        ; local decl count
00034c5: 41                                        ; i32.const
00034c6: 01                                        ; i32 literal
00034c7: 41                                        ; i32.const
00034c8: 02                                        ; i32 literal
00034c9: 42                                        ; i64.const
00034ca: 03                                        ; i64 literal
00034cb: fe                                        ; prefix
00034cc: 01                                        ; i32.atomic.wait
00034cd: 02                                        ; alignment
00034ce: 03                                        ; memory offset
00034cf: 1a                                        ; drop
00034d0: 0b                                        ; end
00034c3: 0d                                        ; FIXUP func body size
; function body 328
00034d1: 00                                        ; func body size (guess)
00034d2: 00                                        ; local decl count
00034d3: 41                                        ; i32.const
00034d4: 01                                        ; i32 literal
00034d5: 42                                        ; i64.const
00034d6: 02                                        ; i64 literal
00034d7: 42                                        ; i64.const
00034d8: 03                                        ; i64 literal
00034d9: fe                                        ; prefix
00034da: 02                                        ; i64.atomic.wait
00034db: 03                                        ; alignment
00034dc: 03                                        ; memory offset
00034dd: 1a                                        ; drop
00034de: 0b                                        ; end
00034d1: 0d                                        ; FIXUP func body size
; function body 329
00034df: 00                                        ; func body size (guess)
00034e0: 00                                        ; local decl count
00034e1: 41                                        ; i32.const
00034e2: 01                                        ; i32 literal
00034e3: fe                                        ; prefix
00034e4: 10                                        ; i32.atomic.load
00034e5: 02                                        ; alignment
00034e6: 03                                        ; memory offset
00034e7: 1a                                        ; drop
00034e8: 0b                                        ; end
00034df: 09                                        ; FIXUP func body size
; function body 330
00034e9: 00                                        ; func body size (guess)
00034ea: 00                                        ; local decl count
00034eb: 41                                        ; i32.const
00034ec: 01                                        ; i32 literal
00034ed: fe                                        ; prefix
00034ee: 11                                        ; i64.atomic.load
00034ef: 03                                        ; alignment
00034f0: 07                                        ; memory offset
00034f1: 1a                                        ; drop
00034f2: 0b                                        ; end
00034e9: 09                                        ; FIXUP func body size
; function body 331
00034f3: 00                                        ; func body size (guess)
00034f4: 00                                        ; local decl count
00034f5: 41                                        ; i32.const
00034f6: 01                                        ; i32 literal
00034f7: fe                                        ; prefix
00034f8: 12                                        ; i32.atomic.load8_u
00034f9: 00                                        ; alignment
00034fa: 03                                        ; memory offset
00034fb: 1a                                        ; drop
00034fc: 0b                                        ; end
00034f3: 09                                        ; FIXUP func body size
; function body 332
00034fd: 00                                        ; func body size (guess)
00034fe: 00                                        ; local decl count
00034ff: 41                                        ; i32.const
0003500: 01                                        ; i32 literal
0003501: fe                                        ; prefix
0003502: 13                                        ; i32.atomic.load16_u
0003503: 01                                        ; alignment
0003504: 03                                        ; memory offset
0003505: 1a                                        ; drop
0003506: 0b                                        ; end
00034fd: 09                                        ; FIXUP func body size
; function body 333
0003507: 00                                        ; func body size (guess)
0003508: 00                                        ; local decl count
0003509: 41                                        ; i32.const
000350a: 01                                        ; i32 literal
000350b: fe                                        ; prefix
000350c: 14                                        ; i64.atomic.load8_u
000350d: 00                                        ; alignment
000350e: 03                                        ; memory offset
000350f: 1a                                        ; drop
0003510: 0b                                        ; end
0003507: 09                                        ; FIXUP func body size
; function body 334
0003511: 00                                        ; func body size (guess)
0003512: 00                                        ; local decl count
0003513: 41                                        ; i32.const
0003514: 01                                        ; i32 literal
0003515: fe                                        ; prefix
0003516: 15                                        ; i64.atomic.load16_u
0003517: 01                                        ; alignment
0003518: 03                                        ; memory offset
0003519: 1a                                        ; drop
000351a: 0b                                        ; end
0003511: 09                                        ; FIXUP func body size
; function body 335
000351b: 00                                        ; func body size (guess)
000351c: 00                                        ; local decl count
000351d: 41                                        ; i32.const
000351e: 01                                        ; i32 literal
000351f: fe                                        ; prefix
0003520: 16                                        ; i64.atomic.load32_u
0003521: 02                                        ; alignment
0003522: 03                                        ; memory offset
0003523: 1a                                        ; drop
0003524: 0b                                        ; end
000351b: 09                                        ; FIXUP func body size
; function body 336
0003525: 00                                        ; func body size (guess)
0003526: 00                                        ; local decl count
0003527: 41                                        ; i32.const
0003528: 01                                        ; i32 literal
0003529: 41                                        ; i32.const
000352a: 02                                        ; i32 literal
000352b: fe                                        ; prefix
000352c: 17                                        ; i32.atomic.store
000352d: 02                                        ; alignment
000352e: 03                                        ; memory offset
000352f: 0b                                        ; end
0003525: 0a                                        ; FIXUP func body size
; function body 337
0003530: 00                                        ; func body size (guess)
0003531: 00                                        ; local decl count
0003532: 41                                        ; i32.const
0003533: 01                                        ; i32 literal
0003534: 42                                        ; i64.const
0003535: 02                                        ; i64 literal
0003536: fe                                        ; prefix
0003537: 18                                        ; i64.atomic.store
0003538: 03                                        ; alignment
0003539: 07                                        ; memory offset
000353a: 0b                                        ; end
0003530: 0a                                        ; FIXUP func body size
; function body 338
000353b: 00                                        ; func body size (guess)
000353c: 00                                        ; local decl count
000353d: 41                                        ; i32.const
000353e: 01                                        ; i32 literal
000353f: 41                                        ; i32.const
0003540: 02                                        ; i32 literal
0003541: fe                                        ; prefix
0003542: 19                                        ; i32.atomic.store8
0003543: 00                                        ; alignment
0003544: 03                                        ; memory offset
0003545: 0b                                        ; end
000353b: 0a                                        ; FIXUP func body size
; function body 339
0003546: 00                                        ; func body size (guess)
0003547: 00                                        ; local decl count
0003548: 41                                        ; i32.const
0003549: 01                                        ; i32 literal
000354a: 41                                        ; i32.const
000354b: 02                                        ; i32 literal
000354c: fe                                        ; prefix
000354d: 1a                                        ; i32.atomic.store16
000354e: 01                                        ; alignment
000354f: 03                                        ; memory offset
0003550: 0b                                        ; end
0003546: 0a                                        ; FIXUP func body size
; function body 340
0003551: 00                                        ; func body size (guess)
0003552: 00                                        ; local decl count
0003553: 41                                        ; i32.const
0003554: 01                                        ; i32 literal
0003555: 42                                        ; i64.const
0003556: 02                                        ; i64 literal
0003557: fe                                        ; prefix
0003558: 1b                                        ; i64.atomic.store8
0003559: 00                                        ; alignment
000355a: 03                                        ; memory offset
000355b: 0b                                        ; end
0003551: 0a                                        ; FIXUP func body size
; function body 341
000355c: 00                                        ; func body size (guess)
000355d: 00                                        ; local decl count
000355e: 41                                        ; i32.const
000355f: 01                                        ; i32 literal
0003560: 42                                        ; i64.const
0003561: 02                                        ; i64 literal
0003562: fe                                        ; prefix
0003563: 1c                                        ; i64.atomic.store16
0003564: 01                                        ; alignment
0003565: 03                                        ; memory offset
0003566: 0b                                        ; end
000355c: 0a                                        ; FIXUP func body size
; function body 342
0003567: 00                                        ; func body size (guess)
0003568: 00                                        ; local decl count
0003569: 41                                        ; i32.const
000356a: 01                                        ; i32 literal
000356b: 42                                        ; i64.const
000356c: 02                                        ; i64 literal
000356d: fe                                        ; prefix
000356e: 1d                                        ; i64.atomic.store32
000356f: 02                                        ; alignment
0003570: 03                                        ; memory offset
0003571: 0b                                        ; end
0003567: 0a                                        ; FIXUP func body size
; function body 343
0003572: 00                                        ; func body size (guess)
0003573: 00                                        ; local decl count
0003574: 41                                        ; i32.const
0003575: 01                                        ; i32 literal
0003576: 41                                        ; i32.const
0003577: 02                                        ; i32 literal
0003578: fe                                        ; prefix
0003579: 1e                                        ; i32.atomic.rmw.add
000357a: 02                                        ; alignment
000357b: 03                                        ; memory offset
000357c: 1a                                        ; drop
000357d: 0b                                        ; end
0003572: 0b                                        ; FIXUP func body size
; function body 344
000357e: 00                                        ; func body size (guess)
000357f: 00                                        ; local decl count
0003580: 41                                        ; i32.const
0003581: 01                                        ; i32 literal
0003582: 42                                        ; i64.const
0003583: 02                                        ; i64 literal
0003584: fe                                        ; prefix
0003585: 1f                                        ; i64.atomic.rmw.add
0003586: 03                                        ; alignment
0003587: 07                                        ; memory offset
0003588: 1a                                        ; drop
0003589: 0b                                        ; end
000357e: 0b                                        ; FIXUP func body size
; function body 345
000358a: 00                                        ; func body size (guess)
000358b: 00                                        ; local decl count
000358c: 41                                        ; i32.const
000358d: 01                                        ; i32 literal
000358e: 41                                        ; i32.const
000358f: 02                                        ; i32 literal
0003590: fe                                        ; prefix
0003591: 20                                        ; i32.atomic.rmw8.add_u
0003592: 00                                        ; alignment
0003593: 03                                        ; memory offset
0003594: 1a                                        ; drop
0003595: 0b                                        ; end
000358a: 0b                                        ; FIXUP func body size
; function body 346
0003596: 00                                        ; func body size (guess)
0003597: 00                                        ; local decl count
0003598: 41                                        ; i32.const
0003599: 01                                        ; i32 literal
000359a: 41                                        ; i32.const
000359b: 02                                        ; i32 literal
000359c: fe                                        ; prefix
000359d: 21                                        ; i32.atomic.rmw16.add_u
000359e: 01                                        ; alignment
000359f: 03                                        ; memory offset
00035a0: 1a                                        ; drop
00035a1: 0b                                        ; end
0003596: 0b                                        ; FIXUP func body size
; function body 347
00035a2: 00                                        ; func body size (guess)
00035a3: 00                                        ; local decl count
00035a4: 41                                        ; i32.const
00035a5: 01                                        ; i32 literal
00035a6: 42                                        ; i64.const
00035a7: 02                                        ; i64 literal
00035a8: fe                                        ; prefix
00035a9: 22                                        ; i64.atomic.rmw8.add_u
00035aa: 00                                        ; alignment
00035ab: 03                                        ; memory offset
00035ac: 1a                                        ; drop
00035ad: 0b                                        ; end
00035a2: 0b                                        ; FIXUP func body size
; function body 348
00035ae: 00                                        ; func body size (guess)
00035af: 00                                        ; local decl count
00035b0: 41                                        ; i32.const
00035b1: 01                                        ; i32 literal
00035b2: 42                                        ; i64.const
00035b3: 02                                        ; i64 literal
00035b4: fe                                        ; prefix
00035b5: 23                                        ; i64.atomic.rmw16.add_u
00035b6: 01                                        ; alignment
00035b7: 03                                        ; memory offset
00035b8: 1a                                        ; drop
00035b9: 0b                                        ; end
00035ae: 0b                                        ; FIXUP func body size
; function body 349
00035ba: 00                                        ; func body size (guess)
00035bb: 00                                        ; local decl count
00035bc: 41                                        ; i32.const
00035bd: 01                                        ; i32 literal
00035be: 42                                        ; i64.const
00035bf: 02                                        ; i64 literal
00035c0: fe                                        ; prefix
00035c1: 24                                        ; i64.atomic.rmw32.add_u
00035c2: 02                                        ; alignment
00035c3: 03                                        ; memory offset
00035c4: 1a                                        ; drop
00035c5: 0b                                        ; end
00035ba: 0b                                        ; FIXUP func body size
; function body 350
00035c6: 00                                        ; func body size (guess)
00035c7: 00                                        ; local decl count
00035c8: 41                                        ; i32.const
00035c9: 01                                        ; i32 literal
00035ca: 41                                        ; i32.const
00035cb: 02                                        ; i32 literal
00035cc: fe                                        ; prefix
00035cd: 25                                        ; i32.atomic.rmw.sub
00035ce: 02                                        ; alignment
00035cf: 03                                        ; memory offset
00035d0: 1a                                        ; drop
00035d1: 0b                                        ; end
00035c6: 0b                                        ; FIXUP func body size
; function body 351
00035d2: 00                                        ; func body size (guess)
00035d3: 00                                        ; local decl count
00035d4: 41                                        ; i32.const
00035d5: 01                                        ; i32 literal
00035d6: 42                                        ; i64.const
00035d7: 02                                        ; i64 literal
00035d8: fe                                        ; prefix
00035d9: 26                                        ; i64.atomic.rmw.sub
00035da: 03                                        ; alignment
00035db: 07                                        ; memory offset
00035dc: 1a                                        ; drop
00035dd: 0b                                        ; end
00035d2: 0b                                        ; FIXUP func body size
; function body 352
00035de: 00                                        ; func body size (guess)
00035df: 00                                        ; local decl count
00035e0: 41                                        ; i32.const
00035e1: 01                                        ; i32 literal
00035e2: 41                                        ; i32.const
00035e3: 02                                        ; i32 literal
00035e4: fe                                        ; prefix
00035e5: 27                                        ; i32.atomic.rmw8.sub_u
00035e6: 00                                        ; alignment
00035e7: 03                                        ; memory offset
00035e8: 1a                                        ; drop
00035e9: 0b                                        ; end
00035de: 0b                                        ; FIXUP func body size
; function body 353
00035ea: 00                                        ; func body size (guess)
00035eb: 00                                        ; local decl count
00035ec: 41                                        ; i32.const
00035ed: 01                                        ; i32 literal
00035ee: 41                                        ; i32.const
00035ef: 02                                        ; i32 literal
00035f0: fe                                        ; prefix
00035f1: 28                                        ; i32.atomic.rmw16.sub_u
00035f2: 01                                        ; alignment
00035f3: 03                                        ; memory offset
00035f4: 1a                                        ; drop
00035f5: 0b                                        ; end
00035ea: 0b                                        ; FIXUP func body size
; function body 354
00035f6: 00                                        ; func body size (guess)
00035f7: 00                                        ; local decl count
00035f8: 41                                        ; i32.const
00035f9: 01                                        ; i32 literal
00035fa: 42                                        ; i64.const
00035fb: 02                                        ; i64 literal
00035fc: fe                                        ; prefix
00035fd: 29                                        ; i64.atomic.rmw8.sub_u
00035fe: 00                                        ; alignment
00035ff: 03                                        ; memory offset
0003600: 1a                                        ; drop
0003601: 0b                                        ; end
00035f6: 0b                                        ; FIXUP func body size
; function body 355
0003602: 00                                        ; func body size (guess)
0003603: 00                                        ; local decl count
0003604: 41                                        ; i32.const
0003605: 01                                        ; i32 literal
0003606: 42                                        ; i64.const
0003607: 02                                        ; i64 literal
0003608: fe                                        ; prefix
0003609: 2a                                        ; i64.atomic.rmw16.sub_u
000360a: 01                                        ; alignment
000360b: 03                                        ; memory offset
000360c: 1a                                        ; drop
000360d: 0b                                        ; end
0003602: 0b                                        ; FIXUP func body size
; function body 356
000360e: 00                                        ; func body size (guess)
000360f: 00                                        ; local decl count
0003610: 41                                        ; i32.const
0003611: 01                                        ; i32 literal
0003612: 42                                        ; i64.const
0003613: 02                                        ; i64 literal
0003614: fe                                        ; prefix
0003615: 2b                                        ; i64.atomic.rmw32.sub_u
0003616: 02                                        ; alignment
0003617: 03                                        ; memory offset
0003618: 1a                                        ; drop
0003619: 0b                                        ; end
000360e: 0b                                        ; FIXUP func body size
; function body 357
000361a: 00                                        ; func body size (guess)
000361b: 00                                        ; local decl count
000361c: 41                                        ; i32.const
000361d: 01                                        ; i32 literal
000361e: 41                                        ; i32.const
000361f: 02                                        ; i32 literal
0003620: fe                                        ; prefix
0003621: 2c                                        ; i32.atomic.rmw.and
0003622: 02                                        ; alignment
0003623: 03                                        ; memory offset
0003624: 1a                                        ; drop
0003625: 0b                                        ; end
000361a: 0b                                        ; FIXUP func body size
; function body 358
0003626: 00                                        ; func body size (guess)
0003627: 00                                        ; local decl count
0003628: 41                                        ; i32.const
0003629: 01                                        ; i32 literal
000362a: 42                                        ; i64.const
000362b: 02                                        ; i64 literal
000362c: fe                                        ; prefix
000362d: 2d                                        ; i64.atomic.rmw.and
000362e: 03                                        ; alignment
000362f: 07                                        ; memory offset
0003630: 1a                                        ; drop
0003631: 0b                                        ; end
0003626: 0b                                        ; FIXUP func body size
; function body 359
0003632: 00                                        ; func body size (guess)
0003633: 00                                        ; local decl count
0003634: 41                                        ; i32.const
0003635: 01                                        ; i32 literal
0003636: 41                                        ; i32.const
0003637: 02                                        ; i32 literal
0003638: fe                                        ; prefix
0003639: 2e                                        ; i32.atomic.rmw8.and_u
000363a: 00                                        ; alignment
000363b: 03                                        ; memory offset
000363c: 1a                                        ; drop
000363d: 0b                                        ; end
0003632: 0b                                        ; FIXUP func body size
; function body 360
000363e: 00                                        ; func body size (guess)
000363f: 00                                        ; local decl count
0003640: 41                                        ; i32.const
0003641: 01                                        ; i32 literal
0003642: 41                                        ; i32.const
0003643: 02                                        ; i32 literal
0003644: fe                                        ; prefix
0003645: 2f                                        ; i32.atomic.rmw16.and_u
0003646: 01                                        ; alignment
0003647: 03                                        ; memory offset
0003648: 1a                                        ; drop
0003649: 0b                                        ; end
000363e: 0b                                        ; FIXUP func body size
; function body 361
000364a: 00                                        ; func body size (guess)
000364b: 00                                        ; local decl count
000364c: 41                                        ; i32.const
000364d: 01                                        ; i32 literal
000364e: 42                                        ; i64.const
000364f: 02                                        ; i64 literal
0003650: fe                                        ; prefix
0003651: 30                                        ; i64.atomic.rmw8.and_u
0003652: 00                                        ; alignment
0003653: 03                                        ; memory offset
0003654: 1a                                        ; drop
0003655: 0b                                        ; end
000364a: 0b                                        ; FIXUP func body size
; function body 362
0003656: 00                                        ; func body size (guess)
0003657: 00                                        ; local decl count
0003658: 41                                        ; i32.const
0003659: 01                                        ; i32 literal
000365a: 42                                        ; i64.const
000365b: 02                                        ; i64 literal
000365c: fe                                        ; prefix
000365d: 31                                        ; i64.atomic.rmw16.and_u
000365e: 01                                        ; alignment
000365f: 03                                        ; memory offset
0003660: 1a                                        ; drop
0003661: 0b                                        ; end
0003656: 0b                                        ; FIXUP func body size
; function body 363
0003662: 00                                        ; func body size (guess)
0003663: 00                                        ; local decl count
0003664: 41                                        ; i32.const
0003665: 01                                        ; i32 literal
0003666: 42                                        ; i64.const
0003667: 02                                        ; i64 literal
0003668: fe                                        ; prefix
0003669: 32                                        ; i64.atomic.rmw32.and_u
000366a: 02                                        ; alignment
000366b: 03                                        ; memory offset
000366c: 1a                                        ; drop
000366d: 0b                                        ; end
0003662: 0b                                        ; FIXUP func body size
; function body 364
000366e: 00                                        ; func body size (guess)
000366f: 00                                        ; local decl count
0003670: 41                                        ; i32.const
0003671: 01                                        ; i32 literal
0003672: 41                                        ; i32.const
0003673: 02                                        ; i32 literal
0003674: fe                                        ; prefix
0003675: 33                                        ; i32.atomic.rmw.or
0003676: 02                                        ; alignment
0003677: 03                                        ; memory offset
0003678: 1a                                        ; drop
0003679: 0b                                        ; end
000366e: 0b                                        ; FIXUP func body size
; function body 365
000367a: 00                                        ; func body size (guess)
000367b: 00                                        ; local decl count
000367c: 41                                        ; i32.const
000367d: 01                                        ; i32 literal
000367e: 42                                        ; i64.const
000367f: 02                                        ; i64 literal
0003680: fe                                        ; prefix
0003681: 34                                        ; i64.atomic.rmw.or
0003682: 03                                        ; alignment
0003683: 07                                        ; memory offset
0003684: 1a                                        ; drop
0003685: 0b                                        ; end
000367a: 0b                                        ; FIXUP func body size
; function body 366
0003686: 00                                        ; func body size (guess)
0003687: 00                                        ; local decl count
0003688: 41                                        ; i32.const
0003689: 01                                        ; i32 literal
000368a: 41                                        ; i32.const
000368b: 02                                        ; i32 literal
000368c: fe                                        ; prefix
000368d: 35                                        ; i32.atomic.rmw8.or_u
000368e: 00                                        ; alignment
000368f: 03                                        ; memory offset
0003690: 1a                                        ; drop
0003691: 0b                                        ; end
0003686: 0b                                        ; FIXUP func body size
; function body 367
0003692: 00                                        ; func body size (guess)
0003693: 00                                        ; local decl count
0003694: 41                                        ; i32.const
0003695: 01                                        ; i32 literal
0003696: 41                                        ; i32.const
0003697: 02                                        ; i32 literal
0003698: fe                                        ; prefix
0003699: 36                                        ; i32.atomic.rmw16.or_u
000369a: 01                                        ; alignment
000369b: 03                                        ; memory offset
000369c: 1a                                        ; drop
000369d: 0b                                        ; end
0003692: 0b                                        ; FIXUP func body size
; function body 368
000369e: 00                                        ; func body size (guess)
000369f: 00                                        ; local decl count
00036a0: 41                                        ; i32.const
00036a1: 01                                        ; i32 literal
00036a2: 42                                        ; i64.const
00036a3: 02                                        ; i64 literal
00036a4: fe                                        ; prefix
00036a5: 37                                        ; i64.atomic.rmw8.or_u
00036a6: 00                                        ; alignment
00036a7: 03                                        ; memory offset
00036a8: 1a                                        ; drop
00036a9: 0b                                        ; end
000369e: 0b                                        ; FIXUP func body size
; function body 369
00036aa: 00                                        ; func body size (guess)
00036ab: 00                                        ; local decl count
00036ac: 41                                        ; i32.const
00036ad: 01                                        ; i32 literal
00036ae: 42                                        ; i64.const
00036af: 02                                        ; i64 literal
00036b0: fe                                        ; prefix
00036b1: 38                                        ; i64.atomic.rmw16.or_u
00036b2: 01                                        ; alignment
00036b3: 03                                        ; memory offset
00036b4: 1a                                        ; drop
00036b5: 0b                                        ; end
00036aa: 0b                                        ; FIXUP func body size
; function body 370
00036b6: 00                                        ; func body size (guess)
00036b7: 00                                        ; local decl count
00036b8: 41                                        ; i32.const
00036b9: 01                                        ; i32 literal
00036ba: 42                                        ; i64.const
00036bb: 02                                        ; i64 literal
00036bc: fe                                        ; prefix
00036bd: 39                                        ; i64.atomic.rmw32.or_u
00036be: 02                                        ; alignment
00036bf: 03                                        ; memory offset
00036c0: 1a                                        ; drop
00036c1: 0b                                        ; end
00036b6: 0b                                        ; FIXUP func body size
; function body 371
00036c2: 00                                        ; func body size (guess)
00036c3: 00                                        ; local decl count
00036c4: 41                                        ; i32.const
00036c5: 01                                        ; i32 literal
00036c6: 41                                        ; i32.const
00036c7: 02                                        ; i32 literal
00036c8: fe                                        ; prefix
00036c9: 3a                                        ; i32.atomic.rmw.xor
00036ca: 02                                        ; alignment
00036cb: 03                                        ; memory offset
00036cc: 1a                                        ; drop
00036cd: 0b                                        ; end
00036c2: 0b                                        ; FIXUP func body size
; function body 372
00036ce: 00                                        ; func body size (guess)
00036cf: 00                                        ; local decl count
00036d0: 41                                        ; i32.const
00036d1: 01                                        ; i32 literal
00036d2: 42                                        ; i64.const
00036d3: 02                                        ; i64 literal
00036d4: fe                                        ; prefix
00036d5: 3b                                        ; i64.atomic.rmw.xor
00036d6: 03                                        ; alignment
00036d7: 07                                        ; memory offset
00036d8: 1a                                        ; drop
00036d9: 0b                                        ; end
00036ce: 0b                                        ; FIXUP func body size
; function body 373
00036da: 00                                        ; func body size (guess)
00036db: 00                                        ; local decl count
00036dc: 41                                        ; i32.const
00036dd: 01                                        ; i32 literal
00036de: 41                                        ; i32.const
00036df: 02                                        ; i32 literal
00036e0: fe                                        ; prefix
00036e1: 3c                                        ; i32.atomic.rmw8.xor_u
00036e2: 00                                        ; alignment
00036e3: 03                                        ; memory offset
00036e4: 1a                                        ; drop
00036e5: 0b                                        ; end
00036da: 0b                                        ; FIXUP func body size
; function body 374
00036e6: 00                                        ; func body size (guess)
00036e7: 00                                        ; local decl count
00036e8: 41                                        ; i32.const
00036e9: 01                                        ; i32 literal
00036ea: 41                                        ; i32.const
00036eb: 02                                        ; i32 literal
00036ec: fe                                        ; prefix
00036ed: 3d                                        ; i32.atomic.rmw16.xor_u
00036ee: 01                                        ; alignment
00036ef: 03                                        ; memory offset
00036f0: 1a                                        ; drop
00036f1: 0b                                        ; end
00036e6: 0b                                        ; FIXUP func body size
; function body 375
00036f2: 00                                        ; func body size (guess)
00036f3: 00                                        ; local decl count
00036f4: 41                                        ; i32.const
00036f5: 01                                        ; i32 literal
00036f6: 42                                        ; i64.const
00036f7: 02                                        ; i64 literal
00036f8: fe                                        ; prefix
00036f9: 3e                                        ; i64.atomic.rmw8.xor_u
00036fa: 00                                        ; alignment
00036fb: 03                                        ; memory offset
00036fc: 1a                                        ; drop
00036fd: 0b                                        ; end
00036f2: 0b                                        ; FIXUP func body size
; function body 376
00036fe: 00                                        ; func body size (guess)
00036ff: 00                                        ; local decl count
0003700: 41                                        ; i32.const
0003701: 01                                        ; i32 literal
0003702: 42                                        ; i64.const
0003703: 02                                        ; i64 literal
0003704: fe                                        ; prefix
0003705: 3f                                        ; i64.atomic.rmw16.xor_u
0003706: 01                                        ; alignment
0003707: 03                                        ; memory offset
0003708: 1a                                        ; drop
0003709: 0b                                        ; end
00036fe: 0b                                        ; FIXUP func body size
; function body 377
000370a: 00                                        ; func body size (guess)
000370b: 00                                        ; local decl count
000370c: 41                                        ; i32.const
000370d: 01                                        ; i32 literal
000370e: 42                                        ; i64.const
000370f: 02                                        ; i64 literal
0003710: fe                                        ; prefix
0003711: 40                                        ; i64.atomic.rmw32.xor_u
0003712: 02                                        ; alignment
0003713: 03                                        ; memory offset
0003714: 1a                                        ; drop
0003715: 0b                                        ; end
000370a: 0b                                        ; FIXUP func body size
; function body 378
0003716: 00                                        ; func body size (guess)
0003717: 00                                        ; local decl count
0003718: 41                                        ; i32.const
0003719: 01                                        ; i32 literal
000371a: 41                                        ; i32.const
000371b: 02                                        ; i32 literal
000371c: fe                                        ; prefix
000371d: 41                                        ; i32.atomic.rmw.xchg
000371e: 02                                        ; alignment
000371f: 03                                        ; memory offset
0003720: 1a                                        ; drop
0003721: 0b                                        ; end
0003716: 0b                                        ; FIXUP func body size
; function body 379
0003722: 00                                        ; func body size (guess)
0003723: 00                                        ; local decl count
0003724: 41                                        ; i32.const
0003725: 01                                        ; i32 literal
0003726: 42                                        ; i64.const
0003727: 02                                        ; i64 literal
0003728: fe                                        ; prefix
0003729: 42                                        ; i64.atomic.rmw.xchg
000372a: 03                                        ; alignment
000372b: 07                                        ; memory offset
000372c: 1a                                        ; drop
000372d: 0b                                        ; end
0003722: 0b                                        ; FIXUP func body size
; function body 380
000372e: 00                                        ; func body size (guess)
000372f: 00                                        ; local decl count
0003730: 41                                        ; i32.const
0003731: 01                                        ; i32 literal
0003732: 41                                        ; i32.const
0003733: 02                                        ; i32 literal
0003734: fe                                        ; prefix
0003735: 43                                        ; i32.atomic.rmw8.xchg_u
0003736: 00                                        ; alignment
0003737: 03                                        ; memory offset
0003738: 1a                                        ; drop
0003739: 0b                                        ; end
000372e: 0b                                        ; FIXUP func body size
; function body 381
000373a: 00                                        ; func body size (guess)
000373b: 00                                        ; local decl count
000373c: 41                                        ; i32.const
000373d: 01                                        ; i32 literal
000373e: 41                                        ; i32.const
000373f: 02                                        ; i32 literal
0003740: fe                                        ; prefix
0003741: 44                                        ; i32.atomic.rmw16.xchg_u
0003742: 01                                        ; alignment
0003743: 03                                        ; memory offset
0003744: 1a                                        ; drop
0003745: 0b                                        ; end
000373a: 0b                                        ; FIXUP func body size
; function body 382
0003746: 00                                        ; func body size (guess)
0003747: 00                                        ; local decl count
0003748: 41                                        ; i32.const
0003749: 01                                        ; i32 literal
000374a: 42                                        ; i64.const
000374b: 02                                        ; i64 literal
000374c: fe                                        ; prefix
000374d: 45                                        ; i64.atomic.rmw8.xchg_u
000374e: 00                                        ; alignment
000374f: 03                                        ; memory offset
0003750: 1a                                        ; drop
0003751: 0b                                        ; end
0003746: 0b                                        ; FIXUP func body size
; function body 383
0003752: 00                                        ; func body size (guess)
0003753: 00                                        ; local decl count
0003754: 41                                        ; i32.const
0003755: 01                                        ; i32 literal
0003756: 42                                        ; i64.const
0003757: 02                                        ; i64 literal
0003758: fe                                        ; prefix
0003759: 46                                        ; i64.atomic.rmw16.xchg_u
000375a: 01                                        ; alignment
000375b: 03                                        ; memory offset
000375c: 1a                                        ; drop
000375d: 0b                                        ; end
0003752: 0b                                        ; FIXUP func body size
; function body 384
000375e: 00                                        ; func body size (guess)
000375f: 00                                        ; local decl count
0003760: 41                                        ; i32.const
0003761: 01                                        ; i32 literal
0003762: 42                                        ; i64.const
0003763: 02                                        ; i64 literal
0003764: fe                                        ; prefix
0003765: 47                                        ; i64.atomic.rmw32.xchg_u
0003766: 02                                        ; alignment
0003767: 03                                        ; memory offset
0003768: 1a                                        ; drop
0003769: 0b                                        ; end
000375e: 0b                                        ; FIXUP func body size
; function body 385
000376a: 00                                        ; func body size (guess)
000376b: 00                                        ; local decl count
000376c: 41                                        ; i32.const
000376d: 01                                        ; i32 literal
000376e: 41                                        ; i32.const
000376f: 02                                        ; i32 literal
0003770: 41                                        ; i32.const
0003771: 03                                        ; i32 literal
0003772: fe                                        ; prefix
0003773: 48                                        ; i32.atomic.rmw.cmpxchg
0003774: 02                                        ; alignment
0003775: 03                                        ; memory offset
0003776: 1a                                        ; drop
0003777: 0b                                        ; end
000376a: 0d                                        ; FIXUP func body size
; function body 386
0003778: 00                                        ; func body size (guess)
0003779: 00                                        ; local decl count
000377a: 41                                        ; i32.const
000377b: 01                                        ; i32 literal
000377c: 42                                        ; i64.const
000377d: 02                                        ; i64 literal
000377e: 42                                        ; i64.const
000377f: 03                                        ; i64 literal
0003780: fe                                        ; prefix
0003781: 49                                        ; i64.atomic.rmw.cmpxchg
0003782: 03                                        ; alignment
0003783: 07                                        ; memory offset
0003784: 1a                                        ; drop
0003785: 0b                                        ; end
0003778: 0d                                        ; FIXUP func body size
; function body 387
0003786: 00                                        ; func body size (guess)
0003787: 00                                        ; local decl count
0003788: 41                                        ; i32.const
0003789: 01                                        ; i32 literal
000378a: 41                                        ; i32.const
000378b: 02                                        ; i32 literal
000378c: 41                                        ; i32.const
000378d: 03                                        ; i32 literal
000378e: fe                                        ; prefix
000378f: 4a                                        ; i32.atomic.rmw8.cmpxchg_u
0003790: 00                                        ; alignment
0003791: 03                                        ; memory offset
0003792: 1a                                        ; drop
0003793: 0b                                        ; end
0003786: 0d                                        ; FIXUP func body size
; function body 388
0003794: 00                                        ; func body size (guess)
0003795: 00                                        ; local decl count
0003796: 41                                        ; i32.const
0003797: 01                                        ; i32 literal
0003798: 41                                        ; i32.const
0003799: 02                                        ; i32 literal
000379a: 41                                        ; i32.const
000379b: 03                                        ; i32 literal
000379c: fe                                        ; prefix
000379d: 4b                                        ; i32.atomic.rmw16.cmpxchg_u
000379e: 01                                        ; alignment
000379f: 03                                        ; memory offset
00037a0: 1a                                        ; drop
00037a1: 0b                                        ; end
0003794: 0d                                        ; FIXUP func body size
; function body 389
00037a2: 00                                        ; func body size (guess)
00037a3: 00                                        ; local decl count
00037a4: 41                                        ; i32.const
00037a5: 01                                        ; i32 literal
00037a6: 42                                        ; i64.const
00037a7: 02                                        ; i64 literal
00037a8: 42                                        ; i64.const
00037a9: 03                                        ; i64 literal
00037aa: fe                                        ; prefix
00037ab: 4c                                        ; i64.atomic.rmw8.cmpxchg_u
00037ac: 00                                        ; alignment
00037ad: 03                                        ; memory offset
00037ae: 1a                                        ; drop
00037af: 0b                                        ; end
00037a2: 0d                                        ; FIXUP func body size
; function body 390
00037b0: 00                                        ; func body size (guess)
00037b1: 00                                        ; local decl count
00037b2: 41                                        ; i32.const
00037b3: 01                                        ; i32 literal
00037b4: 42                                        ; i64.const
00037b5: 02                                        ; i64 literal
00037b6: 42                                        ; i64.const
00037b7: 03                                        ; i64 literal
00037b8: fe                                        ; prefix
00037b9: 4d                                        ; i64.atomic.rmw16.cmpxchg_u
00037ba: 01                                        ; alignment
00037bb: 03                                        ; memory offset
00037bc: 1a                                        ; drop
00037bd: 0b                                        ; end
00037b0: 0d                                        ; FIXUP func body size
; function body 391
00037be: 00                                        ; func body size (guess)
00037bf: 00                                        ; local decl count
00037c0: 41                                        ; i32.const
00037c1: 01                                        ; i32 literal
00037c2: 42                                        ; i64.const
00037c3: 02                                        ; i64 literal
00037c4: 42                                        ; i64.const
00037c5: 03                                        ; i64 literal
00037c6: fe                                        ; prefix
00037c7: 4e                                        ; i64.atomic.rmw32.cmpxchg_u
00037c8: 02                                        ; alignment
00037c9: 03                                        ; memory offset
00037ca: 1a                                        ; drop
00037cb: 0b                                        ; end
00037be: 0d                                        ; FIXUP func body size
; move data: [1a51, 37cc) -> [1a52, 37cd)
0001a50: fb3a                                      ; FIXUP section size
BeginModule(version: 1)
  BeginTypeSection(8)
    OnTypeCount(2)
    OnType(index: 0, params: [], results: [])
    OnType(index: 1, params: [i32], results: [])
  EndTypeSection
  BeginImportSection(14)
    OnImportCount(1)
    OnImport(index: 0, module: "host", field: "print")
    OnImportFunc(import_index: 0, func_index: 0, sig_index: 1)
  EndImportSection
  BeginFunctionSection(394)
    OnFunctionCount(392)
    OnFunction(index: 1, sig_index: 0)
    OnFunction(index: 2, sig_index: 0)
    OnFunction(index: 3, sig_index: 0)
    OnFunction(index: 4, sig_index: 0)
    OnFunction(index: 5, sig_index: 0)
    OnFunction(index: 6, sig_index: 0)
    OnFunction(index: 7, sig_index: 0)
    OnFunction(index: 8, sig_index: 0)
    OnFunction(index: 9, sig_index: 0)
    OnFunction(index: 10, sig_index: 0)
    OnFunction(index: 11, sig_index: 0)
    OnFunction(index: 12, sig_index: 0)
    OnFunction(index: 13, sig_index: 0)
    OnFunction(index: 14, sig_index: 0)
    OnFunction(index: 15, sig_index: 0)
    OnFunction(index: 16, sig_index: 0)
    OnFunction(index: 17, sig_index: 0)
    OnFunction(index: 18, sig_index: 0)
    OnFunction(index: 19, sig_index: 0)
    OnFunction(index: 20, sig_index: 0)
    OnFunction(index: 21, sig_index: 0)
    OnFunction(index: 22, sig_index: 0)
    OnFunction(index: 23, sig_index: 0)
    OnFunction(index: 24, sig_index: 0)
    OnFunction(index: 25, sig_index: 0)
    OnFunction(index: 26, sig_index: 0)
    OnFunction(index: 27, sig_index: 0)
    OnFunction(index: 28, sig_index: 0)
    OnFunction(index: 29, sig_index: 0)
    OnFunction(index: 30, sig_index: 0)
    OnFunction(index: 31, sig_index: 0)
    OnFunction(index: 32, sig_index: 0)
    OnFunction(index: 33, sig_index: 0)
    OnFunction(index: 34, sig_index: 0)
    OnFunction(index: 35, sig_index: 0)
    OnFunction(index: 36, sig_index: 0)
    OnFunction(index: 37, sig_index: 0)
    OnFunction(index: 38, sig_index: 0)
    OnFunction(index: 39, sig_index: 0)
    OnFunction(index: 40, sig_index: 0)
    OnFunction(index: 41, sig_index: 0)
    OnFunction(index: 42, sig_index: 0)
    OnFunction(index: 43, sig_index: 0)
    OnFunction(index: 44, sig_index: 0)
    OnFunction(index: 45, sig_index: 0)
    OnFunction(index: 46, sig_index: 0)
    OnFunction(index: 47, sig_index: 0)
    OnFunction(index: 48, sig_index: 0)
    OnFunction(index: 49, sig_index: 0)
    OnFunction(index: 50, sig_index: 0)
    OnFunction(index: 51, sig_index: 0)
    OnFunction(index: 52, sig_index: 0)
    OnFunction(index: 53, sig_index: 0)
    OnFunction(index: 54, sig_index: 0)
    OnFunction(index: 55, sig_index: 0)
    OnFunction(index: 56, sig_index: 0)
    OnFunction(index: 57, sig_index: 0)
    OnFunction(index: 58, sig_index: 0)
    OnFunction(index: 59, sig_index: 0)
    OnFunction(index: 60, sig_index: 0)
    OnFunction(index: 61, sig_index: 0)
    OnFunction(index: 62, sig_index: 0)
    OnFunction(index: 63, sig_index: 0)
    OnFunction(index: 64, sig_index: 0)
    OnFunction(index: 65, sig_index: 0)
    OnFunction(index: 66, sig_index: 0)
    OnFunction(index: 67, sig_index: 0)
    OnFunction(index: 68, sig_index: 0)
    OnFunction(index: 69, sig_index: 0)
    OnFunction(index: 70, sig_index: 0)
    OnFunction(index: 71, sig_index: 0)
    OnFunction(index: 72, sig_index: 0)
    OnFunction(index: 73, sig_index: 0)
    OnFunction(index: 74, sig_index: 0)
    OnFunction(index: 75, sig_index: 0)
    OnFunction(index: 76, sig_index: 0)
    OnFunction(index: 77, sig_index: 0)
    OnFunction(index: 78, sig_index: 0)
    OnFunction(index: 79, sig_index: 0)
    OnFunction(index: 80, sig_index: 0)
    OnFunction(index: 81, sig_index: 0)
    OnFunction(index: 82, sig_index: 0)
    OnFunction(index: 83, sig_index: 0)
    OnFunction(index: 84, sig_index: 0)
    OnFunction(index: 85, sig_index: 0)
    OnFunction(index: 86, sig_index: 0)
    OnFunction(index: 87, sig_index: 0)
    OnFunction(index: 88, sig_index: 0)
    OnFunction(index: 89, sig_index: 0)
    OnFunction(index: 90, sig_index: 0)
    OnFunction(index: 91, sig_index: 0)
    OnFunction(index: 92, sig_index: 0)
    OnFunction(index: 93, sig_index: 0)
    OnFunction(index: 94, sig_index: 0)
    OnFunction(index: 95, sig_index: 0)
    OnFunction(index: 96, sig_index: 0)
    OnFunction(index: 97, sig_index: 0)
    OnFunction(index: 98, sig_index: 0)
    OnFunction(index: 99, sig_index: 0)
    OnFunction(index: 100, sig_index: 0)
    OnFunction(index: 101, sig_index: 0)
    OnFunction(index: 102, sig_index: 0)
    OnFunction(index: 103, sig_index: 0)
    OnFunction(index: 104, sig_index: 0)
    OnFunction(index: 105, sig_index: 0)
    OnFunction(index: 106, sig_index: 0)
    OnFunction(index: 107, sig_index: 0)
    OnFunction(index: 108, sig_index: 0)
    OnFunction(index: 109, sig_index: 0)
    OnFunction(index: 110, sig_index: 0)
    OnFunction(index: 111, sig_index: 0)
    OnFunction(index: 112, sig_index: 0)
    OnFunction(index: 113, sig_index: 0)
    OnFunction(index: 114, sig_index: 0)
    OnFunction(index: 115, sig_index: 0)
    OnFunction(index: 116, sig_index: 0)
    OnFunction(index: 117, sig_index: 0)
    OnFunction(index: 118, sig_index: 0)
    OnFunction(index: 119, sig_index: 0)
    OnFunction(index: 120, sig_index: 0)
    OnFunction(index: 121, sig_index: 0)
    OnFunction(index: 122, sig_index: 0)
    OnFunction(index: 123, sig_index: 0)
    OnFunction(index: 124, sig_index: 0)
    OnFunction(index: 125, sig_index: 0)
    OnFunction(index: 126, sig_index: 0)
    OnFunction(index: 127, sig_index: 0)
    OnFunction(index: 128, sig_index: 0)
    OnFunction(index: 129, sig_index: 0)
    OnFunction(index: 130, sig_index: 0)
    OnFunction(index: 131, sig_index: 0)
    OnFunction(index: 132, sig_index: 0)
    OnFunction(index: 133, sig_index: 0)
    OnFunction(index: 134, sig_index: 0)
    OnFunction(index: 135, sig_index: 0)
    OnFunction(index: 136, sig_index: 0)
    OnFunction(index: 137, sig_index: 0)
    OnFunction(index: 138, sig_index: 0)
    OnFunction(index: 139, sig_index: 0)
    OnFunction(index: 140, sig_index: 0)
    OnFunction(index: 141, sig_index: 0)
    OnFunction(index: 142, sig_index: 0)
    OnFunction(index: 143, sig_index: 0)
    OnFunction(index: 144, sig_index: 0)
    OnFunction(index: 145, sig_index: 0)
    OnFunction(index: 146, sig_index: 0)
    OnFunction(index: 147, sig_index: 0)
    OnFunction(index: 148, sig_index: 0)
    OnFunction(index: 149, sig_index: 0)
    OnFunction(index: 150, sig_index: 0)
    OnFunction(index: 151, sig_index: 0)
    OnFunction(index: 152, sig_index: 0)
    OnFunction(index: 153, sig_index: 0)
    OnFunction(index: 154, sig_index: 0)
    OnFunction(index: 155, sig_index: 0)
    OnFunction(index: 156, sig_index: 0)
    OnFunction(index: 157, sig_index: 0)
    OnFunction(index: 158, sig_index: 0)
    OnFunction(index: 159, sig_index: 0)
    OnFunction(index: 160, sig_index: 0)
    OnFunction(index: 161, sig_index: 0)
    OnFunction(index: 162, sig_index: 0)
    OnFunction(index: 163, sig_index: 0)
    OnFunction(index: 164, sig_index: 0)
    OnFunction(index: 165, sig_index: 0)
    OnFunction(index: 166, sig_index: 0)
    OnFunction(index: 167, sig_index: 0)
    OnFunction(index: 168, sig_index: 0)
    OnFunction(index: 169, sig_index: 0)
    OnFunction(index: 170, sig_index: 0)
    OnFunction(index: 171, sig_index: 0)
    OnFunction(index: 172, sig_index: 0)
    OnFunction(index: 173, sig_index: 0)
    OnFunction(index: 174, sig_index: 0)
    OnFunction(index: 175, sig_index: 0)
    OnFunction(index: 176, sig_index: 0)
    OnFunction(index: 177, sig_index: 0)
    OnFunction(index: 178, sig_index: 0)
    OnFunction(index: 179, sig_index: 0)
    OnFunction(index: 180, sig_index: 0)
    OnFunction(index: 181, sig_index: 0)
    OnFunction(index: 182, sig_index: 0)
    OnFunction(index: 183, sig_index: 0)
    OnFunction(index: 184, sig_index: 0)
    OnFunction(index: 185, sig_index: 0)
    OnFunction(index: 186, sig_index: 0)
    OnFunction(index: 187, sig_index: 0)
    OnFunction(index: 188, sig_index: 0)
    OnFunction(index: 189, sig_index: 0)
    OnFunction(index: 190, sig_index: 0)
    OnFunction(index: 191, sig_index: 0)
    OnFunction(index: 192, sig_index: 0)
    OnFunction(index: 193, sig_index: 0)
    OnFunction(index: 194, sig_index: 0)
    OnFunction(index: 195, sig_index: 0)
    OnFunction(index: 196, sig_index: 0)
    OnFunction(index: 197, sig_index: 0)
    OnFunction(index: 198, sig_index: 0)
    OnFunction(index: 199, sig_index: 0)
    OnFunction(index: 200, sig_index: 0)
    OnFunction(index: 201, sig_index: 0)
    OnFunction(index: 202, sig_index: 0)
    OnFunction(index: 203, sig_index: 0)
    OnFunction(index: 204, sig_index: 0)
    OnFunction(index: 205, sig_index: 0)
    OnFunction(index: 206, sig_index: 0)
    OnFunction(index: 207, sig_index: 0)
    OnFunction(index: 208, sig_index: 0)
    OnFunction(index: 209, sig_index: 0)
    OnFunction(index: 210, sig_index: 0)
    OnFunction(index: 211, sig_index: 0)
    OnFunction(index: 212, sig_index: 0)
    OnFunction(index: 213, sig_index: 0)
    OnFunction(index: 214, sig_index: 0)
    OnFunction(index: 215, sig_index: 0)
    OnFunction(index: 216, sig_index: 0)
    OnFunction(index: 217, sig_index: 0)
    OnFunction(index: 218, sig_index: 0)
    OnFunction(index: 219, sig_index: 0)
    OnFunction(index: 220, sig_index: 0)
    OnFunction(index: 221, sig_index: 0)
    OnFunction(index: 222, sig_index: 0)
    OnFunction(index: 223, sig_index: 0)
    OnFunction(index: 224, sig_index: 0)
    OnFunction(index: 225, sig_index: 0)
    OnFunction(index: 226, sig_index: 0)
    OnFunction(index: 227, sig_index: 0)
    OnFunction(index: 228, sig_index: 0)
    OnFunction(index: 229, sig_index: 0)
    OnFunction(index: 230, sig_index: 0)
    OnFunction(index: 231, sig_index: 0)
    OnFunction(index: 232, sig_index: 0)
    OnFunction(index: 233, sig_index: 0)
    OnFunction(index: 234, sig_index: 0)
    OnFunction(index: 235, sig_index: 0)
    OnFunction(index: 236, sig_index: 0)
    OnFunction(index: 237, sig_index: 0)
    OnFunction(index: 238, sig_index: 0)
    OnFunction(index: 239, sig_index: 0)
    OnFunction(index: 240, sig_index: 0)
    OnFunction(index: 241, sig_index: 0)
    OnFunction(index: 242, sig_index: 0)
    OnFunction(index: 243, sig_index: 0)
    OnFunction(index: 244, sig_index: 0)
    OnFunction(index: 245, sig_index: 0)
    OnFunction(index: 246, sig_index: 0)
    OnFunction(index: 247, sig_index: 0)
    OnFunction(index: 248, sig_index: 0)
    OnFunction(index: 249, sig_index: 0)
    OnFunction(index: 250, sig_index: 0)
    OnFunction(index: 251, sig_index: 0)
    OnFunction(index: 252, sig_index: 0)
    OnFunction(index: 253, sig_index: 0)
    OnFunction(index: 254, sig_index: 0)
    OnFunction(index: 255, sig_index: 0)
    OnFunction(index: 256, sig_index: 0)
    OnFunction(index: 257, sig_index: 0)
    OnFunction(index: 258, sig_index: 0)
    OnFunction(index: 259, sig_index: 0)
    OnFunction(index: 260, sig_index: 0)
    OnFunction(index: 261, sig_index: 0)
    OnFunction(index: 262, sig_index: 0)
    OnFunction(index: 263, sig_index: 0)
    OnFunction(index: 264, sig_index: 0)
    OnFunction(index: 265, sig_index: 0)
    OnFunction(index: 266, sig_index: 0)
    OnFunction(index: 267, sig_index: 0)
    OnFunction(index: 268, sig_index: 0)
    OnFunction(index: 269, sig_index: 0)
    OnFunction(index: 270, sig_index: 0)
    OnFunction(index: 271, sig_index: 0)
    OnFunction(index: 272, sig_index: 0)
    OnFunction(index: 273, sig_index: 0)
    OnFunction(index: 274, sig_index: 0)
    OnFunction(index: 275, sig_index: 0)
    OnFunction(index: 276, sig_index: 0)
    OnFunction(index: 277, sig_index: 0)
    OnFunction(index: 278, sig_index: 0)
    OnFunction(index: 279, sig_index: 0)
    OnFunction(index: 280, sig_index: 0)
    OnFunction(index: 281, sig_index: 0)
    OnFunction(index: 282, sig_index: 0)
    OnFunction(index: 283, sig_index: 0)
    OnFunction(index: 284, sig_index: 0)
    OnFunction(index: 285, sig_index: 0)
    OnFunction(index: 286, sig_index: 0)
    OnFunction(index: 287, sig_index: 0)
    OnFunction(index: 288, sig_index: 0)
    OnFunction(index: 289, sig_index: 0)
    OnFunction(index: 290, sig_index: 0)
    OnFunction(index: 291, sig_index: 0)
    OnFunction(index: 292, sig_index: 0)
    OnFunction(index: 293, sig_index: 0)
    OnFunction(index: 294, sig_index: 0)
    OnFunction(index: 295, sig_index: 0)
    OnFunction(index: 296, sig_index: 0)
    OnFunction(index: 297, sig_index: 0)
    OnFunction(index: 298, sig_index: 0)
    OnFunction(index: 299, sig_index: 0)
    OnFunction(index: 300, sig_index: 0)
    OnFunction(index: 301, sig_index: 0)
    OnFunction(index: 302, sig_index: 0)
    OnFunction(index: 303, sig_index: 0)
    OnFunction(index: 304, sig_index: 0)
    OnFunction(index: 305, sig_index: 0)
    OnFunction(index: 306, sig_index: 0)
    OnFunction(index: 307, sig_index: 0)
    OnFunction(index: 308, sig_index: 0)
    OnFunction(index: 309, sig_index: 0)
    OnFunction(index: 310, sig_index: 0)
    OnFunction(index: 311, sig_index: 0)
    OnFunction(index: 312, sig_index: 0)
    OnFunction(index: 313, sig_index: 0)
    OnFunction(index: 314, sig_index: 0)
    OnFunction(index: 315, sig_index: 0)
    OnFunction(index: 316, sig_index: 0)
    OnFunction(index: 317, sig_index: 0)
    OnFunction(index: 318, sig_index: 0)
    OnFunction(index: 319, sig_index: 0)
    OnFunction(index: 320, sig_index: 0)
    OnFunction(index: 321, sig_index: 0)
    OnFunction(index: 322, sig_index: 0)
    OnFunction(index: 323, sig_index: 0)
    OnFunction(index: 324, sig_index: 0)
    OnFunction(index: 325, sig_index: 0)
    OnFunction(index: 326, sig_index: 0)
    OnFunction(index: 327, sig_index: 0)
    OnFunction(index: 328, sig_index: 0)
    OnFunction(index: 329, sig_index: 0)
    OnFunction(index: 330, sig_index: 0)
    OnFunction(index: 331, sig_index: 0)
    OnFunction(index: 332, sig_index: 0)
    OnFunction(index: 333, sig_index: 0)
    OnFunction(index: 334, sig_index: 0)
    OnFunction(index: 335, sig_index: 0)
    OnFunction(index: 336, sig_index: 0)
    OnFunction(index: 337, sig_index: 0)
    OnFunction(index: 338, sig_index: 0)
    OnFunction(index: 339, sig_index: 0)
    OnFunction(index: 340, sig_index: 0)
    OnFunction(index: 341, sig_index: 0)
    OnFunction(index: 342, sig_index: 0)
    OnFunction(index: 343, sig_index: 0)
    OnFunction(index: 344, sig_index: 0)
    OnFunction(index: 345, sig_index: 0)
    OnFunction(index: 346, sig_index: 0)
    OnFunction(index: 347, sig_index: 0)
    OnFunction(index: 348, sig_index: 0)
    OnFunction(index: 349, sig_index: 0)
    OnFunction(index: 350, sig_index: 0)
    OnFunction(index: 351, sig_index: 0)
    OnFunction(index: 352, sig_index: 0)
    OnFunction(index: 353, sig_index: 0)
    OnFunction(index: 354, sig_index: 0)
    OnFunction(index: 355, sig_index: 0)
    OnFunction(index: 356, sig_index: 0)
    OnFunction(index: 357, sig_index: 0)
    OnFunction(index: 358, sig_index: 0)
    OnFunction(index: 359, sig_index: 0)
    OnFunction(index: 360, sig_index: 0)
    OnFunction(index: 361, sig_index: 0)
    OnFunction(index: 362, sig_index: 0)
    OnFunction(index: 363, sig_index: 0)
    OnFunction(index: 364, sig_index: 0)
    OnFunction(index: 365, sig_index: 0)
    OnFunction(index: 366, sig_index: 0)
    OnFunction(index: 367, sig_index: 0)
    OnFunction(index: 368, sig_index: 0)
    OnFunction(index: 369, sig_index: 0)
    OnFunction(index: 370, sig_index: 0)
    OnFunction(index: 371, sig_index: 0)
    OnFunction(index: 372, sig_index: 0)
    OnFunction(index: 373, sig_index: 0)
    OnFunction(index: 374, sig_index: 0)
    OnFunction(index: 375, sig_index: 0)
    OnFunction(index: 376, sig_index: 0)
    OnFunction(index: 377, sig_index: 0)
    OnFunction(index: 378, sig_index: 0)
    OnFunction(index: 379, sig_index: 0)
    OnFunction(index: 380, sig_index: 0)
    OnFunction(index: 381, sig_index: 0)
    OnFunction(index: 382, sig_index: 0)
    OnFunction(index: 383, sig_index: 0)
    OnFunction(index: 384, sig_index: 0)
    OnFunction(index: 385, sig_index: 0)
    OnFunction(index: 386, sig_index: 0)
    OnFunction(index: 387, sig_index: 0)
    OnFunction(index: 388, sig_index: 0)
    OnFunction(index: 389, sig_index: 0)
    OnFunction(index: 390, sig_index: 0)
    OnFunction(index: 391, sig_index: 0)
    OnFunction(index: 392, sig_index: 0)
  EndFunctionSection
  BeginTableSection(5)
    OnTableCount(1)
    OnTable(index: 0, elem_type: anyfunc, initial: 2, max: 2)
  EndTableSection
  BeginMemorySection(4)
    OnMemoryCount(1)
    OnMemory(index: 0, initial: 1, max: 1)
  EndMemorySection
  BeginGlobalSection(6)
    OnGlobalCount(1)
    BeginGlobal(index: 0, type: i32, mutable: true)
    BeginGlobalInitExpr(0)
    OnInitExprI32ConstExpr(index: 0, value: 0)
    EndGlobalInitExpr(0)
    EndGlobal(0)
  EndGlobalSection
  BeginExportSection(6270)
    OnExportCount(391)
    OnExport(index: 0, kind: func, item_index: 2, name: "unreachable")
    OnExport(index: 1, kind: func, item_index: 3, name: "br")
    OnExport(index: 2, kind: func, item_index: 4, name: "br_table")
    OnExport(index: 3, kind: func, item_index: 5, name: "return")
    OnExport(index: 4, kind: func, item_index: 6, name: "call")
    OnExport(index: 5, kind: func, item_index: 7, name: "call_indirect")
    OnExport(index: 6, kind: func, item_index: 8, name: "return_call")
    OnExport(index: 7, kind: func, item_index: 9, name: "return_call_indirect")
    OnExport(index: 8, kind: func, item_index: 10, name: "drop")
    OnExport(index: 9, kind: func, item_index: 11, name: "select")
    OnExport(index: 10, kind: func, item_index: 12, name: "get_local")
    OnExport(index: 11, kind: func, item_index: 13, name: "set_local")
    OnExport(index: 12, kind: func, item_index: 14, name: "tee_local")
    OnExport(index: 13, kind: func, item_index: 15, name: "get_global")
    OnExport(index: 14, kind: func, item_index: 16, name: "set_global")
    OnExport(index: 15, kind: func, item_index: 17, name: "i32.load")
    OnExport(index: 16, kind: func, item_index: 18, name: "i64.load")
    OnExport(index: 17, kind: func, item_index: 19, name: "f32.load")
    OnExport(index: 18, kind: func, item_index: 20, name: "f64.load")
    OnExport(index: 19, kind: func, item_index: 21, name: "i32.load8_s")
    OnExport(index: 20, kind: func, item_index: 22, name: "i32.load8_u")
    OnExport(index: 21, kind: func, item_index: 23, name: "i32.load16_s")
    OnExport(index: 22, kind: func, item_index: 24, name: "i32.load16_u")
    OnExport(index: 23, kind: func, item_index: 25, name: "i64.load8_s")
    OnExport(index: 24, kind: func, item_index: 26, name: "i64.load8_u")
    OnExport(index: 25, kind: func, item_index: 27, name: "i64.load16_s")
    OnExport(index: 26, kind: func, item_index: 28, name: "i64.load16_u")
    OnExport(index: 27, kind: func, item_index: 29, name: "i64.load32_s")
    OnExport(index: 28, kind: func, item_index: 30, name: "i64.load32_u")
    OnExport(index: 29, kind: func, item_index: 31, name: "i32.store")
    OnExport(index: 30, kind: func, item_index: 32, name: "i64.store")
    OnExport(index: 31, kind: func, item_index: 33, name: "f32.store")
    OnExport(index: 32, kind: func, item_index: 34, name: "f64.store")
    OnExport(index: 33, kind: func, item_index: 35, name: "i32.store8")
    OnExport(index: 34, kind: func, item_index: 36, name: "i32.store16")
    OnExport(index: 35, kind: func, item_index: 37, name: "i64.store8")
    OnExport(index: 36, kind: func, item_index: 38, name: "i64.store16")
    OnExport(index: 37, kind: func, item_index: 39, name: "i64.store32")
    OnExport(index: 38, kind: func, item_index: 40, name: "current_memory")
    OnExport(index: 39, kind: func, item_index: 41, name: "grow_memory")
    OnExport(index: 40, kind: func, item_index: 42, name: "i32.const")
    OnExport(index: 41, kind: func, item_index: 43, name: "i64.const")
    OnExport(index: 42, kind: func, item_index: 44, name: "f32.const")
    OnExport(index: 43, kind: func, item_index: 45, name: "f64.const")
    OnExport(index: 44, kind: func, item_index: 46, name: "i32.eqz")
    OnExport(index: 45, kind: func, item_index: 47, name: "i32.eq")
    OnExport(index: 46, kind: func, item_index: 48, name: "i32.ne")
    OnExport(index: 47, kind: func, item_index: 49, name: "i32.lt_s")
    OnExport(index: 48, kind: func, item_index: 50, name: "i32.lt_u")
    OnExport(index: 49, kind: func, item_index: 51, name: "i32.gt_s")
    OnExport(index: 50, kind: func, item_index: 52, name: "i32.gt_u")
    OnExport(index: 51, kind: func, item_index: 53, name: "i32.le_s")
    OnExport(index: 52, kind: func, item_index: 54, name: "i32.le_u")
    OnExport(index: 53, kind: func, item_index: 55, name: "i32.ge_s")
    OnExport(index: 54, kind: func, item_index: 56, name: "i32.ge_u")
    OnExport(index: 55, kind: func, item_index: 57, name: "i64.eqz")
    OnExport(index: 56, kind: func, item_index: 58, name: "i64.eq")
    OnExport(index: 57, kind: func, item_index: 59, name: "i64.ne")
    OnExport(index: 58, kind: func, item_index: 60, name: "i64.lt_s")
    OnExport(index: 59, kind: func, item_index: 61, name: "i64.lt_u")
    OnExport(index: 60, kind: func, item_index: 62, name: "i64.gt_s")
    OnExport(index: 61, kind: func, item_index: 63, name: "i64.gt_u")
    OnExport(index: 62, kind: func, item_index: 64, name: "i64.le_s")
    OnExport(index: 63, kind: func, item_index: 65, name: "i64.le_u")
    OnExport(index: 64, kind: func, item_index: 66, name: "i64.ge_s")
    OnExport(index: 65, kind: func, item_index: 67, name: "i64.ge_u")
    OnExport(index: 66, kind: func, item_index: 68, name: "f32.eq")
    OnExport(index: 67, kind: func, item_index: 69, name: "f32.ne")
    OnExport(index: 68, kind: func, item_index: 70, name: "f32.lt")
    OnExport(index: 69, kind: func, item_index: 71, name: "f32.gt")
    OnExport(index: 70, kind: func, item_index: 72, name: "f32.le")
    OnExport(index: 71, kind: func, item_index: 73, name: "f32.ge")
    OnExport(index: 72, kind: func, item_index: 74, name: "f64.eq")
    OnExport(index: 73, kind: func, item_index: 75, name: "f64.ne")
    OnExport(index: 74, kind: func, item_index: 76, name: "f64.lt")
    OnExport(index: 75, kind: func, item_index: 77, name: "f64.gt")
    OnExport(index: 76, kind: func, item_index: 78, name: "f64.le")
    OnExport(index: 77, kind: func, item_index: 79, name: "f64.ge")
    OnExport(index: 78, kind: func, item_index: 80, name: "i32.clz")
    OnExport(index: 79, kind: func, item_index: 81, name: "i32.ctz")
    OnExport(index: 80, kind: func, item_index: 82, name: "i32.popcnt")
    OnExport(index: 81, kind: func, item_index: 83, name: "i32.add")
    OnExport(index: 82, kind: func, item_index: 84, name: "i32.sub")
    OnExport(index: 83, kind: func, item_index: 85, name: "i32.mul")
    OnExport(index: 84, kind: func, item_index: 86, name: "i32.div_s")
    OnExport(index: 85, kind: func, item_index: 87, name: "i32.div_u")
    OnExport(index: 86, kind: func, item_index: 88, name: "i32.rem_s")
    OnExport(index: 87, kind: func, item_index: 89, name: "i32.rem_u")
    OnExport(index: 88, kind: func, item_index: 90, name: "i32.and")
    OnExport(index: 89, kind: func, item_index: 91, name: "i32.or")
    OnExport(index: 90, kind: func, item_index: 92, name: "i32.xor")
    OnExport(index: 91, kind: func, item_index: 93, name: "i32.shl")
    OnExport(index: 92, kind: func, item_index: 94, name: "i32.shr_s")
    OnExport(index: 93, kind: func, item_index: 95, name: "i32.shr_u")
    OnExport(index: 94, kind: func, item_index: 96, name: "i32.rotl")
    OnExport(index: 95, kind: func, item_index: 97, name: "i32.rotr")
    OnExport(index: 96, kind: func, item_index: 98, name: "i64.clz")
    OnExport(index: 97, kind: func, item_index: 99, name: "i64.ctz")
    OnExport(index: 98, kind: func, item_index: 100, name: "i64.popcnt")
    OnExport(index: 99, kind: func, item_index: 101, name: "i64.add")
    OnExport(index: 100, kind: func, item_index: 102, name: "i64.sub")
    OnExport(index: 101, kind: func, item_index: 103, name: "i64.mul")
    OnExport(index: 102, kind: func, item_index: 104, name: "i64.div_s")
    OnExport(index: 103, kind: func, item_index: 105, name: "i64.div_u")
    OnExport(index: 104, kind: func, item_index: 106, name: "i64.rem_s")
    OnExport(index: 105, kind: func, item_index: 107, name: "i64.rem_u")
    OnExport(index: 106, kind: func, item_index: 108, name: "i64.and")
    OnExport(index: 107, kind: func, item_index: 109, name: "i64.or")
    OnExport(index: 108, kind: func, item_index: 110, name: "i64.xor")
    OnExport(index: 109, kind: func, item_index: 111, name: "i64.shl")
    OnExport(index: 110, kind: func, item_index: 112, name: "i64.shr_s")
    OnExport(index: 111, kind: func, item_index: 113, name: "i64.shr_u")
    OnExport(index: 112, kind: func, item_index: 114, name: "i64.rotl")
    OnExport(index: 113, kind: func, item_index: 115, name: "i64.rotr")
    OnExport(index: 114, kind: func, item_index: 116, name: "f32.abs")
    OnExport(index: 115, kind: func, item_index: 117, name: "f32.neg")
    OnExport(index: 116, kind: func, item_index: 118, name: "f32.ceil")
    OnExport(index: 117, kind: func, item_index: 119, name: "f32.floor")
    OnExport(index: 118, kind: func, item_index: 120, name: "f32.trunc")
    OnExport(index: 119, kind: func, item_index: 121, name: "f32.nearest")
    OnExport(index: 120, kind: func, item_index: 122, name: "f32.sqrt")
    OnExport(index: 121, kind: func, item_index: 123, name: "f32.add")
    OnExport(index: 122, kind: func, item_index: 124, name: "f32.sub")
    OnExport(index: 123, kind: func, item_index: 125, name: "f32.mul")
    OnExport(index: 124, kind: func, item_index: 126, name: "f32.div")
    OnExport(index: 125, kind: func, item_index: 127, name: "f32.min")
    OnExport(index: 126, kind: func, item_index: 128, name: "f32.max")
    OnExport(index: 127, kind: func, item_index: 129, name: "f32.copysign")
    OnExport(index: 128, kind: func, item_index: 130, name: "f64.abs")
    OnExport(index: 129, kind: func, item_index: 131, name: "f64.neg")
    OnExport(index: 130, kind: func, item_index: 132, name: "f64.ceil")
    OnExport(index: 131, kind: func, item_index: 133, name: "f64.floor")
    OnExport(index: 132, kind: func, item_index: 134, name: "f64.trunc")
    OnExport(index: 133, kind: func, item_index: 135, name: "f64.nearest")
    OnExport(index: 134, kind: func, item_index: 136, name: "f64.sqrt")
    OnExport(index: 135, kind: func, item_index: 137, name: "f64.add")
    OnExport(index: 136, kind: func, item_index: 138, name: "f64.sub")
    OnExport(index: 137, kind: func, item_index: 139, name: "f64.mul")
    OnExport(index: 138, kind: func, item_index: 140, name: "f64.div")
    OnExport(index: 139, kind: func, item_index: 141, name: "f64.min")
    OnExport(index: 140, kind: func, item_index: 142, name: "f64.max")
    OnExport(index: 141, kind: func, item_index: 143, name: "f64.copysign")
    OnExport(index: 142, kind: func, item_index: 144, name: "i32.wrap/i64")
    OnExport(index: 143, kind: func, item_index: 145, name: "i32.trunc_s/f32")
    OnExport(index: 144, kind: func, item_index: 146, name: "i32.trunc_u/f32")
    OnExport(index: 145, kind: func, item_index: 147, name: "i32.trunc_s/f64")
    OnExport(index: 146, kind: func, item_index: 148, name: "i32.trunc_u/f64")
    OnExport(index: 147, kind: func, item_index: 149, name: "i64.extend_s/i32")
    OnExport(index: 148, kind: func, item_index: 150, name: "i64.extend_u/i32")
    OnExport(index: 149, kind: func, item_index: 151, name: "i64.trunc_s/f32")
    OnExport(index: 150, kind: func, item_index: 152, name: "i64.trunc_u/f32")
    OnExport(index: 151, kind: func, item_index: 153, name: "i64.trunc_s/f64")
    OnExport(index: 152, kind: func, item_index: 154, name: "i64.trunc_u/f64")
    OnExport(index: 153, kind: func, item_index: 155, name: "f32.convert_s/i32")
    OnExport(index: 154, kind: func, item_index: 156, name: "f32.convert_u/i32")
    OnExport(index: 155, kind: func, item_index: 157, name: "f32.convert_s/i64")
    OnExport(index: 156, kind: func, item_index: 158, name: "f32.convert_u/i64")
    OnExport(index: 157, kind: func, item_index: 159, name: "f32.demote/f64")
    OnExport(index: 158, kind: func, item_index: 160, name: "f64.convert_s/i32")
    OnExport(index: 159, kind: func, item_index: 161, name: "f64.convert_u/i32")
    OnExport(index: 160, kind: func, item_index: 162, name: "f64.convert_s/i64")
    OnExport(index: 161, kind: func, item_index: 163, name: "f64.convert_u/i64")
    OnExport(index: 162, kind: func, item_index: 164, name: "f64.promote/f32")
    OnExport(index: 163, kind: func, item_index: 165, name: "i32.reinterpret/f32")
    OnExport(index: 164, kind: func, item_index: 166, name: "f32.reinterpret/i32")
    OnExport(index: 165, kind: func, item_index: 167, name: "i64.reinterpret/f64")
    OnExport(index: 166, kind: func, item_index: 168, name: "f64.reinterpret/i64")
    OnExport(index: 167, kind: func, item_index: 169, name: "i32.extend8_s")
    OnExport(index: 168, kind: func, item_index: 170, name: "i32.extend16_s")
    OnExport(index: 169, kind: func, item_index: 171, name: "i64.extend8_s")
    OnExport(index: 170, kind: func, item_index: 172, name: "i64.extend16_s")
    OnExport(index: 171, kind: func, item_index: 173, name: "i64.extend32_s")
    OnExport(index: 172, kind: func, item_index: 174, name: "alloca")
    OnExport(index: 173, kind: func, item_index: 175, name: "br_unless")
    OnExport(index: 174, kind: func, item_index: 176, name: "call_host")
    OnExport(index: 175, kind: func, item_index: 177, name: "data")
    OnExport(index: 176, kind: func, item_index: 178, name: "drop_keep")
    OnExport(index: 177, kind: func, item_index: 179, name: "i32.trunc_s:sat/f32")
    OnExport(index: 178, kind: func, item_index: 180, name: "i32.trunc_u:sat/f32")
    OnExport(index: 179, kind: func, item_index: 181, name: "i32.trunc_s:sat/f64")
    OnExport(index: 180, kind: func, item_index: 182, name: "i32.trunc_u:sat/f64")
    OnExport(index: 181, kind: func, item_index: 183, name: "i64.trunc_s:sat/f32")
    OnExport(index: 182, kind: func, item_index: 184, name: "i64.trunc_u:sat/f32")
    OnExport(index: 183, kind: func, item_index: 185, name: "i64.trunc_s:sat/f64")
    OnExport(index: 184, kind: func, item_index: 186, name: "i64.trunc_u:sat/f64")
    OnExport(index: 185, kind: func, item_index: 187, name: "v128.load")
    OnExport(index: 186, kind: func, item_index: 188, name: "v128.store")
    OnExport(index: 187, kind: func, item_index: 189, name: "v128.const")
    OnExport(index: 188, kind: func, item_index: 190, name: "v8x16.shuffle")
    OnExport(index: 189, kind: func, item_index: 191, name: "i8x16.splat")
    OnExport(index: 190, kind: func, item_index: 192, name: "i8x16.extract_lane_s")
    OnExport(index: 191, kind: func, item_index: 193, name: "i8x16.extract_lane_u")
    OnExport(index: 192, kind: func, item_index: 194, name: "i8x16.replace_lane")
    OnExport(index: 193, kind: func, item_index: 195, name: "i16x8.splat")
    OnExport(index: 194, kind: func, item_index: 196, name: "i16x8.extract_lane_s")
    OnExport(index: 195, kind: func, item_index: 197, name: "i16x8.extract_lane_u")
    OnExport(index: 196, kind: func, item_index: 198, name: "i16x8.replace_lane")
    OnExport(index: 197, kind: func, item_index: 199, name: "i32x4.splat")
    OnExport(index: 198, kind: func, item_index: 200, name: "i32x4.extract_lane")
    OnExport(index: 199, kind: func, item_index: 201, name: "i32x4.replace_lane")
    OnExport(index: 200, kind: func, item_index: 202, name: "i64x2.splat")
    OnExport(index: 201, kind: func, item_index: 203, name: "i64x2.extract_lane")
    OnExport(index: 202, kind: func, item_index: 204, name: "i64x2.replace_lane")
    OnExport(index: 203, kind: func, item_index: 205, name: "f32x4.splat")
    OnExport(index: 204, kind: func, item_index: 206, name: "f32x4.extract_lane")
    OnExport(index: 205, kind: func, item_index: 207, name: "f32x4.replace_lane")
    OnExport(index: 206, kind: func, item_index: 208, name: "f64x2.splat")
    OnExport(index: 207, kind: func, item_index: 209, name: "f64x2.extract_lane")
    OnExport(index: 208, kind: func, item_index: 210, name: "f64x2.replace_lane")
    OnExport(index: 209, kind: func, item_index: 211, name: "i8x16.eq")
    OnExport(index: 210, kind: func, item_index: 212, name: "i8x16.ne")
    OnExport(index: 211, kind: func, item_index: 213, name: "i8x16.lt_s")
    OnExport(index: 212, kind: func, item_index: 214, name: "i8x16.lt_u")
    OnExport(index: 213, kind: func, item_index: 215, name: "i8x16.gt_s")
    OnExport(index: 214, kind: func, item_index: 216, name: "i8x16.gt_u")
    OnExport(index: 215, kind: func, item_index: 217, name: "i8x16.le_s")
    OnExport(index: 216, kind: func, item_index: 218, name: "i8x16.le_u")
    OnExport(index: 217, kind: func, item_index: 219, name: "i8x16.ge_s")
    OnExport(index: 218, kind: func, item_index: 220, name: "i8x16.ge_u")
    OnExport(index: 219, kind: func, item_index: 221, name: "i16x8.eq")
    OnExport(index: 220, kind: func, item_index: 222, name: "i16x8.ne")
    OnExport(index: 221, kind: func, item_index: 223, name: "i16x8.lt_s")
    OnExport(index: 222, kind: func, item_index: 224, name: "i16x8.lt_u")
    OnExport(index: 223, kind: func, item_index: 225, name: "i16x8.gt_s")
    OnExport(index: 224, kind: func, item_index: 226, name: "i16x8.gt_u")
    OnExport(index: 225, kind: func, item_index: 227, name: "i16x8.le_s")
    OnExport(index: 226, kind: func, item_index: 228, name: "i16x8.le_u")
    OnExport(index: 227, kind: func, item_index: 229, name: "i16x8.ge_s")
    OnExport(index: 228, kind: func, item_index: 230, name: "i16x8.ge_u")
    OnExport(index: 229, kind: func, item_index: 231, name: "i32x4.eq")
    OnExport(index: 230, kind: func, item_index: 232, name: "i32x4.ne")
    OnExport(index: 231, kind: func, item_index: 233, name: "i32x4.lt_s")
    OnExport(index: 232, kind: func, item_index: 234, name: "i32x4.lt_u")
    OnExport(index: 233, kind: func, item_index: 235, name: "i32x4.gt_s")
    OnExport(index: 234, kind: func, item_index: 236, name: "i32x4.gt_u")
    OnExport(index: 235, kind: func, item_index: 237, name: "i32x4.le_s")
    OnExport(index: 236, kind: func, item_index: 238, name: "i32x4.le_u")
    OnExport(index: 237, kind: func, item_index: 239, name: "i32x4.ge_s")
    OnExport(index: 238, kind: func, item_index: 240, name: "i32x4.ge_u")
    OnExport(index: 239, kind: func, item_index: 241, name: "f32x4.eq")
    OnExport(index: 240, kind: func, item_index: 242, name: "f32x4.ne")
    OnExport(index: 241, kind: func, item_index: 243, name: "f32x4.lt")
    OnExport(index: 242, kind: func, item_index: 244, name: "f32x4.gt")
    OnExport(index: 243, kind: func, item_index: 245, name: "f32x4.le")
    OnExport(index: 244, kind: func, item_index: 246, name: "f32x4.ge")
    OnExport(index: 245, kind: func, item_index: 247, name: "f64x2.eq")
    OnExport(index: 246, kind: func, item_index: 248, name: "f64x2.ne")
    OnExport(index: 247, kind: func, item_index: 249, name: "f64x2.lt")
    OnExport(index: 248, kind: func, item_index: 250, name: "f64x2.gt")
    OnExport(index: 249, kind: func, item_index: 251, name: "f64x2.le")
    OnExport(index: 250, kind: func, item_index: 252, name: "f64x2.ge")
    OnExport(index: 251, kind: func, item_index: 253, name: "v128.not")
    OnExport(index: 252, kind: func, item_index: 254, name: "v128.and")
    OnExport(index: 253, kind: func, item_index: 255, name: "v128.or")
    OnExport(index: 254, kind: func, item_index: 256, name: "v128.xor")
    OnExport(index: 255, kind: func, item_index: 257, name: "v128.bitselect")
    OnExport(index: 256, kind: func, item_index: 258, name: "i8x16.neg")
    OnExport(index: 257, kind: func, item_index: 259, name: "i8x16.any_true")
    OnExport(index: 258, kind: func, item_index: 260, name: "i8x16.all_true")
    OnExport(index: 259, kind: func, item_index: 261, name: "i8x16.shl")
    OnExport(index: 260, kind: func, item_index: 262, name: "i8x16.shr_s")
    OnExport(index: 261, kind: func, item_index: 263, name: "i8x16.shr_u")
    OnExport(index: 262, kind: func, item_index: 264, name: "i8x16.add")
    OnExport(index: 263, kind: func, item_index: 265, name: "i8x16.add_saturate_s")
    OnExport(index: 264, kind: func, item_index: 266, name: "i8x16.add_saturate_u")
    OnExport(index: 265, kind: func, item_index: 267, name: "i8x16.sub")
    OnExport(index: 266, kind: func, item_index: 268, name: "i8x16.sub_saturate_s")
    OnExport(index: 267, kind: func, item_index: 269, name: "i8x16.sub_saturate_u")
    OnExport(index: 268, kind: func, item_index: 270, name: "i8x16.mul")
    OnExport(index: 269, kind: func, item_index: 271, name: "i16x8.neg")
    OnExport(index: 270, kind: func, item_index: 272, name: "i16x8.any_true")
    OnExport(index: 271, kind: func, item_index: 273, name: "i16x8.all_true")
    OnExport(index: 272, kind: func, item_index: 274, name: "i16x8.shl")
    OnExport(index: 273, kind: func, item_index: 275, name: "i16x8.shr_s")
    OnExport(index: 274, kind: func, item_index: 276, name: "i16x8.shr_u")
    OnExport(index: 275, kind: func, item_index: 277, name: "i16x8.add")
    OnExport(index: 276, kind: func, item_index: 278, name: "i16x8.add_saturate_s")
    OnExport(index: 277, kind: func, item_index: 279, name: "i16x8.add_saturate_u")
    OnExport(index: 278, kind: func, item_index: 280, name: "i16x8.sub")
    OnExport(index: 279, kind: func, item_index: 281, name: "i16x8.sub_saturate_s")
    OnExport(index: 280, kind: func, item_index: 282, name: "i16x8.sub_saturate_u")
    OnExport(index: 281, kind: func, item_index: 283, name: "i16x8.mul")
    OnExport(index: 282, kind: func, item_index: 284, name: "i32x4.neg")
    OnExport(index: 283, kind: func, item_index: 285, name: "i32x4.any_true")
    OnExport(index: 284, kind: func, item_index: 286, name: "i32x4.all_true")
    OnExport(index: 285, kind: func, item_index: 287, name: "i32x4.shl")
    OnExport(index: 286, kind: func, item_index: 288, name: "i32x4.shr_s")
    OnExport(index: 287, kind: func, item_index: 289, name: "i32x4.shr_u")
    OnExport(index: 288, kind: func, item_index: 290, name: "i32x4.add")
    OnExport(index: 289, kind: func, item_index: 291, name: "i32x4.sub")
    OnExport(index: 290, kind: func, item_index: 292, name: "i32x4.mul")
    OnExport(index: 291, kind: func, item_index: 293, name: "i64x2.neg")
    OnExport(index: 292, kind: func, item_index: 294, name: "i64x2.any_true")
    OnExport(index: 293, kind: func, item_index: 295, name: "i64x2.all_true")
    OnExport(index: 294, kind: func, item_index: 296, name: "i64x2.shl")
    OnExport(index: 295, kind: func, item_index: 297, name: "i64x2.shr_s")
    OnExport(index: 296, kind: func, item_index: 298, name: "i64x2.shr_u")
    OnExport(index: 297, kind: func, item_index: 299, name: "i64x2.add")
    OnExport(index: 298, kind: func, item_index: 300, name: "i64x2.sub")
    OnExport(index: 299, kind: func, item_index: 301, name: "f32x4.abs")
    OnExport(index: 300, kind: func, item_index: 302, name: "f32x4.neg")
    OnExport(index: 301, kind: func, item_index: 303, name: "f32x4.sqrt")
    OnExport(index: 302, kind: func, item_index: 304, name: "f32x4.add")
    OnExport(index: 303, kind: func, item_index: 305, name: "f32x4.sub")
    OnExport(index: 304, kind: func, item_index: 306, name: "f32x4.mul")
    OnExport(index: 305, kind: func, item_index: 307, name: "f32x4.div")
    OnExport(index: 306, kind: func, item_index: 308, name: "f32x4.min")
    OnExport(index: 307, kind: func, item_index: 309, name: "f32x4.max")
    OnExport(index: 308, kind: func, item_index: 310, name: "f64x2.abs")
    OnExport(index: 309, kind: func, item_index: 311, name: "f64x2.neg")
    OnExport(index: 310, kind: func, item_index: 312, name: "f64x2.sqrt")
    OnExport(index: 311, kind: func, item_index: 313, name: "f64x2.add")
    OnExport(index: 312, kind: func, item_index: 314, name: "f64x2.sub")
    OnExport(index: 313, kind: func, item_index: 315, name: "f64x2.mul")
    OnExport(index: 314, kind: func, item_index: 316, name: "f64x2.div")
    OnExport(index: 315, kind: func, item_index: 317, name: "f64x2.min")
    OnExport(index: 316, kind: func, item_index: 318, name: "f64x2.max")
    OnExport(index: 317, kind: func, item_index: 319, name: "i32x4.trunc_sat_f32x4_s")
    OnExport(index: 318, kind: func, item_index: 320, name: "i32x4.trunc_sat_f32x4_u")
    OnExport(index: 319, kind: func, item_index: 321, name: "i64x2.trunc_sat_f64x2_s")
    OnExport(index: 320, kind: func, item_index: 322, name: "i64x2.trunc_sat_f64x2_u")
    OnExport(index: 321, kind: func, item_index: 323, name: "f32x4.convert_i32x4_s")
    OnExport(index: 322, kind: func, item_index: 324, name: "f32x4.convert_i32x4_u")
    OnExport(index: 323, kind: func, item_index: 325, name: "f64x2.convert_i64x2_s")
    OnExport(index: 324, kind: func, item_index: 326, name: "f64x2.convert_i64x2_u")
    OnExport(index: 325, kind: func, item_index: 327, name: "atomic.notify")
    OnExport(index: 326, kind: func, item_index: 328, name: "i32.atomic.wait")
    OnExport(index: 327, kind: func, item_index: 329, name: "i64.atomic.wait")
    OnExport(index: 328, kind: func, item_index: 330, name: "i32.atomic.load")
    OnExport(index: 329, kind: func, item_index: 331, name: "i64.atomic.load")
    OnExport(index: 330, kind: func, item_index: 332, name: "i32.atomic.load8_u")
    OnExport(index: 331, kind: func, item_index: 333, name: "i32.atomic.load16_u")
    OnExport(index: 332, kind: func, item_index: 334, name: "i64.atomic.load8_u")
    OnExport(index: 333, kind: func, item_index: 335, name: "i64.atomic.load16_u")
    OnExport(index: 334, kind: func, item_index: 336, name: "i64.atomic.load32_u")
    OnExport(index: 335, kind: func, item_index: 337, name: "i32.atomic.store")
    OnExport(index: 336, kind: func, item_index: 338, name: "i64.atomic.store")
    OnExport(index: 337, kind: func, item_index: 339, name: "i32.atomic.store8")
    OnExport(index: 338, kind: func, item_index: 340, name: "i32.atomic.store16")
    OnExport(index: 339, kind: func, item_index: 341, name: "i64.atomic.store8")
    OnExport(index: 340, kind: func, item_index: 342, name: "i64.atomic.store16")
    OnExport(index: 341, kind: func, item_index: 343, name: "i64.atomic.store32")
    OnExport(index: 342, kind: func, item_index: 344, name: "i32.atomic.rmw.add")
    OnExport(index: 343, kind: func, item_index: 345, name: "i64.atomic.rmw.add")
    OnExport(index: 344, kind: func, item_index: 346, name: "i32.atomic.rmw8.add_u")
    OnExport(index: 345, kind: func, item_index: 347, name: "i32.atomic.rmw16.add_u")
    OnExport(index: 346, kind: func, item_index: 348, name: "i64.atomic.rmw8.add_u")
    OnExport(index: 347, kind: func, item_index: 349, name: "i64.atomic.rmw16.add_u")
    OnExport(index: 348, kind: func, item_index: 350, name: "i64.atomic.rmw32.add_u")
    OnExport(index: 349, kind: func, item_index: 351, name: "i32.atomic.rmw.sub")
    OnExport(index: 350, kind: func, item_index: 352, name: "i64.atomic.rmw.sub")
    OnExport(index: 351, kind: func, item_index: 353, name: "i32.atomic.rmw8.sub_u")
    OnExport(index: 352, kind: func, item_index: 354, name: "i32.atomic.rmw16.sub_u")
    OnExport(index: 353, kind: func, item_index: 355, name: "i64.atomic.rmw8.sub_u")
    OnExport(index: 354, kind: func, item_index: 356, name: "i64.atomic.rmw16.sub_u")
    OnExport(index: 355, kind: func, item_index: 357, name: "i64.atomic.rmw32.sub_u")
    OnExport(index: 356, kind: func, item_index: 358, name: "i32.atomic.rmw.and")
    OnExport(index: 357, kind: func, item_index: 359, name: "i64.atomic.rmw.and")
    OnExport(index: 358, kind: func, item_index: 360, name: "i32.atomic.rmw8.and_u")
    OnExport(index: 359, kind: func, item_index: 361, name: "i32.atomic.rmw16.and_u")
    OnExport(index: 360, kind: func, item_index: 362, name: "i64.atomic.rmw8.and_u")
    OnExport(index: 361, kind: func, item_index: 363, name: "i64.atomic.rmw16.and_u")
    OnExport(index: 362, kind: func, item_index: 364, name: "i64.atomic.rmw32.and_u")
    OnExport(index: 363, kind: func, item_index: 365, name: "i32.atomic.rmw.or")
    OnExport(index: 364, kind: func, item_index: 366, name: "i64.atomic.rmw.or")
    OnExport(index: 365, kind: func, item_index: 367, name: "i32.atomic.rmw8.or_u")
    OnExport(index: 366, kind: func, item_index: 368, name: "i32.atomic.rmw16.or_u")
    OnExport(index: 367, kind: func, item_index: 369, name: "i64.atomic.rmw8.or_u")
    OnExport(index: 368, kind: func, item_index: 370, name: "i64.atomic.rmw16.or_u")
    OnExport(index: 369, kind: func, item_index: 371, name: "i64.atomic.rmw32.or_u")
    OnExport(index: 370, kind: func, item_index: 372, name: "i32.atomic.rmw.xor")
    OnExport(index: 371, kind: func, item_index: 373, name: "i64.atomic.rmw.xor")
    OnExport(index: 372, kind: func, item_index: 374, name: "i32.atomic.rmw8.xor_u")
    OnExport(index: 373, kind: func, item_index: 375, name: "i32.atomic.rmw16.xor_u")
    OnExport(index: 374, kind: func, item_index: 376, name: "i64.atomic.rmw8.xor_u")
    OnExport(index: 375, kind: func, item_index: 377, name: "i64.atomic.rmw16.xor_u")
    OnExport(index: 376, kind: func, item_index: 378, name: "i64.atomic.rmw32.xor_u")
    OnExport(index: 377, kind: func, item_index: 379, name: "i32.atomic.rmw.xchg")
    OnExport(index: 378, kind: func, item_index: 380, name: "i64.atomic.rmw.xchg")
    OnExport(index: 379, kind: func, item_index: 381, name: "i32.atomic.rmw8.xchg_u")
    OnExport(index: 380, kind: func, item_index: 382, name: "i32.atomic.rmw16.xchg_u")
    OnExport(index: 381, kind: func, item_index: 383, name: "i64.atomic.rmw8.xchg_u")
    OnExport(index: 382, kind: func, item_index: 384, name: "i64.atomic.rmw16.xchg_u")
    OnExport(index: 383, kind: func, item_index: 385, name: "i64.atomic.rmw32.xchg_u")
    OnExport(index: 384, kind: func, item_index: 386, name: "i32.atomic.rmw.cmpxchg")
    OnExport(index: 385, kind: func, item_index: 387, name: "i64.atomic.rmw.cmpxchg")
    OnExport(index: 386, kind: func, item_index: 388, name: "i32.atomic.rmw8.cmpxchg_u")
    OnExport(index: 387, kind: func, item_index: 389, name: "i32.atomic.rmw16.cmpxchg_u")
    OnExport(index: 388, kind: func, item_index: 390, name: "i64.atomic.rmw8.cmpxchg_u")
    OnExport(index: 389, kind: func, item_index: 391, name: "i64.atomic.rmw16.cmpxchg_u")
    OnExport(index: 390, kind: func, item_index: 392, name: "i64.atomic.rmw32.cmpxchg_u")
  EndExportSection
  BeginElemSection(8)
    OnElemSegmentCount(1)
    BeginElemSegment(index: 0, table_index: 0, passive: false)
    BeginElemSegmentInitExpr(0)
    OnInitExprI32ConstExpr(index: 0, value: 0)
    EndElemSegmentInitExpr(0)
    OnElemSegmentFunctionIndexCount(index: 0, count: 2)
    OnElemSegmentFunctionIndex(index: 0, func_index: 1)
    OnElemSegmentFunctionIndex(index: 0, func_index: 1)
    EndElemSegment(0)
  EndElemSection
  BeginCodeSection(7547)
    OnFunctionBodyCount(392)
    BeginFunctionBody(1, size:2)
    OnLocalDeclCount(0)
    EndFunctionBody(1)
    BeginFunctionBody(2, size:3)
    OnLocalDeclCount(0)
    OnUnreachableExpr
    EndFunctionBody(2)
    BeginFunctionBody(3, size:4)
    OnLocalDeclCount(0)
    OnBrExpr(depth: 0)
    EndFunctionBody(3)
    BeginFunctionBody(4, size:7)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnBrTableExpr(num_targets: 0, depths: [], default: 0)
    EndFunctionBody(4)
    BeginFunctionBody(5, size:3)
    OnLocalDeclCount(0)
    OnReturnExpr
    EndFunctionBody(5)
    BeginFunctionBody(6, size:4)
    OnLocalDeclCount(0)
    OnCallExpr(func_index: 1)
    EndFunctionBody(6)
    BeginFunctionBody(7, size:7)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnCallIndirectExpr(sig_index: 0)
    EndFunctionBody(7)
    BeginFunctionBody(8, size:4)
    OnLocalDeclCount(0)
    OnReturnCallExpr(func_index: 1)
    EndFunctionBody(8)
    BeginFunctionBody(9, size:7)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnReturnCallIndirectExpr(sig_index: 0)
    EndFunctionBody(9)
    BeginFunctionBody(10, size:5)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnDropExpr
    EndFunctionBody(10)
    BeginFunctionBody(11, size:10)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnI32ConstExpr(3 (0x3))
    OnSelectExpr
    OnDropExpr
    EndFunctionBody(11)
    BeginFunctionBody(12, size:7)
    OnLocalDeclCount(1)
    OnLocalDecl(index: 0, count: 1, type: i32)
    OnLocalGetExpr(index: 0)
    OnDropExpr
    EndFunctionBody(12)
    BeginFunctionBody(13, size:8)
    OnLocalDeclCount(1)
    OnLocalDecl(index: 0, count: 1, type: i32)
    OnI32ConstExpr(1 (0x1))
    OnLocalSetExpr(index: 0)
    EndFunctionBody(13)
    BeginFunctionBody(14, size:9)
    OnLocalDeclCount(1)
    OnLocalDecl(index: 0, count: 1, type: i32)
    OnI32ConstExpr(1 (0x1))
    OnLocalTeeExpr(index: 0)
    OnDropExpr
    EndFunctionBody(14)
    BeginFunctionBody(15, size:5)
    OnLocalDeclCount(0)
    OnGlobalGetExpr(index: 0)
    OnDropExpr
    EndFunctionBody(15)
    BeginFunctionBody(16, size:6)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnGlobalSetExpr(index: 0)
    EndFunctionBody(16)
    BeginFunctionBody(17, size:8)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnLoadExpr(opcode: "i32.load" (40), align log2: 2, offset: 2)
    OnDropExpr
    EndFunctionBody(17)
    BeginFunctionBody(18, size:8)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnLoadExpr(opcode: "i64.load" (41), align log2: 3, offset: 2)
    OnDropExpr
    EndFunctionBody(18)
    BeginFunctionBody(19, size:8)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnLoadExpr(opcode: "f32.load" (42), align log2: 2, offset: 2)
    OnDropExpr
    EndFunctionBody(19)
    BeginFunctionBody(20, size:8)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnLoadExpr(opcode: "f64.load" (43), align log2: 3, offset: 2)
    OnDropExpr
    EndFunctionBody(20)
    BeginFunctionBody(21, size:8)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnLoadExpr(opcode: "i32.load8_s" (44), align log2: 0, offset: 2)
    OnDropExpr
    EndFunctionBody(21)
    BeginFunctionBody(22, size:8)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnLoadExpr(opcode: "i32.load8_u" (45), align log2: 0, offset: 2)
    OnDropExpr
    EndFunctionBody(22)
    BeginFunctionBody(23, size:8)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnLoadExpr(opcode: "i32.load16_s" (46), align log2: 1, offset: 2)
    OnDropExpr
    EndFunctionBody(23)
    BeginFunctionBody(24, size:8)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnLoadExpr(opcode: "i32.load16_u" (47), align log2: 1, offset: 2)
    OnDropExpr
    EndFunctionBody(24)
    BeginFunctionBody(25, size:8)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnLoadExpr(opcode: "i64.load8_s" (48), align log2: 0, offset: 2)
    OnDropExpr
    EndFunctionBody(25)
    BeginFunctionBody(26, size:8)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnLoadExpr(opcode: "i64.load8_u" (49), align log2: 0, offset: 2)
    OnDropExpr
    EndFunctionBody(26)
    BeginFunctionBody(27, size:8)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnLoadExpr(opcode: "i64.load16_s" (50), align log2: 1, offset: 2)
    OnDropExpr
    EndFunctionBody(27)
    BeginFunctionBody(28, size:8)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnLoadExpr(opcode: "i64.load16_u" (51), align log2: 1, offset: 2)
    OnDropExpr
    EndFunctionBody(28)
    BeginFunctionBody(29, size:8)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnLoadExpr(opcode: "i64.load32_s" (52), align log2: 2, offset: 2)
    OnDropExpr
    EndFunctionBody(29)
    BeginFunctionBody(30, size:8)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnLoadExpr(opcode: "i64.load32_u" (53), align log2: 2, offset: 2)
    OnDropExpr
    EndFunctionBody(30)
    BeginFunctionBody(31, size:9)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnStoreExpr(opcode: "i32.store" (54), align log2: 2, offset: 2)
    EndFunctionBody(31)
    BeginFunctionBody(32, size:9)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnStoreExpr(opcode: "i64.store" (55), align log2: 3, offset: 2)
    EndFunctionBody(32)
    BeginFunctionBody(33, size:12)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnF32ConstExpr(2 (0x0440000000))
    OnStoreExpr(opcode: "f32.store" (56), align log2: 2, offset: 2)
    EndFunctionBody(33)
    BeginFunctionBody(34, size:16)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnF64ConstExpr(2 (0x084000000000000000))
    OnStoreExpr(opcode: "f64.store" (57), align log2: 3, offset: 2)
    EndFunctionBody(34)
    BeginFunctionBody(35, size:9)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnStoreExpr(opcode: "i32.store8" (58), align log2: 0, offset: 2)
    EndFunctionBody(35)
    BeginFunctionBody(36, size:9)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnStoreExpr(opcode: "i32.store16" (59), align log2: 1, offset: 2)
    EndFunctionBody(36)
    BeginFunctionBody(37, size:9)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnStoreExpr(opcode: "i64.store8" (60), align log2: 0, offset: 2)
    EndFunctionBody(37)
    BeginFunctionBody(38, size:9)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnStoreExpr(opcode: "i64.store16" (61), align log2: 1, offset: 2)
    EndFunctionBody(38)
    BeginFunctionBody(39, size:9)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnStoreExpr(opcode: "i64.store32" (62), align log2: 2, offset: 2)
    EndFunctionBody(39)
    BeginFunctionBody(40, size:5)
    OnLocalDeclCount(0)
    OnMemorySizeExpr
    OnDropExpr
    EndFunctionBody(40)
    BeginFunctionBody(41, size:7)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnMemoryGrowExpr
    OnDropExpr
    EndFunctionBody(41)
    BeginFunctionBody(42, size:5)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnDropExpr
    EndFunctionBody(42)
    BeginFunctionBody(43, size:5)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnDropExpr
    EndFunctionBody(43)
    BeginFunctionBody(44, size:8)
    OnLocalDeclCount(0)
    OnF32ConstExpr(1 (0x043f800000))
    OnDropExpr
    EndFunctionBody(44)
    BeginFunctionBody(45, size:12)
    OnLocalDeclCount(0)
    OnF64ConstExpr(1 (0x083ff0000000000000))
    OnDropExpr
    EndFunctionBody(45)
    BeginFunctionBody(46, size:6)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnConvertExpr("i32.eqz" (69))
    OnDropExpr
    EndFunctionBody(46)
    BeginFunctionBody(47, size:8)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnCompareExpr("i32.eq" (70))
    OnDropExpr
    EndFunctionBody(47)
    BeginFunctionBody(48, size:8)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnCompareExpr("i32.ne" (71))
    OnDropExpr
    EndFunctionBody(48)
    BeginFunctionBody(49, size:8)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnCompareExpr("i32.lt_s" (72))
    OnDropExpr
    EndFunctionBody(49)
    BeginFunctionBody(50, size:8)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnCompareExpr("i32.lt_u" (73))
    OnDropExpr
    EndFunctionBody(50)
    BeginFunctionBody(51, size:8)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnCompareExpr("i32.gt_s" (74))
    OnDropExpr
    EndFunctionBody(51)
    BeginFunctionBody(52, size:8)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnCompareExpr("i32.gt_u" (75))
    OnDropExpr
    EndFunctionBody(52)
    BeginFunctionBody(53, size:8)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnCompareExpr("i32.le_s" (76))
    OnDropExpr
    EndFunctionBody(53)
    BeginFunctionBody(54, size:8)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnCompareExpr("i32.le_u" (77))
    OnDropExpr
    EndFunctionBody(54)
    BeginFunctionBody(55, size:8)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnCompareExpr("i32.ge_s" (78))
    OnDropExpr
    EndFunctionBody(55)
    BeginFunctionBody(56, size:8)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnCompareExpr("i32.ge_u" (79))
    OnDropExpr
    EndFunctionBody(56)
    BeginFunctionBody(57, size:6)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnConvertExpr("i64.eqz" (80))
    OnDropExpr
    EndFunctionBody(57)
    BeginFunctionBody(58, size:8)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnCompareExpr("i64.eq" (81))
    OnDropExpr
    EndFunctionBody(58)
    BeginFunctionBody(59, size:8)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnCompareExpr("i64.ne" (82))
    OnDropExpr
    EndFunctionBody(59)
    BeginFunctionBody(60, size:8)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnCompareExpr("i64.lt_s" (83))
    OnDropExpr
    EndFunctionBody(60)
    BeginFunctionBody(61, size:8)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnCompareExpr("i64.lt_u" (84))
    OnDropExpr
    EndFunctionBody(61)
    BeginFunctionBody(62, size:8)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnCompareExpr("i64.gt_s" (85))
    OnDropExpr
    EndFunctionBody(62)
    BeginFunctionBody(63, size:8)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnCompareExpr("i64.gt_u" (86))
    OnDropExpr
    EndFunctionBody(63)
    BeginFunctionBody(64, size:8)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnCompareExpr("i64.le_s" (87))
    OnDropExpr
    EndFunctionBody(64)
    BeginFunctionBody(65, size:8)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnCompareExpr("i64.le_u" (88))
    OnDropExpr
    EndFunctionBody(65)
    BeginFunctionBody(66, size:8)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnCompareExpr("i64.ge_s" (89))
    OnDropExpr
    EndFunctionBody(66)
    BeginFunctionBody(67, size:8)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnCompareExpr("i64.ge_u" (90))
    OnDropExpr
    EndFunctionBody(67)
    BeginFunctionBody(68, size:14)
    OnLocalDeclCount(0)
    OnF32ConstExpr(1 (0x043f800000))
    OnF32ConstExpr(2 (0x0440000000))
    OnCompareExpr("f32.eq" (91))
    OnDropExpr
    EndFunctionBody(68)
    BeginFunctionBody(69, size:14)
    OnLocalDeclCount(0)
    OnF32ConstExpr(1 (0x043f800000))
    OnF32ConstExpr(2 (0x0440000000))
    OnCompareExpr("f32.ne" (92))
    OnDropExpr
    EndFunctionBody(69)
    BeginFunctionBody(70, size:14)
    OnLocalDeclCount(0)
    OnF32ConstExpr(1 (0x043f800000))
    OnF32ConstExpr(2 (0x0440000000))
    OnCompareExpr("f32.lt" (93))
    OnDropExpr
    EndFunctionBody(70)
    BeginFunctionBody(71, size:14)
    OnLocalDeclCount(0)
    OnF32ConstExpr(1 (0x043f800000))
    OnF32ConstExpr(2 (0x0440000000))
    OnCompareExpr("f32.gt" (94))
    OnDropExpr
    EndFunctionBody(71)
    BeginFunctionBody(72, size:14)
    OnLocalDeclCount(0)
    OnF32ConstExpr(1 (0x043f800000))
    OnF32ConstExpr(2 (0x0440000000))
    OnCompareExpr("f32.le" (95))
    OnDropExpr
    EndFunctionBody(72)
    BeginFunctionBody(73, size:14)
    OnLocalDeclCount(0)
    OnF32ConstExpr(1 (0x043f800000))
    OnF32ConstExpr(2 (0x0440000000))
    OnCompareExpr("f32.ge" (96))
    OnDropExpr
    EndFunctionBody(73)
    BeginFunctionBody(74, size:22)
    OnLocalDeclCount(0)
    OnF64ConstExpr(1 (0x083ff0000000000000))
    OnF64ConstExpr(2 (0x084000000000000000))
    OnCompareExpr("f64.eq" (97))
    OnDropExpr
    EndFunctionBody(74)
    BeginFunctionBody(75, size:22)
    OnLocalDeclCount(0)
    OnF64ConstExpr(1 (0x083ff0000000000000))
    OnF64ConstExpr(2 (0x084000000000000000))
    OnCompareExpr("f64.ne" (98))
    OnDropExpr
    EndFunctionBody(75)
    BeginFunctionBody(76, size:22)
    OnLocalDeclCount(0)
    OnF64ConstExpr(1 (0x083ff0000000000000))
    OnF64ConstExpr(2 (0x084000000000000000))
    OnCompareExpr("f64.lt" (99))
    OnDropExpr
    EndFunctionBody(76)
    BeginFunctionBody(77, size:22)
    OnLocalDeclCount(0)
    OnF64ConstExpr(1 (0x083ff0000000000000))
    OnF64ConstExpr(2 (0x084000000000000000))
    OnCompareExpr("f64.gt" (100))
    OnDropExpr
    EndFunctionBody(77)
    BeginFunctionBody(78, size:22)
    OnLocalDeclCount(0)
    OnF64ConstExpr(1 (0x083ff0000000000000))
    OnF64ConstExpr(2 (0x084000000000000000))
    OnCompareExpr("f64.le" (101))
    OnDropExpr
    EndFunctionBody(78)
    BeginFunctionBody(79, size:22)
    OnLocalDeclCount(0)
    OnF64ConstExpr(1 (0x083ff0000000000000))
    OnF64ConstExpr(2 (0x084000000000000000))
    OnCompareExpr("f64.ge" (102))
    OnDropExpr
    EndFunctionBody(79)
    BeginFunctionBody(80, size:6)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnUnaryExpr("i32.clz" (103))
    OnDropExpr
    EndFunctionBody(80)
    BeginFunctionBody(81, size:6)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnUnaryExpr("i32.ctz" (104))
    OnDropExpr
    EndFunctionBody(81)
    BeginFunctionBody(82, size:6)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnUnaryExpr("i32.popcnt" (105))
    OnDropExpr
    EndFunctionBody(82)
    BeginFunctionBody(83, size:8)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnBinaryExpr("i32.add" (106))
    OnDropExpr
    EndFunctionBody(83)
    BeginFunctionBody(84, size:8)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnBinaryExpr("i32.sub" (107))
    OnDropExpr
    EndFunctionBody(84)
    BeginFunctionBody(85, size:8)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnBinaryExpr("i32.mul" (108))
    OnDropExpr
    EndFunctionBody(85)
    BeginFunctionBody(86, size:8)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnBinaryExpr("i32.div_s" (109))
    OnDropExpr
    EndFunctionBody(86)
    BeginFunctionBody(87, size:8)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnBinaryExpr("i32.div_u" (110))
    OnDropExpr
    EndFunctionBody(87)
    BeginFunctionBody(88, size:8)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnBinaryExpr("i32.rem_s" (111))
    OnDropExpr
    EndFunctionBody(88)
    BeginFunctionBody(89, size:8)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnBinaryExpr("i32.rem_u" (112))
    OnDropExpr
    EndFunctionBody(89)
    BeginFunctionBody(90, size:8)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnBinaryExpr("i32.and" (113))
    OnDropExpr
    EndFunctionBody(90)
    BeginFunctionBody(91, size:8)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnBinaryExpr("i32.or" (114))
    OnDropExpr
    EndFunctionBody(91)
    BeginFunctionBody(92, size:8)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnBinaryExpr("i32.xor" (115))
    OnDropExpr
    EndFunctionBody(92)
    BeginFunctionBody(93, size:8)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnBinaryExpr("i32.shl" (116))
    OnDropExpr
    EndFunctionBody(93)
    BeginFunctionBody(94, size:8)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnBinaryExpr("i32.shr_s" (117))
    OnDropExpr
    EndFunctionBody(94)
    BeginFunctionBody(95, size:8)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnBinaryExpr("i32.shr_u" (118))
    OnDropExpr
    EndFunctionBody(95)
    BeginFunctionBody(96, size:8)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnBinaryExpr("i32.rotl" (119))
    OnDropExpr
    EndFunctionBody(96)
    BeginFunctionBody(97, size:8)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnBinaryExpr("i32.rotr" (120))
    OnDropExpr
    EndFunctionBody(97)
    BeginFunctionBody(98, size:6)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnUnaryExpr("i64.clz" (121))
    OnDropExpr
    EndFunctionBody(98)
    BeginFunctionBody(99, size:6)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnUnaryExpr("i64.ctz" (122))
    OnDropExpr
    EndFunctionBody(99)
    BeginFunctionBody(100, size:6)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnUnaryExpr("i64.popcnt" (123))
    OnDropExpr
    EndFunctionBody(100)
    BeginFunctionBody(101, size:8)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnBinaryExpr("i64.add" (124))
    OnDropExpr
    EndFunctionBody(101)
    BeginFunctionBody(102, size:8)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnBinaryExpr("i64.sub" (125))
    OnDropExpr
    EndFunctionBody(102)
    BeginFunctionBody(103, size:8)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnBinaryExpr("i64.mul" (126))
    OnDropExpr
    EndFunctionBody(103)
    BeginFunctionBody(104, size:8)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnBinaryExpr("i64.div_s" (127))
    OnDropExpr
    EndFunctionBody(104)
    BeginFunctionBody(105, size:8)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnBinaryExpr("i64.div_u" (128))
    OnDropExpr
    EndFunctionBody(105)
    BeginFunctionBody(106, size:8)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnBinaryExpr("i64.rem_s" (129))
    OnDropExpr
    EndFunctionBody(106)
    BeginFunctionBody(107, size:8)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnBinaryExpr("i64.rem_u" (130))
    OnDropExpr
    EndFunctionBody(107)
    BeginFunctionBody(108, size:8)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnBinaryExpr("i64.and" (131))
    OnDropExpr
    EndFunctionBody(108)
    BeginFunctionBody(109, size:8)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnBinaryExpr("i64.or" (132))
    OnDropExpr
    EndFunctionBody(109)
    BeginFunctionBody(110, size:8)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnBinaryExpr("i64.xor" (133))
    OnDropExpr
    EndFunctionBody(110)
    BeginFunctionBody(111, size:8)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnBinaryExpr("i64.shl" (134))
    OnDropExpr
    EndFunctionBody(111)
    BeginFunctionBody(112, size:8)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnBinaryExpr("i64.shr_s" (135))
    OnDropExpr
    EndFunctionBody(112)
    BeginFunctionBody(113, size:8)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnBinaryExpr("i64.shr_u" (136))
    OnDropExpr
    EndFunctionBody(113)
    BeginFunctionBody(114, size:8)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnBinaryExpr("i64.rotl" (137))
    OnDropExpr
    EndFunctionBody(114)
    BeginFunctionBody(115, size:8)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnBinaryExpr("i64.rotr" (138))
    OnDropExpr
    EndFunctionBody(115)
    BeginFunctionBody(116, size:9)
    OnLocalDeclCount(0)
    OnF32ConstExpr(1 (0x043f800000))
    OnUnaryExpr("f32.abs" (139))
    OnDropExpr
    EndFunctionBody(116)
    BeginFunctionBody(117, size:9)
    OnLocalDeclCount(0)
    OnF32ConstExpr(1 (0x043f800000))
    OnUnaryExpr("f32.neg" (140))
    OnDropExpr
    EndFunctionBody(117)
    BeginFunctionBody(118, size:9)
    OnLocalDeclCount(0)
    OnF32ConstExpr(1 (0x043f800000))
    OnUnaryExpr("f32.ceil" (141))
    OnDropExpr
    EndFunctionBody(118)
    BeginFunctionBody(119, size:9)
    OnLocalDeclCount(0)
    OnF32ConstExpr(1 (0x043f800000))
    OnUnaryExpr("f32.floor" (142))
    OnDropExpr
    EndFunctionBody(119)
    BeginFunctionBody(120, size:9)
    OnLocalDeclCount(0)
    OnF32ConstExpr(1 (0x043f800000))
    OnUnaryExpr("f32.trunc" (143))
    OnDropExpr
    EndFunctionBody(120)
    BeginFunctionBody(121, size:9)
    OnLocalDeclCount(0)
    OnF32ConstExpr(1 (0x043f800000))
    OnUnaryExpr("f32.nearest" (144))
    OnDropExpr
    EndFunctionBody(121)
    BeginFunctionBody(122, size:9)
    OnLocalDeclCount(0)
    OnF32ConstExpr(1 (0x043f800000))
    OnUnaryExpr("f32.sqrt" (145))
    OnDropExpr
    EndFunctionBody(122)
    BeginFunctionBody(123, size:14)
    OnLocalDeclCount(0)
    OnF32ConstExpr(1 (0x043f800000))
    OnF32ConstExpr(2 (0x0440000000))
    OnBinaryExpr("f32.add" (146))
    OnDropExpr
    EndFunctionBody(123)
    BeginFunctionBody(124, size:14)
    OnLocalDeclCount(0)
    OnF32ConstExpr(1 (0x043f800000))
    OnF32ConstExpr(2 (0x0440000000))
    OnBinaryExpr("f32.sub" (147))
    OnDropExpr
    EndFunctionBody(124)
    BeginFunctionBody(125, size:14)
    OnLocalDeclCount(0)
    OnF32ConstExpr(1 (0x043f800000))
    OnF32ConstExpr(2 (0x0440000000))
    OnBinaryExpr("f32.mul" (148))
    OnDropExpr
    EndFunctionBody(125)
    BeginFunctionBody(126, size:14)
    OnLocalDeclCount(0)
    OnF32ConstExpr(1 (0x043f800000))
    OnF32ConstExpr(2 (0x0440000000))
    OnBinaryExpr("f32.div" (149))
    OnDropExpr
    EndFunctionBody(126)
    BeginFunctionBody(127, size:14)
    OnLocalDeclCount(0)
    OnF32ConstExpr(1 (0x043f800000))
    OnF32ConstExpr(2 (0x0440000000))
    OnBinaryExpr("f32.min" (150))
    OnDropExpr
    EndFunctionBody(127)
    BeginFunctionBody(128, size:14)
    OnLocalDeclCount(0)
    OnF32ConstExpr(1 (0x043f800000))
    OnF32ConstExpr(2 (0x0440000000))
    OnBinaryExpr("f32.max" (151))
    OnDropExpr
    EndFunctionBody(128)
    BeginFunctionBody(129, size:14)
    OnLocalDeclCount(0)
    OnF32ConstExpr(1 (0x043f800000))
    OnF32ConstExpr(2 (0x0440000000))
    OnBinaryExpr("f32.copysign" (152))
    OnDropExpr
    EndFunctionBody(129)
    BeginFunctionBody(130, size:13)
    OnLocalDeclCount(0)
    OnF64ConstExpr(1 (0x083ff0000000000000))
    OnUnaryExpr("f64.abs" (153))
    OnDropExpr
    EndFunctionBody(130)
    BeginFunctionBody(131, size:13)
    OnLocalDeclCount(0)
    OnF64ConstExpr(1 (0x083ff0000000000000))
    OnUnaryExpr("f64.neg" (154))
    OnDropExpr
    EndFunctionBody(131)
    BeginFunctionBody(132, size:13)
    OnLocalDeclCount(0)
    OnF64ConstExpr(1 (0x083ff0000000000000))
    OnUnaryExpr("f64.ceil" (155))
    OnDropExpr
    EndFunctionBody(132)
    BeginFunctionBody(133, size:13)
    OnLocalDeclCount(0)
    OnF64ConstExpr(1 (0x083ff0000000000000))
    OnUnaryExpr("f64.floor" (156))
    OnDropExpr
    EndFunctionBody(133)
    BeginFunctionBody(134, size:13)
    OnLocalDeclCount(0)
    OnF64ConstExpr(1 (0x083ff0000000000000))
    OnUnaryExpr("f64.trunc" (157))
    OnDropExpr
    EndFunctionBody(134)
    BeginFunctionBody(135, size:13)
    OnLocalDeclCount(0)
    OnF64ConstExpr(1 (0x083ff0000000000000))
    OnUnaryExpr("f64.nearest" (158))
    OnDropExpr
    EndFunctionBody(135)
    BeginFunctionBody(136, size:13)
    OnLocalDeclCount(0)
    OnF64ConstExpr(1 (0x083ff0000000000000))
    OnUnaryExpr("f64.sqrt" (159))
    OnDropExpr
    EndFunctionBody(136)
    BeginFunctionBody(137, size:22)
    OnLocalDeclCount(0)
    OnF64ConstExpr(1 (0x083ff0000000000000))
    OnF64ConstExpr(2 (0x084000000000000000))
    OnBinaryExpr("f64.add" (160))
    OnDropExpr
    EndFunctionBody(137)
    BeginFunctionBody(138, size:22)
    OnLocalDeclCount(0)
    OnF64ConstExpr(1 (0x083ff0000000000000))
    OnF64ConstExpr(2 (0x084000000000000000))
    OnBinaryExpr("f64.sub" (161))
    OnDropExpr
    EndFunctionBody(138)
    BeginFunctionBody(139, size:22)
    OnLocalDeclCount(0)
    OnF64ConstExpr(1 (0x083ff0000000000000))
    OnF64ConstExpr(2 (0x084000000000000000))
    OnBinaryExpr("f64.mul" (162))
    OnDropExpr
    EndFunctionBody(139)
    BeginFunctionBody(140, size:22)
    OnLocalDeclCount(0)
    OnF64ConstExpr(1 (0x083ff0000000000000))
    OnF64ConstExpr(2 (0x084000000000000000))
    OnBinaryExpr("f64.div" (163))
    OnDropExpr
    EndFunctionBody(140)
    BeginFunctionBody(141, size:22)
    OnLocalDeclCount(0)
    OnF64ConstExpr(1 (0x083ff0000000000000))
    OnF64ConstExpr(2 (0x084000000000000000))
    OnBinaryExpr("f64.min" (164))
    OnDropExpr
    EndFunctionBody(141)
    BeginFunctionBody(142, size:22)
    OnLocalDeclCount(0)
    OnF64ConstExpr(1 (0x083ff0000000000000))
    OnF64ConstExpr(2 (0x084000000000000000))
    OnBinaryExpr("f64.max" (165))
    OnDropExpr
    EndFunctionBody(142)
    BeginFunctionBody(143, size:22)
    OnLocalDeclCount(0)
    OnF64ConstExpr(1 (0x083ff0000000000000))
    OnF64ConstExpr(2 (0x084000000000000000))
    OnBinaryExpr("f64.copysign" (166))
    OnDropExpr
    EndFunctionBody(143)
    BeginFunctionBody(144, size:6)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnConvertExpr("i32.wrap_i64" (167))
    OnDropExpr
    EndFunctionBody(144)
    BeginFunctionBody(145, size:9)
    OnLocalDeclCount(0)
    OnF32ConstExpr(1 (0x043f800000))
    OnConvertExpr("i32.trunc_f32_s" (168))
    OnDropExpr
    EndFunctionBody(145)
    BeginFunctionBody(146, size:9)
    OnLocalDeclCount(0)
    OnF32ConstExpr(1 (0x043f800000))
    OnConvertExpr("i32.trunc_f32_u" (169))
    OnDropExpr
    EndFunctionBody(146)
    BeginFunctionBody(147, size:13)
    OnLocalDeclCount(0)
    OnF64ConstExpr(1 (0x083ff0000000000000))
    OnConvertExpr("i32.trunc_f64_s" (170))
    OnDropExpr
    EndFunctionBody(147)
    BeginFunctionBody(148, size:13)
    OnLocalDeclCount(0)
    OnF64ConstExpr(1 (0x083ff0000000000000))
    OnConvertExpr("i32.trunc_f64_u" (171))
    OnDropExpr
    EndFunctionBody(148)
    BeginFunctionBody(149, size:6)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnConvertExpr("i64.extend_i32_s" (172))
    OnDropExpr
    EndFunctionBody(149)
    BeginFunctionBody(150, size:6)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnConvertExpr("i64.extend_i32_u" (173))
    OnDropExpr
    EndFunctionBody(150)
    BeginFunctionBody(151, size:9)
    OnLocalDeclCount(0)
    OnF32ConstExpr(1 (0x043f800000))
    OnConvertExpr("i64.trunc_f32_s" (174))
    OnDropExpr
    EndFunctionBody(151)
    BeginFunctionBody(152, size:9)
    OnLocalDeclCount(0)
    OnF32ConstExpr(1 (0x043f800000))
    OnConvertExpr("i64.trunc_f32_u" (175))
    OnDropExpr
    EndFunctionBody(152)
    BeginFunctionBody(153, size:13)
    OnLocalDeclCount(0)
    OnF64ConstExpr(1 (0x083ff0000000000000))
    OnConvertExpr("i64.trunc_f64_s" (176))
    OnDropExpr
    EndFunctionBody(153)
    BeginFunctionBody(154, size:13)
    OnLocalDeclCount(0)
    OnF64ConstExpr(1 (0x083ff0000000000000))
    OnConvertExpr("i64.trunc_f64_u" (177))
    OnDropExpr
    EndFunctionBody(154)
    BeginFunctionBody(155, size:6)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnConvertExpr("f32.convert_i32_s" (178))
    OnDropExpr
    EndFunctionBody(155)
    BeginFunctionBody(156, size:6)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnConvertExpr("f32.convert_i32_u" (179))
    OnDropExpr
    EndFunctionBody(156)
    BeginFunctionBody(157, size:6)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnConvertExpr("f32.convert_i64_s" (180))
    OnDropExpr
    EndFunctionBody(157)
    BeginFunctionBody(158, size:6)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnConvertExpr("f32.convert_i64_u" (181))
    OnDropExpr
    EndFunctionBody(158)
    BeginFunctionBody(159, size:13)
    OnLocalDeclCount(0)
    OnF64ConstExpr(1 (0x083ff0000000000000))
    OnConvertExpr("f32.demote_f64" (182))
    OnDropExpr
    EndFunctionBody(159)
    BeginFunctionBody(160, size:6)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnConvertExpr("f64.convert_i32_s" (183))
    OnDropExpr
    EndFunctionBody(160)
    BeginFunctionBody(161, size:6)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnConvertExpr("f64.convert_i32_u" (184))
    OnDropExpr
    EndFunctionBody(161)
    BeginFunctionBody(162, size:6)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnConvertExpr("f64.convert_i64_s" (185))
    OnDropExpr
    EndFunctionBody(162)
    BeginFunctionBody(163, size:6)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnConvertExpr("f64.convert_i64_u" (186))
    OnDropExpr
    EndFunctionBody(163)
    BeginFunctionBody(164, size:9)
    OnLocalDeclCount(0)
    OnF32ConstExpr(1 (0x043f800000))
    OnConvertExpr("f64.promote_f32" (187))
    OnDropExpr
    EndFunctionBody(164)
    BeginFunctionBody(165, size:6)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnConvertExpr("f32.reinterpret_i32" (190))
    OnDropExpr
    EndFunctionBody(165)
    BeginFunctionBody(166, size:9)
    OnLocalDeclCount(0)
    OnF32ConstExpr(1 (0x043f800000))
    OnConvertExpr("i32.reinterpret_f32" (188))
    OnDropExpr
    EndFunctionBody(166)
    BeginFunctionBody(167, size:6)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnConvertExpr("f64.reinterpret_i64" (191))
    OnDropExpr
    EndFunctionBody(167)
    BeginFunctionBody(168, size:13)
    OnLocalDeclCount(0)
    OnF64ConstExpr(1 (0x083ff0000000000000))
    OnConvertExpr("i64.reinterpret_f64" (189))
    OnDropExpr
    EndFunctionBody(168)
    BeginFunctionBody(169, size:6)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnUnaryExpr("i32.extend8_s" (192))
    OnDropExpr
    EndFunctionBody(169)
    BeginFunctionBody(170, size:6)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnUnaryExpr("i32.extend16_s" (193))
    OnDropExpr
    EndFunctionBody(170)
    BeginFunctionBody(171, size:6)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnUnaryExpr("i64.extend8_s" (194))
    OnDropExpr
    EndFunctionBody(171)
    BeginFunctionBody(172, size:6)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnUnaryExpr("i64.extend16_s" (195))
    OnDropExpr
    EndFunctionBody(172)
    BeginFunctionBody(173, size:6)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnUnaryExpr("i64.extend32_s" (196))
    OnDropExpr
    EndFunctionBody(173)
    BeginFunctionBody(174, size:4)
    OnLocalDeclCount(1)
    OnLocalDecl(index: 0, count: 1, type: i32)
    EndFunctionBody(174)
    BeginFunctionBody(175, size:6)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnBrIfExpr(depth: 0)
    EndFunctionBody(175)
    BeginFunctionBody(176, size:6)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnCallExpr(func_index: 0)
    EndFunctionBody(176)
    BeginFunctionBody(177, size:7)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnBrTableExpr(num_targets: 0, depths: [], default: 0)
    EndFunctionBody(177)
    BeginFunctionBody(178, size:12)
    OnLocalDeclCount(0)
    OnBlockExpr(sig: i32)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnBrExpr(depth: 0)
    OnEndExpr
    OnDropExpr
    EndFunctionBody(178)
    BeginFunctionBody(179, size:10)
    OnLocalDeclCount(0)
    OnF32ConstExpr(1 (0x043f800000))
    OnConvertExpr("i32.trunc_sat_f32_s" (0))
    OnDropExpr
    EndFunctionBody(179)
    BeginFunctionBody(180, size:10)
    OnLocalDeclCount(0)
    OnF32ConstExpr(1 (0x043f800000))
    OnConvertExpr("i32.trunc_sat_f32_u" (1))
    OnDropExpr
    EndFunctionBody(180)
    BeginFunctionBody(181, size:14)
    OnLocalDeclCount(0)
    OnF64ConstExpr(1 (0x083ff0000000000000))
    OnConvertExpr("i32.trunc_sat_f64_s" (2))
    OnDropExpr
    EndFunctionBody(181)
    BeginFunctionBody(182, size:14)
    OnLocalDeclCount(0)
    OnF64ConstExpr(1 (0x083ff0000000000000))
    OnConvertExpr("i32.trunc_sat_f64_u" (3))
    OnDropExpr
    EndFunctionBody(182)
    BeginFunctionBody(183, size:10)
    OnLocalDeclCount(0)
    OnF32ConstExpr(1 (0x043f800000))
    OnConvertExpr("i64.trunc_sat_f32_s" (4))
    OnDropExpr
    EndFunctionBody(183)
    BeginFunctionBody(184, size:10)
    OnLocalDeclCount(0)
    OnF32ConstExpr(1 (0x043f800000))
    OnConvertExpr("i64.trunc_sat_f32_u" (5))
    OnDropExpr
    EndFunctionBody(184)
    BeginFunctionBody(185, size:14)
    OnLocalDeclCount(0)
    OnF64ConstExpr(1 (0x083ff0000000000000))
    OnConvertExpr("i64.trunc_sat_f64_s" (6))
    OnDropExpr
    EndFunctionBody(185)
    BeginFunctionBody(186, size:14)
    OnLocalDeclCount(0)
    OnF64ConstExpr(1 (0x083ff0000000000000))
    OnConvertExpr("i64.trunc_sat_f64_u" (7))
    OnDropExpr
    EndFunctionBody(186)
    BeginFunctionBody(187, size:9)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnLoadExpr(opcode: "v128.load" (0), align log2: 4, offset: 3)
    OnDropExpr
    EndFunctionBody(187)
    BeginFunctionBody(188, size:26)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnStoreExpr(opcode: "v128.store" (1), align log2: 4, offset: 3)
    EndFunctionBody(188)
    BeginFunctionBody(189, size:21)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnDropExpr
    EndFunctionBody(189)
    BeginFunctionBody(190, size:57)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnSimdShuffleOpExpr (lane: 0x00000001 00000001 00000001 00000001)
    OnDropExpr
    EndFunctionBody(190)
    BeginFunctionBody(191, size:7)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnUnaryExpr("i8x16.splat" (4))
    OnDropExpr
    EndFunctionBody(191)
    BeginFunctionBody(192, size:24)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnSimdLaneOpExpr (lane: 15)
    OnDropExpr
    EndFunctionBody(192)
    BeginFunctionBody(193, size:24)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnSimdLaneOpExpr (lane: 15)
    OnDropExpr
    EndFunctionBody(193)
    BeginFunctionBody(194, size:26)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnI32ConstExpr(0 (0x0))
    OnSimdLaneOpExpr (lane: 15)
    OnDropExpr
    EndFunctionBody(194)
    BeginFunctionBody(195, size:7)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnUnaryExpr("i16x8.splat" (8))
    OnDropExpr
    EndFunctionBody(195)
    BeginFunctionBody(196, size:24)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnSimdLaneOpExpr (lane: 7)
    OnDropExpr
    EndFunctionBody(196)
    BeginFunctionBody(197, size:24)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnSimdLaneOpExpr (lane: 7)
    OnDropExpr
    EndFunctionBody(197)
    BeginFunctionBody(198, size:26)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnI32ConstExpr(0 (0x0))
    OnSimdLaneOpExpr (lane: 7)
    OnDropExpr
    EndFunctionBody(198)
    BeginFunctionBody(199, size:7)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnUnaryExpr("i32x4.splat" (12))
    OnDropExpr
    EndFunctionBody(199)
    BeginFunctionBody(200, size:24)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnSimdLaneOpExpr (lane: 3)
    OnDropExpr
    EndFunctionBody(200)
    BeginFunctionBody(201, size:26)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnI32ConstExpr(0 (0x0))
    OnSimdLaneOpExpr (lane: 3)
    OnDropExpr
    EndFunctionBody(201)
    BeginFunctionBody(202, size:7)
    OnLocalDeclCount(0)
    OnI64ConstExpr(1 (0x1))
    OnUnaryExpr("i64x2.splat" (15))
    OnDropExpr
    EndFunctionBody(202)
    BeginFunctionBody(203, size:24)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnSimdLaneOpExpr (lane: 1)
    OnDropExpr
    EndFunctionBody(203)
    BeginFunctionBody(204, size:26)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnI64ConstExpr(0 (0x0))
    OnSimdLaneOpExpr (lane: 1)
    OnDropExpr
    EndFunctionBody(204)
    BeginFunctionBody(205, size:10)
    OnLocalDeclCount(0)
    OnF32ConstExpr(1 (0x043f800000))
    OnUnaryExpr("f32x4.splat" (18))
    OnDropExpr
    EndFunctionBody(205)
    BeginFunctionBody(206, size:24)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnSimdLaneOpExpr (lane: 3)
    OnDropExpr
    EndFunctionBody(206)
    BeginFunctionBody(207, size:29)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnF32ConstExpr(0 (0x040))
    OnSimdLaneOpExpr (lane: 3)
    OnDropExpr
    EndFunctionBody(207)
    BeginFunctionBody(208, size:14)
    OnLocalDeclCount(0)
    OnF64ConstExpr(1 (0x083ff0000000000000))
    OnUnaryExpr("f64x2.splat" (21))
    OnDropExpr
    EndFunctionBody(208)
    BeginFunctionBody(209, size:24)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnSimdLaneOpExpr (lane: 1)
    OnDropExpr
    EndFunctionBody(209)
    BeginFunctionBody(210, size:33)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnF64ConstExpr(0 (0x080))
    OnSimdLaneOpExpr (lane: 1)
    OnDropExpr
    EndFunctionBody(210)
    BeginFunctionBody(211, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("i8x16.eq" (24))
    OnDropExpr
    EndFunctionBody(211)
    BeginFunctionBody(212, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("i8x16.ne" (25))
    OnDropExpr
    EndFunctionBody(212)
    BeginFunctionBody(213, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("i8x16.lt_s" (26))
    OnDropExpr
    EndFunctionBody(213)
    BeginFunctionBody(214, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("i8x16.lt_u" (27))
    OnDropExpr
    EndFunctionBody(214)
    BeginFunctionBody(215, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("i8x16.gt_s" (28))
    OnDropExpr
    EndFunctionBody(215)
    BeginFunctionBody(216, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("i8x16.gt_u" (29))
    OnDropExpr
    EndFunctionBody(216)
    BeginFunctionBody(217, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("i8x16.le_s" (30))
    OnDropExpr
    EndFunctionBody(217)
    BeginFunctionBody(218, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("i8x16.le_u" (31))
    OnDropExpr
    EndFunctionBody(218)
    BeginFunctionBody(219, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("i8x16.ge_s" (32))
    OnDropExpr
    EndFunctionBody(219)
    BeginFunctionBody(220, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("i8x16.ge_u" (33))
    OnDropExpr
    EndFunctionBody(220)
    BeginFunctionBody(221, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("i16x8.eq" (34))
    OnDropExpr
    EndFunctionBody(221)
    BeginFunctionBody(222, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("i16x8.ne" (35))
    OnDropExpr
    EndFunctionBody(222)
    BeginFunctionBody(223, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("i16x8.lt_s" (36))
    OnDropExpr
    EndFunctionBody(223)
    BeginFunctionBody(224, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("i16x8.lt_u" (37))
    OnDropExpr
    EndFunctionBody(224)
    BeginFunctionBody(225, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("i16x8.gt_s" (38))
    OnDropExpr
    EndFunctionBody(225)
    BeginFunctionBody(226, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("i16x8.gt_u" (39))
    OnDropExpr
    EndFunctionBody(226)
    BeginFunctionBody(227, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("i16x8.le_s" (40))
    OnDropExpr
    EndFunctionBody(227)
    BeginFunctionBody(228, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("i16x8.le_u" (41))
    OnDropExpr
    EndFunctionBody(228)
    BeginFunctionBody(229, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("i16x8.ge_s" (42))
    OnDropExpr
    EndFunctionBody(229)
    BeginFunctionBody(230, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("i16x8.ge_u" (43))
    OnDropExpr
    EndFunctionBody(230)
    BeginFunctionBody(231, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("i32x4.eq" (44))
    OnDropExpr
    EndFunctionBody(231)
    BeginFunctionBody(232, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("i32x4.ne" (45))
    OnDropExpr
    EndFunctionBody(232)
    BeginFunctionBody(233, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("i32x4.lt_s" (46))
    OnDropExpr
    EndFunctionBody(233)
    BeginFunctionBody(234, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("i32x4.lt_u" (47))
    OnDropExpr
    EndFunctionBody(234)
    BeginFunctionBody(235, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("i32x4.gt_s" (48))
    OnDropExpr
    EndFunctionBody(235)
    BeginFunctionBody(236, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("i32x4.gt_u" (49))
    OnDropExpr
    EndFunctionBody(236)
    BeginFunctionBody(237, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("i32x4.le_s" (50))
    OnDropExpr
    EndFunctionBody(237)
    BeginFunctionBody(238, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("i32x4.le_u" (51))
    OnDropExpr
    EndFunctionBody(238)
    BeginFunctionBody(239, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("i32x4.ge_s" (52))
    OnDropExpr
    EndFunctionBody(239)
    BeginFunctionBody(240, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("i32x4.ge_u" (53))
    OnDropExpr
    EndFunctionBody(240)
    BeginFunctionBody(241, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("f32x4.eq" (64))
    OnDropExpr
    EndFunctionBody(241)
    BeginFunctionBody(242, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("f32x4.ne" (65))
    OnDropExpr
    EndFunctionBody(242)
    BeginFunctionBody(243, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("f32x4.lt" (66))
    OnDropExpr
    EndFunctionBody(243)
    BeginFunctionBody(244, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("f32x4.gt" (67))
    OnDropExpr
    EndFunctionBody(244)
    BeginFunctionBody(245, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("f32x4.le" (68))
    OnDropExpr
    EndFunctionBody(245)
    BeginFunctionBody(246, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("f32x4.ge" (69))
    OnDropExpr
    EndFunctionBody(246)
    BeginFunctionBody(247, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("f64x2.eq" (70))
    OnDropExpr
    EndFunctionBody(247)
    BeginFunctionBody(248, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("f64x2.ne" (71))
    OnDropExpr
    EndFunctionBody(248)
    BeginFunctionBody(249, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("f64x2.lt" (72))
    OnDropExpr
    EndFunctionBody(249)
    BeginFunctionBody(250, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("f64x2.gt" (73))
    OnDropExpr
    EndFunctionBody(250)
    BeginFunctionBody(251, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("f64x2.le" (74))
    OnDropExpr
    EndFunctionBody(251)
    BeginFunctionBody(252, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnCompareExpr("f64x2.ge" (75))
    OnDropExpr
    EndFunctionBody(252)
    BeginFunctionBody(253, size:23)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnUnaryExpr("v128.not" (76))
    OnDropExpr
    EndFunctionBody(253)
    BeginFunctionBody(254, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("v128.and" (77))
    OnDropExpr
    EndFunctionBody(254)
    BeginFunctionBody(255, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("v128.or" (78))
    OnDropExpr
    EndFunctionBody(255)
    BeginFunctionBody(256, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("v128.xor" (79))
    OnDropExpr
    EndFunctionBody(256)
    BeginFunctionBody(257, size:59)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnV128ConstExpr(0x00000003 0x00000003 0x00000003 0x00000003)
    OnTernaryExpr("v128.bitselect" (80))
    OnDropExpr
    EndFunctionBody(257)
    BeginFunctionBody(258, size:23)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnUnaryExpr("i8x16.neg" (81))
    OnDropExpr
    EndFunctionBody(258)
    BeginFunctionBody(259, size:23)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnUnaryExpr("i8x16.any_true" (82))
    OnDropExpr
    EndFunctionBody(259)
    BeginFunctionBody(260, size:23)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnUnaryExpr("i8x16.all_true" (83))
    OnDropExpr
    EndFunctionBody(260)
    BeginFunctionBody(261, size:25)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnI32ConstExpr(0 (0x0))
    OnBinaryExpr("i8x16.shl" (84))
    OnDropExpr
    EndFunctionBody(261)
    BeginFunctionBody(262, size:25)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnI32ConstExpr(0 (0x0))
    OnBinaryExpr("i8x16.shr_s" (85))
    OnDropExpr
    EndFunctionBody(262)
    BeginFunctionBody(263, size:25)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnI32ConstExpr(0 (0x0))
    OnBinaryExpr("i8x16.shr_u" (86))
    OnDropExpr
    EndFunctionBody(263)
    BeginFunctionBody(264, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("i8x16.add" (87))
    OnDropExpr
    EndFunctionBody(264)
    BeginFunctionBody(265, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("i8x16.add_saturate_s" (88))
    OnDropExpr
    EndFunctionBody(265)
    BeginFunctionBody(266, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("i8x16.add_saturate_u" (89))
    OnDropExpr
    EndFunctionBody(266)
    BeginFunctionBody(267, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("i8x16.sub" (90))
    OnDropExpr
    EndFunctionBody(267)
    BeginFunctionBody(268, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("i8x16.sub_saturate_s" (91))
    OnDropExpr
    EndFunctionBody(268)
    BeginFunctionBody(269, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("i8x16.sub_saturate_u" (92))
    OnDropExpr
    EndFunctionBody(269)
    BeginFunctionBody(270, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("i8x16.mul" (93))
    OnDropExpr
    EndFunctionBody(270)
    BeginFunctionBody(271, size:23)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnUnaryExpr("i16x8.neg" (98))
    OnDropExpr
    EndFunctionBody(271)
    BeginFunctionBody(272, size:23)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnUnaryExpr("i16x8.any_true" (99))
    OnDropExpr
    EndFunctionBody(272)
    BeginFunctionBody(273, size:23)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnUnaryExpr("i16x8.all_true" (100))
    OnDropExpr
    EndFunctionBody(273)
    BeginFunctionBody(274, size:25)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnI32ConstExpr(0 (0x0))
    OnBinaryExpr("i16x8.shl" (101))
    OnDropExpr
    EndFunctionBody(274)
    BeginFunctionBody(275, size:25)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnI32ConstExpr(0 (0x0))
    OnBinaryExpr("i16x8.shr_s" (102))
    OnDropExpr
    EndFunctionBody(275)
    BeginFunctionBody(276, size:25)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnI32ConstExpr(0 (0x0))
    OnBinaryExpr("i16x8.shr_u" (103))
    OnDropExpr
    EndFunctionBody(276)
    BeginFunctionBody(277, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("i16x8.add" (104))
    OnDropExpr
    EndFunctionBody(277)
    BeginFunctionBody(278, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("i16x8.add_saturate_s" (105))
    OnDropExpr
    EndFunctionBody(278)
    BeginFunctionBody(279, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("i16x8.add_saturate_u" (106))
    OnDropExpr
    EndFunctionBody(279)
    BeginFunctionBody(280, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("i16x8.sub" (107))
    OnDropExpr
    EndFunctionBody(280)
    BeginFunctionBody(281, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("i16x8.sub_saturate_s" (108))
    OnDropExpr
    EndFunctionBody(281)
    BeginFunctionBody(282, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("i16x8.sub_saturate_u" (109))
    OnDropExpr
    EndFunctionBody(282)
    BeginFunctionBody(283, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("i16x8.mul" (110))
    OnDropExpr
    EndFunctionBody(283)
    BeginFunctionBody(284, size:23)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnUnaryExpr("i32x4.neg" (115))
    OnDropExpr
    EndFunctionBody(284)
    BeginFunctionBody(285, size:23)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnUnaryExpr("i32x4.any_true" (116))
    OnDropExpr
    EndFunctionBody(285)
    BeginFunctionBody(286, size:23)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnUnaryExpr("i32x4.all_true" (117))
    OnDropExpr
    EndFunctionBody(286)
    BeginFunctionBody(287, size:25)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnI32ConstExpr(0 (0x0))
    OnBinaryExpr("i32x4.shl" (118))
    OnDropExpr
    EndFunctionBody(287)
    BeginFunctionBody(288, size:25)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnI32ConstExpr(0 (0x0))
    OnBinaryExpr("i32x4.shr_s" (119))
    OnDropExpr
    EndFunctionBody(288)
    BeginFunctionBody(289, size:25)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnI32ConstExpr(0 (0x0))
    OnBinaryExpr("i32x4.shr_u" (120))
    OnDropExpr
    EndFunctionBody(289)
    BeginFunctionBody(290, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("i32x4.add" (121))
    OnDropExpr
    EndFunctionBody(290)
    BeginFunctionBody(291, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("i32x4.sub" (124))
    OnDropExpr
    EndFunctionBody(291)
    BeginFunctionBody(292, size:41)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("i32x4.mul" (127))
    OnDropExpr
    EndFunctionBody(292)
    BeginFunctionBody(293, size:24)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnUnaryExpr("i64x2.neg" (132))
    OnDropExpr
    EndFunctionBody(293)
    BeginFunctionBody(294, size:24)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnUnaryExpr("i64x2.any_true" (133))
    OnDropExpr
    EndFunctionBody(294)
    BeginFunctionBody(295, size:24)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnUnaryExpr("i64x2.all_true" (134))
    OnDropExpr
    EndFunctionBody(295)
    BeginFunctionBody(296, size:26)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnI32ConstExpr(0 (0x0))
    OnBinaryExpr("i64x2.shl" (135))
    OnDropExpr
    EndFunctionBody(296)
    BeginFunctionBody(297, size:26)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnI32ConstExpr(0 (0x0))
    OnBinaryExpr("i64x2.shr_s" (136))
    OnDropExpr
    EndFunctionBody(297)
    BeginFunctionBody(298, size:26)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnI32ConstExpr(0 (0x0))
    OnBinaryExpr("i64x2.shr_u" (137))
    OnDropExpr
    EndFunctionBody(298)
    BeginFunctionBody(299, size:42)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("i64x2.add" (138))
    OnDropExpr
    EndFunctionBody(299)
    BeginFunctionBody(300, size:42)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("i64x2.sub" (141))
    OnDropExpr
    EndFunctionBody(300)
    BeginFunctionBody(301, size:24)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnUnaryExpr("f32x4.abs" (149))
    OnDropExpr
    EndFunctionBody(301)
    BeginFunctionBody(302, size:24)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnUnaryExpr("f32x4.neg" (150))
    OnDropExpr
    EndFunctionBody(302)
    BeginFunctionBody(303, size:24)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnUnaryExpr("f32x4.sqrt" (151))
    OnDropExpr
    EndFunctionBody(303)
    BeginFunctionBody(304, size:42)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("f32x4.add" (154))
    OnDropExpr
    EndFunctionBody(304)
    BeginFunctionBody(305, size:42)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("f32x4.sub" (155))
    OnDropExpr
    EndFunctionBody(305)
    BeginFunctionBody(306, size:42)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("f32x4.mul" (156))
    OnDropExpr
    EndFunctionBody(306)
    BeginFunctionBody(307, size:42)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("f32x4.div" (157))
    OnDropExpr
    EndFunctionBody(307)
    BeginFunctionBody(308, size:42)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("f32x4.min" (158))
    OnDropExpr
    EndFunctionBody(308)
    BeginFunctionBody(309, size:42)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("f32x4.max" (159))
    OnDropExpr
    EndFunctionBody(309)
    BeginFunctionBody(310, size:24)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnUnaryExpr("f64x2.abs" (160))
    OnDropExpr
    EndFunctionBody(310)
    BeginFunctionBody(311, size:24)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnUnaryExpr("f64x2.neg" (161))
    OnDropExpr
    EndFunctionBody(311)
    BeginFunctionBody(312, size:24)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnUnaryExpr("f64x2.sqrt" (162))
    OnDropExpr
    EndFunctionBody(312)
    BeginFunctionBody(313, size:42)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("f64x2.add" (165))
    OnDropExpr
    EndFunctionBody(313)
    BeginFunctionBody(314, size:42)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("f64x2.sub" (166))
    OnDropExpr
    EndFunctionBody(314)
    BeginFunctionBody(315, size:42)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("f64x2.mul" (167))
    OnDropExpr
    EndFunctionBody(315)
    BeginFunctionBody(316, size:42)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("f64x2.div" (168))
    OnDropExpr
    EndFunctionBody(316)
    BeginFunctionBody(317, size:42)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("f64x2.min" (169))
    OnDropExpr
    EndFunctionBody(317)
    BeginFunctionBody(318, size:42)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnV128ConstExpr(0x00000002 0x00000002 0x00000002 0x00000002)
    OnBinaryExpr("f64x2.max" (170))
    OnDropExpr
    EndFunctionBody(318)
    BeginFunctionBody(319, size:24)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnConvertExpr("i32x4.trunc_sat_f32x4_s" (171))
    OnDropExpr
    EndFunctionBody(319)
    BeginFunctionBody(320, size:24)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnConvertExpr("i32x4.trunc_sat_f32x4_u" (172))
    OnDropExpr
    EndFunctionBody(320)
    BeginFunctionBody(321, size:24)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnConvertExpr("i64x2.trunc_sat_f64x2_s" (173))
    OnDropExpr
    EndFunctionBody(321)
    BeginFunctionBody(322, size:24)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnConvertExpr("i64x2.trunc_sat_f64x2_u" (174))
    OnDropExpr
    EndFunctionBody(322)
    BeginFunctionBody(323, size:24)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnConvertExpr("f32x4.convert_i32x4_s" (175))
    OnDropExpr
    EndFunctionBody(323)
    BeginFunctionBody(324, size:24)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnConvertExpr("f32x4.convert_i32x4_u" (176))
    OnDropExpr
    EndFunctionBody(324)
    BeginFunctionBody(325, size:24)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnConvertExpr("f64x2.convert_i64x2_s" (177))
    OnDropExpr
    EndFunctionBody(325)
    BeginFunctionBody(326, size:24)
    OnLocalDeclCount(0)
    OnV128ConstExpr(0x00000001 0x00000001 0x00000001 0x00000001)
    OnConvertExpr("f64x2.convert_i64x2_u" (178))
    OnDropExpr
    EndFunctionBody(326)
    BeginFunctionBody(327, size:11)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnAtomicNotifyExpr(opcode: "atomic.notify" (0), align log2: 2, offset: 3)
    OnDropExpr
    EndFunctionBody(327)
    BeginFunctionBody(328, size:13)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnI64ConstExpr(3 (0x3))
    OnAtomicWaitExpr(opcode: "i32.atomic.wait" (1), align log2: 2, offset: 3)
    OnDropExpr
    EndFunctionBody(328)
    BeginFunctionBody(329, size:13)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnI64ConstExpr(3 (0x3))
    OnAtomicWaitExpr(opcode: "i64.atomic.wait" (2), align log2: 3, offset: 3)
    OnDropExpr
    EndFunctionBody(329)
    BeginFunctionBody(330, size:9)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnAtomicLoadExpr(opcode: "i32.atomic.load" (16), align log2: 2, offset: 3)
    OnDropExpr
    EndFunctionBody(330)
    BeginFunctionBody(331, size:9)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnAtomicLoadExpr(opcode: "i64.atomic.load" (17), align log2: 3, offset: 7)
    OnDropExpr
    EndFunctionBody(331)
    BeginFunctionBody(332, size:9)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnAtomicLoadExpr(opcode: "i32.atomic.load8_u" (18), align log2: 0, offset: 3)
    OnDropExpr
    EndFunctionBody(332)
    BeginFunctionBody(333, size:9)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnAtomicLoadExpr(opcode: "i32.atomic.load16_u" (19), align log2: 1, offset: 3)
    OnDropExpr
    EndFunctionBody(333)
    BeginFunctionBody(334, size:9)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnAtomicLoadExpr(opcode: "i64.atomic.load8_u" (20), align log2: 0, offset: 3)
    OnDropExpr
    EndFunctionBody(334)
    BeginFunctionBody(335, size:9)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnAtomicLoadExpr(opcode: "i64.atomic.load16_u" (21), align log2: 1, offset: 3)
    OnDropExpr
    EndFunctionBody(335)
    BeginFunctionBody(336, size:9)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnAtomicLoadExpr(opcode: "i64.atomic.load32_u" (22), align log2: 2, offset: 3)
    OnDropExpr
    EndFunctionBody(336)
    BeginFunctionBody(337, size:10)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnAtomicStoreExpr(opcode: "i32.atomic.store" (23), align log2: 2, offset: 3)
    EndFunctionBody(337)
    BeginFunctionBody(338, size:10)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnAtomicStoreExpr(opcode: "i64.atomic.store" (24), align log2: 3, offset: 7)
    EndFunctionBody(338)
    BeginFunctionBody(339, size:10)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnAtomicStoreExpr(opcode: "i32.atomic.store8" (25), align log2: 0, offset: 3)
    EndFunctionBody(339)
    BeginFunctionBody(340, size:10)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnAtomicStoreExpr(opcode: "i32.atomic.store16" (26), align log2: 1, offset: 3)
    EndFunctionBody(340)
    BeginFunctionBody(341, size:10)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnAtomicStoreExpr(opcode: "i64.atomic.store8" (27), align log2: 0, offset: 3)
    EndFunctionBody(341)
    BeginFunctionBody(342, size:10)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnAtomicStoreExpr(opcode: "i64.atomic.store16" (28), align log2: 1, offset: 3)
    EndFunctionBody(342)
    BeginFunctionBody(343, size:10)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnAtomicStoreExpr(opcode: "i64.atomic.store32" (29), align log2: 2, offset: 3)
    EndFunctionBody(343)
    BeginFunctionBody(344, size:11)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i32.atomic.rmw.add" (30), align log2: 2, offset: 3)
    OnDropExpr
    EndFunctionBody(344)
    BeginFunctionBody(345, size:11)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i64.atomic.rmw.add" (31), align log2: 3, offset: 7)
    OnDropExpr
    EndFunctionBody(345)
    BeginFunctionBody(346, size:11)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i32.atomic.rmw8.add_u" (32), align log2: 0, offset: 3)
    OnDropExpr
    EndFunctionBody(346)
    BeginFunctionBody(347, size:11)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i32.atomic.rmw16.add_u" (33), align log2: 1, offset: 3)
    OnDropExpr
    EndFunctionBody(347)
    BeginFunctionBody(348, size:11)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i64.atomic.rmw8.add_u" (34), align log2: 0, offset: 3)
    OnDropExpr
    EndFunctionBody(348)
    BeginFunctionBody(349, size:11)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i64.atomic.rmw16.add_u" (35), align log2: 1, offset: 3)
    OnDropExpr
    EndFunctionBody(349)
    BeginFunctionBody(350, size:11)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i64.atomic.rmw32.add_u" (36), align log2: 2, offset: 3)
    OnDropExpr
    EndFunctionBody(350)
    BeginFunctionBody(351, size:11)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i32.atomic.rmw.sub" (37), align log2: 2, offset: 3)
    OnDropExpr
    EndFunctionBody(351)
    BeginFunctionBody(352, size:11)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i64.atomic.rmw.sub" (38), align log2: 3, offset: 7)
    OnDropExpr
    EndFunctionBody(352)
    BeginFunctionBody(353, size:11)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i32.atomic.rmw8.sub_u" (39), align log2: 0, offset: 3)
    OnDropExpr
    EndFunctionBody(353)
    BeginFunctionBody(354, size:11)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i32.atomic.rmw16.sub_u" (40), align log2: 1, offset: 3)
    OnDropExpr
    EndFunctionBody(354)
    BeginFunctionBody(355, size:11)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i64.atomic.rmw8.sub_u" (41), align log2: 0, offset: 3)
    OnDropExpr
    EndFunctionBody(355)
    BeginFunctionBody(356, size:11)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i64.atomic.rmw16.sub_u" (42), align log2: 1, offset: 3)
    OnDropExpr
    EndFunctionBody(356)
    BeginFunctionBody(357, size:11)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i64.atomic.rmw32.sub_u" (43), align log2: 2, offset: 3)
    OnDropExpr
    EndFunctionBody(357)
    BeginFunctionBody(358, size:11)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i32.atomic.rmw.and" (44), align log2: 2, offset: 3)
    OnDropExpr
    EndFunctionBody(358)
    BeginFunctionBody(359, size:11)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i64.atomic.rmw.and" (45), align log2: 3, offset: 7)
    OnDropExpr
    EndFunctionBody(359)
    BeginFunctionBody(360, size:11)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i32.atomic.rmw8.and_u" (46), align log2: 0, offset: 3)
    OnDropExpr
    EndFunctionBody(360)
    BeginFunctionBody(361, size:11)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i32.atomic.rmw16.and_u" (47), align log2: 1, offset: 3)
    OnDropExpr
    EndFunctionBody(361)
    BeginFunctionBody(362, size:11)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i64.atomic.rmw8.and_u" (48), align log2: 0, offset: 3)
    OnDropExpr
    EndFunctionBody(362)
    BeginFunctionBody(363, size:11)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i64.atomic.rmw16.and_u" (49), align log2: 1, offset: 3)
    OnDropExpr
    EndFunctionBody(363)
    BeginFunctionBody(364, size:11)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i64.atomic.rmw32.and_u" (50), align log2: 2, offset: 3)
    OnDropExpr
    EndFunctionBody(364)
    BeginFunctionBody(365, size:11)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i32.atomic.rmw.or" (51), align log2: 2, offset: 3)
    OnDropExpr
    EndFunctionBody(365)
    BeginFunctionBody(366, size:11)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i64.atomic.rmw.or" (52), align log2: 3, offset: 7)
    OnDropExpr
    EndFunctionBody(366)
    BeginFunctionBody(367, size:11)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i32.atomic.rmw8.or_u" (53), align log2: 0, offset: 3)
    OnDropExpr
    EndFunctionBody(367)
    BeginFunctionBody(368, size:11)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i32.atomic.rmw16.or_u" (54), align log2: 1, offset: 3)
    OnDropExpr
    EndFunctionBody(368)
    BeginFunctionBody(369, size:11)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i64.atomic.rmw8.or_u" (55), align log2: 0, offset: 3)
    OnDropExpr
    EndFunctionBody(369)
    BeginFunctionBody(370, size:11)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i64.atomic.rmw16.or_u" (56), align log2: 1, offset: 3)
    OnDropExpr
    EndFunctionBody(370)
    BeginFunctionBody(371, size:11)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i64.atomic.rmw32.or_u" (57), align log2: 2, offset: 3)
    OnDropExpr
    EndFunctionBody(371)
    BeginFunctionBody(372, size:11)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i32.atomic.rmw.xor" (58), align log2: 2, offset: 3)
    OnDropExpr
    EndFunctionBody(372)
    BeginFunctionBody(373, size:11)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i64.atomic.rmw.xor" (59), align log2: 3, offset: 7)
    OnDropExpr
    EndFunctionBody(373)
    BeginFunctionBody(374, size:11)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i32.atomic.rmw8.xor_u" (60), align log2: 0, offset: 3)
    OnDropExpr
    EndFunctionBody(374)
    BeginFunctionBody(375, size:11)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i32.atomic.rmw16.xor_u" (61), align log2: 1, offset: 3)
    OnDropExpr
    EndFunctionBody(375)
    BeginFunctionBody(376, size:11)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i64.atomic.rmw8.xor_u" (62), align log2: 0, offset: 3)
    OnDropExpr
    EndFunctionBody(376)
    BeginFunctionBody(377, size:11)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i64.atomic.rmw16.xor_u" (63), align log2: 1, offset: 3)
    OnDropExpr
    EndFunctionBody(377)
    BeginFunctionBody(378, size:11)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i64.atomic.rmw32.xor_u" (64), align log2: 2, offset: 3)
    OnDropExpr
    EndFunctionBody(378)
    BeginFunctionBody(379, size:11)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i32.atomic.rmw.xchg" (65), align log2: 2, offset: 3)
    OnDropExpr
    EndFunctionBody(379)
    BeginFunctionBody(380, size:11)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i64.atomic.rmw.xchg" (66), align log2: 3, offset: 7)
    OnDropExpr
    EndFunctionBody(380)
    BeginFunctionBody(381, size:11)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i32.atomic.rmw8.xchg_u" (67), align log2: 0, offset: 3)
    OnDropExpr
    EndFunctionBody(381)
    BeginFunctionBody(382, size:11)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i32.atomic.rmw16.xchg_u" (68), align log2: 1, offset: 3)
    OnDropExpr
    EndFunctionBody(382)
    BeginFunctionBody(383, size:11)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i64.atomic.rmw8.xchg_u" (69), align log2: 0, offset: 3)
    OnDropExpr
    EndFunctionBody(383)
    BeginFunctionBody(384, size:11)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i64.atomic.rmw16.xchg_u" (70), align log2: 1, offset: 3)
    OnDropExpr
    EndFunctionBody(384)
    BeginFunctionBody(385, size:11)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnAtomicRmwExpr(opcode: "i64.atomic.rmw32.xchg_u" (71), align log2: 2, offset: 3)
    OnDropExpr
    EndFunctionBody(385)
    BeginFunctionBody(386, size:13)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnI32ConstExpr(3 (0x3))
    OnAtomicRmwCmpxchgExpr(opcode: "i32.atomic.rmw.cmpxchg" (72), align log2: 2, offset: 3)
    OnDropExpr
    EndFunctionBody(386)
    BeginFunctionBody(387, size:13)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnI64ConstExpr(3 (0x3))
    OnAtomicRmwCmpxchgExpr(opcode: "i64.atomic.rmw.cmpxchg" (73), align log2: 3, offset: 7)
    OnDropExpr
    EndFunctionBody(387)
    BeginFunctionBody(388, size:13)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnI32ConstExpr(3 (0x3))
    OnAtomicRmwCmpxchgExpr(opcode: "i32.atomic.rmw8.cmpxchg_u" (74), align log2: 0, offset: 3)
    OnDropExpr
    EndFunctionBody(388)
    BeginFunctionBody(389, size:13)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI32ConstExpr(2 (0x2))
    OnI32ConstExpr(3 (0x3))
    OnAtomicRmwCmpxchgExpr(opcode: "i32.atomic.rmw16.cmpxchg_u" (75), align log2: 1, offset: 3)
    OnDropExpr
    EndFunctionBody(389)
    BeginFunctionBody(390, size:13)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnI64ConstExpr(3 (0x3))
    OnAtomicRmwCmpxchgExpr(opcode: "i64.atomic.rmw8.cmpxchg_u" (76), align log2: 0, offset: 3)
    OnDropExpr
    EndFunctionBody(390)
    BeginFunctionBody(391, size:13)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnI64ConstExpr(3 (0x3))
    OnAtomicRmwCmpxchgExpr(opcode: "i64.atomic.rmw16.cmpxchg_u" (77), align log2: 1, offset: 3)
    OnDropExpr
    EndFunctionBody(391)
    BeginFunctionBody(392, size:13)
    OnLocalDeclCount(0)
    OnI32ConstExpr(1 (0x1))
    OnI64ConstExpr(2 (0x2))
    OnI64ConstExpr(3 (0x3))
    OnAtomicRmwCmpxchgExpr(opcode: "i64.atomic.rmw32.cmpxchg_u" (78), align log2: 2, offset: 3)
    OnDropExpr
    EndFunctionBody(392)
  EndCodeSection
EndModule
   0| return
   4| unreachable
   8| return
  12| br @20
  20| return
  24| i32.const 1
  32| br_table %[-1], $#0, table:$52
  44| data $12
  52|   entry 0: offset: 64 drop: 0 keep: 0
  64| return
  68| return
  72| return
  76| call @0
  84| return
  88| i32.const 1
  96| call_indirect $0:0, %[-1]
 108| return
 112| return_call @0
 120| return
 124| i32.const 1
 132| return_call_indirect $0:0, %[-1]
 144| return
 148| i32.const 1
 156| drop
 160| return
 164| i32.const 1
 172| i32.const 2
 180| i32.const 3
 188| select %[-3], %[-2], %[-1]
 192| drop
 196| return
 200| alloca $1
 208| local.get $1
 216| drop
 220| drop
 224| return
 228| alloca $1
 236| i32.const 1
 244| local.set $1, %[-1]
 252| drop
 256| return
 260| alloca $1
 268| i32.const 1
 276| local.tee $2, %[-1]
 284| drop
 288| drop
 292| return
 296| global.get $0
 304| drop
 308| return
 312| i32.const 1
 320| global.set $0, %[-1]
 328| return
 332| i32.const 1
 340| i32.load $0:%[-1]+$2
 352| drop
 356| return
 360| i32.const 1
 368| i64.load $0:%[-1]+$2
 380| drop
 384| return
 388| i32.const 1
 396| f32.load $0:%[-1]+$2
 408| drop
 412| return
 416| i32.const 1
 424| f64.load $0:%[-1]+$2
 436| drop
 440| return
 444| i32.const 1
 452| i32.load8_s $0:%[-1]+$2
 464| drop
 468| return
 472| i32.const 1
 480| i32.load8_u $0:%[-1]+$2
 492| drop
 496| return
 500| i32.const 1
 508| i32.load16_s $0:%[-1]+$2
 520| drop
 524| return
 528| i32.const 1
 536| i32.load16_u $0:%[-1]+$2
 548| drop
 552| return
 556| i32.const 1
 564| i64.load8_s $0:%[-1]+$2
 576| drop
 580| return
 584| i32.const 1
 592| i64.load8_u $0:%[-1]+$2
 604| drop
 608| return
 612| i32.const 1
 620| i64.load16_s $0:%[-1]+$2
 632| drop
 636| return
 640| i32.const 1
 648| i64.load16_u $0:%[-1]+$2
 660| drop
 664| return
 668| i32.const 1
 676| i64.load32_s $0:%[-1]+$2
 688| drop
 692| return
 696| i32.const 1
 704| i64.load32_u $0:%[-1]+$2
 716| drop
 720| return
 724| i32.const 1
 732| i32.const 2
 740| i32.store $0:%[-2]+$2, %[-1]
 752| return
 756| i32.const 1
 764| i64.const 2
 776| i64.store $0:%[-2]+$2, %[-1]
 788| return
 792| i32.const 1
 800| f32.const 2
 808| f32.store $0:%[-2]+$2, %[-1]
 820| return
 824| i32.const 1
 832| f64.const 2
 844| f64.store $0:%[-2]+$2, %[-1]
 856| return
 860| i32.const 1
 868| i32.const 2
 876| i32.store8 $0:%[-2]+$2, %[-1]
 888| return
 892| i32.const 1
 900| i32.const 2
 908| i32.store16 $0:%[-2]+$2, %[-1]
 920| return
 924| i32.const 1
 932| i64.const 2
 944| i64.store8 $0:%[-2]+$2, %[-1]
 956| return
 960| i32.const 1
 968| i64.const 2
 980| i64.store16 $0:%[-2]+$2, %[-1]
 992| return
 996| i32.const 1
1004| i64.const 2
1016| i64.store32 $0:%[-2]+$2, %[-1]
1028| return
1032| memory.size $0
1040| drop
1044| return
1048| i32.const 1
1056| memory.grow $0:%[-1]
1064| drop
1068| return
1072| i32.const 1
1080| drop
1084| return
1088| i64.const 1
1100| drop
1104| return
1108| f32.const 1
1116| drop
1120| return
1124| f64.const 1
1136| drop
1140| return
1144| i32.const 1
1152| i32.eqz %[-1]
1156| drop
1160| return
1164| i32.const 1
1172| i32.const 2
1180| i32.eq %[-2], %[-1]
1184| drop
1188| return
1192| i32.const 1
1200| i32.const 2
1208| i32.ne %[-2], %[-1]
1212| drop
1216| return
1220| i32.const 1
1228| i32.const 2
1236| i32.lt_s %[-2], %[-1]
1240| drop
1244| return
1248| i32.const 1
1256| i32.const 2
1264| i32.lt_u %[-2], %[-1]
1268| drop
1272| return
1276| i32.const 1
1284| i32.const 2
1292| i32.gt_s %[-2], %[-1]
1296| drop
1300| return
1304| i32.const 1
1312| i32.const 2
1320| i32.gt_u %[-2], %[-1]
1324| drop
1328| return
1332| i32.const 1
1340| i32.const 2
1348| i32.le_s %[-2], %[-1]
1352| drop
1356| return
1360| i32.const 1
1368| i32.const 2
1376| i32.le_u %[-2], %[-1]
1380| drop
1384| return
1388| i32.const 1
1396| i32.const 2
1404| i32.ge_s %[-2], %[-1]
1408| drop
1412| return
1416| i32.const 1
1424| i32.const 2
1432| i32.ge_u %[-2], %[-1]
1436| drop
1440| return
1444| i64.const 1
1456| i64.eqz %[-1]
1460| drop
1464| return
1468| i64.const 1
1480| i64.const 2
1492| i64.eq %[-2], %[-1]
1496| drop
1500| return
1504| i64.const 1
1516| i64.const 2
1528| i64.ne %[-2], %[-1]
1532| drop
1536| return
1540| i64.const 1
1552| i64.const 2
1564| i64.lt_s %[-2], %[-1]
1568| drop
1572| return
1576| i64.const 1
1588| i64.const 2
1600| i64.lt_u %[-2], %[-1]
1604| drop
1608| return
1612| i64.const 1
1624| i64.const 2
1636| i64.gt_s %[-2], %[-1]
1640| drop
1644| return
1648| i64.const 1
1660| i64.const 2
1672| i64.gt_u %[-2], %[-1]
1676| drop
1680| return
1684| i64.const 1
1696| i64.const 2
1708| i64.le_s %[-2], %[-1]
1712| drop
1716| return
1720| i64.const 1
1732| i64.const 2
1744| i64.le_u %[-2], %[-1]
1748| drop
1752| return
1756| i64.const 1
1768| i64.const 2
1780| i64.ge_s %[-2], %[-1]
1784| drop
1788| return
1792| i64.const 1
1804| i64.const 2
1816| i64.ge_u %[-2], %[-1]
1820| drop
1824| return
1828| f32.const 1
1836| f32.const 2
1844| f32.eq %[-2], %[-1]
1848| drop
1852| return
1856| f32.const 1
1864| f32.const 2
1872| f32.ne %[-2], %[-1]
1876| drop
1880| return
1884| f32.const 1
1892| f32.const 2
1900| f32.lt %[-2], %[-1]
1904| drop
1908| return
1912| f32.const 1
1920| f32.const 2
1928| f32.gt %[-2], %[-1]
1932| drop
1936| return
1940| f32.const 1
1948| f32.const 2
1956| f32.le %[-2], %[-1]
1960| drop
1964| return
1968| f32.const 1
1976| f32.const 2
1984| f32.ge %[-2], %[-1]
1988| drop
1992| return
1996| f64.const 1
2008| f64.const 2
2020| f64.eq %[-2], %[-1]
2024| drop
2028| return
2032| f64.const 1
2044| f64.const 2
2056| f64.ne %[-2], %[-1]
2060| drop
2064| return
2068| f64.const 1
2080| f64.const 2
2092| f64.lt %[-2], %[-1]
2096| drop
2100| return
2104| f64.const 1
2116| f64.const 2
2128| f64.gt %[-2], %[-1]
2132| drop
2136| return
2140| f64.const 1
2152| f64.const 2
2164| f64.le %[-2], %[-1]
2168| drop
2172| return
2176| f64.const 1
2188| f64.const 2
2200| f64.ge %[-2], %[-1]
2204| drop
2208| return
2212| i32.const 1
2220| i32.clz %[-1]
2224| drop
2228| return
2232| i32.const 1
2240| i32.ctz %[-1]
2244| drop
2248| return
2252| i32.const 1
2260| i32.popcnt %[-1]
2264| drop
2268| return
2272| i32.const 1
2280| i32.const 2
2288| i32.add %[-2], %[-1]
2292| drop
2296| return
2300| i32.const 1
2308| i32.const 2
2316| i32.sub %[-2], %[-1]
2320| drop
2324| return
2328| i32.const 1
2336| i32.const 2
2344| i32.mul %[-2], %[-1]
2348| drop
2352| return
2356| i32.const 1
2364| i32.const 2
2372| i32.div_s %[-2], %[-1]
2376| drop
2380| return
2384| i32.const 1
2392| i32.const 2
2400| i32.div_u %[-2], %[-1]
2404| drop
2408| return
2412| i32.const 1
2420| i32.const 2
2428| i32.rem_s %[-2], %[-1]
2432| drop
2436| return
2440| i32.const 1
2448| i32.const 2
2456| i32.rem_u %[-2], %[-1]
2460| drop
2464| return
2468| i32.const 1
2476| i32.const 2
2484| i32.and %[-2], %[-1]
2488| drop
2492| return
2496| i32.const 1
2504| i32.const 2
2512| i32.or %[-2], %[-1]
2516| drop
2520| return
2524| i32.const 1
2532| i32.const 2
2540| i32.xor %[-2], %[-1]
2544| drop
2548| return
2552| i32.const 1
2560| i32.const 2
2568| i32.shl %[-2], %[-1]
2572| drop
2576| return
2580| i32.const 1
2588| i32.const 2
2596| i32.shr_s %[-2], %[-1]
2600| drop
2604| return
2608| i32.const 1
2616| i32.const 2
2624| i32.shr_u %[-2], %[-1]
2628| drop
2632| return
2636| i32.const 1
2644| i32.const 2
2652| i32.rotl %[-2], %[-1]
2656| drop
2660| return
2664| i32.const 1
2672| i32.const 2
2680| i32.rotr %[-2], %[-1]
2684| drop
2688| return
2692| i64.const 1
2704| i64.clz %[-1]
2708| drop
2712| return
2716| i64.const 1
2728| i64.ctz %[-1]
2732| drop
2736| return
2740| i64.const 1
2752| i64.popcnt %[-1]
2756| drop
2760| return
2764| i64.const 1
2776| i64.const 2
2788| i64.add %[-2], %[-1]
2792| drop
2796| return
2800| i64.const 1
2812| i64.const 2
2824| i64.sub %[-2], %[-1]
2828| drop
2832| return
2836| i64.const 1
2848| i64.const 2
2860| i64.mul %[-2], %[-1]
2864| drop
2868| return
2872| i64.const 1
2884| i64.const 2
2896| i64.div_s %[-2], %[-1]
2900| drop
2904| return
2908| i64.const 1
2920| i64.const 2
2932| i64.div_u %[-2], %[-1]
2936| drop
2940| return
2944| i64.const 1
2956| i64.const 2
2968| i64.rem_s %[-2], %[-1]
2972| drop
2976| return
2980| i64.const 1
2992| i64.const 2
3004| i64.rem_u %[-2], %[-1]
3008| drop
3012| return
3016| i64.const 1
3028| i64.const 2
3040| i64.and %[-2], %[-1]
3044| drop
3048| return
3052| i64.const 1
3064| i64.const 2
3076| i64.or %[-2], %[-1]
3080| drop
3084| return
3088| i64.const 1
3100| i64.const 2
3112| i64.xor %[-2], %[-1]
3116| drop
3120| return
3124| i64.const 1
3136| i64.const 2
3148| i64.shl %[-2], %[-1]
3152| drop
3156| return
3160| i64.const 1
3172| i64.const 2
3184| i64.shr_s %[-2], %[-1]
3188| drop
3192| return
3196| i64.const 1
3208| i64.const 2
3220| i64.shr_u %[-2], %[-1]
3224| drop
3228| return
3232| i64.const 1
3244| i64.const 2
3256| i64.rotl %[-2], %[-1]
3260| drop
3264| return
3268| i64.const 1
3280| i64.const 2
3292| i64.rotr %[-2], %[-1]
3296| drop
3300| return
3304| f32.const 1
3312| f32.abs %[-1]
3316| drop
3320| return
3324| f32.const 1
3332| f32.neg %[-1]
3336| drop
3340| return
3344| f32.const 1
3352| f32.ceil %[-1]
3356| drop
3360| return
3364| f32.const 1
3372| f32.floor %[-1]
3376| drop
3380| return
3384| f32.const 1
3392| f32.trunc %[-1]
3396| drop
3400| return
3404| f32.const 1
3412| f32.nearest %[-1]
3416| drop
3420| return
3424| f32.const 1
3432| f32.sqrt %[-1]
3436| drop
3440| return
3444| f32.const 1
3452| f32.const 2
3460| f32.add %[-2], %[-1]
3464| drop
3468| return
3472| f32.const 1
3480| f32.const 2
3488| f32.sub %[-2], %[-1]
3492| drop
3496| return
3500| f32.const 1
3508| f32.const 2
3516| f32.mul %[-2], %[-1]
3520| drop
3524| return
3528| f32.const 1
3536| f32.const 2
3544| f32.div %[-2], %[-1]
3548| drop
3552| return
3556| f32.const 1
3564| f32.const 2
3572| f32.min %[-2], %[-1]
3576| drop
3580| return
3584| f32.const 1
3592| f32.const 2
3600| f32.max %[-2], %[-1]
3604| drop
3608| return
3612| f32.const 1
3620| f32.const 2
3628| f32.copysign %[-2], %[-1]
3632| drop
3636| return
3640| f64.const 1
3652| f64.abs %[-1]
3656| drop
3660| return
3664| f64.const 1
3676| f64.neg %[-1]
3680| drop
3684| return
3688| f64.const 1
3700| f64.ceil %[-1]
3704| drop
3708| return
3712| f64.const 1
3724| f64.floor %[-1]
3728| drop
3732| return
3736| f64.const 1
3748| f64.trunc %[-1]
3752| drop
3756| return
3760| f64.const 1
3772| f64.nearest %[-1]
3776| drop
3780| return
3784| f64.const 1
3796| f64.sqrt %[-1]
3800| drop
3804| return
3808| f64.const 1
3820| f64.const 2
3832| f64.add %[-2], %[-1]
3836| drop
3840| return
3844| f64.const 1
3856| f64.const 2
3868| f64.sub %[-2], %[-1]
3872| drop
3876| return
3880| f64.const 1
3892| f64.const 2
3904| f64.mul %[-2], %[-1]
3908| drop
3912| return
3916| f64.const 1
3928| f64.const 2
3940| f64.div %[-2], %[-1]
3944| drop
3948| return
3952| f64.const 1
3964| f64.const 2
3976| f64.min %[-2], %[-1]
3980| drop
3984| return
3988| f64.const 1
4000| f64.const 2
4012| f64.max %[-2], %[-1]
4016| drop
4020| return
4024| f64.const 1
4036| f64.const 2
4048| f64.copysign %[-2], %[-1]
4052| drop
4056| return
4060| i64.const 1
4072| i32.wrap_i64 %[-1]
4076| drop
4080| return
4084| f32.const 1
4092| i32.trunc_f32_s %[-1]
4096| drop
4100| return
4104| f32.const 1
4112| i32.trunc_f32_u %[-1]
4116| drop
4120| return
4124| f64.const 1
4136| i32.trunc_f64_s %[-1]
4140| drop
4144| return
4148| f64.const 1
4160| i32.trunc_f64_u %[-1]
4164| drop
4168| return
4172| i32.const 1
4180| i64.extend_i32_s %[-1]
4184| drop
4188| return
4192| i32.const 1
4200| i64.extend_i32_u %[-1]
4204| drop
4208| return
4212| f32.const 1
4220| i64.trunc_f32_s %[-1]
4224| drop
4228| return
4232| f32.const 1
4240| i64.trunc_f32_u %[-1]
4244| drop
4248| return
4252| f64.const 1
4264| i64.trunc_f64_s %[-1]
4268| drop
4272| return
4276| f64.const 1
4288| i64.trunc_f64_u %[-1]
4292| drop
4296| return
4300| i32.const 1
4308| f32.convert_i32_s %[-1]
4312| drop
4316| return
4320| i32.const 1
4328| f32.convert_i32_u %[-1]
4332| drop
4336| return
4340| i64.const 1
4352| f32.convert_i64_s %[-1]
4356| drop
4360| return
4364| i64.const 1
4376| f32.convert_i64_u %[-1]
4380| drop
4384| return
4388| f64.const 1
4400| f32.demote_f64 %[-1]
4404| drop
4408| return
4412| i32.const 1
4420| f64.convert_i32_s %[-1]
4424| drop
4428| return
4432| i32.const 1
4440| f64.convert_i32_u %[-1]
4444| drop
4448| return
4452| i64.const 1
4464| f64.convert_i64_s %[-1]
4468| drop
4472| return
4476| i64.const 1
4488| f64.convert_i64_u %[-1]
4492| drop
4496| return
4500| f32.const 1
4508| f64.promote_f32 %[-1]
4512| drop
4516| return
4520| i32.const 1
4528| f32.reinterpret_i32 %[-1]
4532| drop
4536| return
4540| f32.const 1
4548| i32.reinterpret_f32 %[-1]
4552| drop
4556| return
4560| i64.const 1
4572| f64.reinterpret_i64 %[-1]
4576| drop
4580| return
4584| f64.const 1
4596| i64.reinterpret_f64 %[-1]
4600| drop
4604| return
4608| i32.const 1
4616| i32.extend8_s %[-1]
4620| drop
4624| return
4628| i32.const 1
4636| i32.extend16_s %[-1]
4640| drop
4644| return
4648| i64.const 1
4660| i64.extend8_s %[-1]
4664| drop
4668| return
4672| i64.const 1
4684| i64.extend16_s %[-1]
4688| drop
4692| return
4696| i64.const 1
4708| i64.extend32_s %[-1]
4712| drop
4716| return
4720| alloca $1
4728| drop
4732| return
4736| i32.const 1
4744| br_unless @4760, %[-1]
4752| br @4760
4760| return
4764| i32.const 1
4772| call_host $0
4780| return
4784| i32.const 1
4792| br_table %[-1], $#0, table:$4812
4804| data $12
4812|   entry 0: offset: 4824 drop: 0 keep: 0
4824| return
4828| i32.const 1
4836| i32.const 2
4844| drop_keep $1 $1
4856| br @4864
4864| drop
4868| return
4872| f32.const 1
4880| i32.trunc_sat_f32_s %[-1]
4884| drop
4888| return
4892| f32.const 1
4900| i32.trunc_sat_f32_u %[-1]
4904| drop
4908| return
4912| f64.const 1
4924| i32.trunc_sat_f64_s %[-1]
4928| drop
4932| return
4936| f64.const 1
4948| i32.trunc_sat_f64_u %[-1]
4952| drop
4956| return
4960| f32.const 1
4968| i64.trunc_sat_f32_s %[-1]
4972| drop
4976| return
4980| f32.const 1
4988| i64.trunc_sat_f32_u %[-1]
4992| drop
4996| return
5000| f64.const 1
5012| i64.trunc_sat_f64_s %[-1]
5016| drop
5020| return
5024| f64.const 1
5036| i64.trunc_sat_f64_u %[-1]
5040| drop
5044| return
5048| i32.const 1
5056| v128.load $0:%[-1]+$3
5068| drop
5072| return
5076| i32.const 1
5084| v128.const 0x00000001 0x00000001 0x00000001 0x00000001
5104| v128.store $0:%[-2]+$3, %[-1]
5116| return
5120| v128.const 0x00000001 0x00000001 0x00000001 0x00000001
5140| drop
5144| return
5148| v128.const 0x00000001 0x00000001 0x00000001 0x00000001
5168| v128.const 0x00000002 0x00000002 0x00000002 0x00000002
5188| v8x16.shuffle %[-2], %[-1] : (Lane imm: $0x00000001 0x00000001 0x00000001 0x00000001 )
5208| drop
5212| return
5216| i32.const 1
5224| i8x16.splat %[-1]
5228| drop
5232| return
5236| v128.const 0x00000001 0x00000001 0x00000001 0x00000001
5256| i8x16.extract_lane_s %[-1] : (Lane imm: 15)
5261| drop
5265| return
5269| v128.const 0x00000001 0x00000001 0x00000001 0x00000001
5289| i8x16.extract_lane_u %[-1] : (Lane imm: 15)
5294| drop
5298| return
5302| v128.const 0x00000001 0x00000001 0x00000001 0x00000001
5322| i32.const 0
5330| i8x16.replace_lane %[-1], %[-2] : (Lane imm: 15)
5335| drop
5339| return
5343| i32.const 1
5351| i16x8.splat %[-1]
5355| drop
5359| return
5363| v128.const 0x00000001 0x00000001 0x00000001 0x00000001
5383| i16x8.extract_lane_s %[-1] : (Lane imm: 7)
5388| drop
5392| return
5396| v128.const 0x00000001 0x00000001 0x00000001 0x00000001
5416| i16x8.extract_lane_u %[-1] : (Lane imm: 7)
5421| drop
5425| return
5429| v128.const 0x00000001 0x00000001 0x00000001 0x00000001
5449| i32.const 0
5457| i16x8.replace_lane %[-1], %[-2] : (Lane imm: 7)
5462| drop
5466| return
5470| i32.const 1
5478| i32x4.splat %[-1]
5482| drop
5486| return
5490| v128.const 0x00000001 0x00000001 0x00000001 0x00000001
5510| i32x4.extract_lane %[-1] : (Lane imm: 3)
5515| drop
5519| return
5523| v128.const 0x00000001 0x00000001 0x00000001 0x00000001
5543| i32.const 0
5551| i32x4.replace_lane %[-1], %[-2] : (Lane imm: 3)
5556| drop
5560| return
5564| i64.const 1
5576| i64x2.splat %[-1]
5580| drop
5584| return
5588| v128.const 0x00000001 0x00000001 0x00000001 0x00000001
5608| i64x2.extract_lane %[-1] : (Lane imm: 1)
5613| drop
5617| return
5621| v128.const 0x00000001 0x00000001 0x00000001 0x00000001
5641| i64.const 0
5653| i64x2.replace_lane %[-1], %[-2] : (Lane imm: 1)
5658| drop
5662| return
5666| f32.const 1
5674| f32x4.splat %[-1]
5678| drop
5682| return
5686| v128.const 0x00000001 0x00000001 0x00000001 0x00000001
5706| f32x4.extract_lane %[-1] : (Lane imm: 3)
5711| drop
5715| return
5719| v128.const 0x00000001 0x00000001 0x00000001 0x00000001
5739| f32.const 0
5747| f32x4.replace_lane %[-1], %[-2] : (Lane imm: 3)
5752| drop
5756| return
5760| f64.const 1
5772| f64x2.splat %[-1]
5776| drop
5780| return
5784| v128.const 0x00000001 0x00000001 0x00000001 0x00000001
5804| f64x2.extract_lane %[-1] : (Lane imm: 1)
5809| drop
5813| return
5817| v128.const 0x00000001 0x00000001 0x00000001 0x00000001
5837| f64.const 0
5849| f64x2.replace_lane %[-1], %[-2] : (Lane imm: 1)
5854| drop
5858| return
5862| v128.const 0x00000001 0x00000001 0x00000001 0x00000001
5882| v128.const 0x00000002 0x00000002 0x00000002 0x00000002
5902| i8x16.eq %[-2], %[-1]
5906| drop
5910| return
5914| v128.const 0x00000001 0x00000001 0x00000001 0x00000001
5934| v128.const 0x00000002 0x00000002 0x00000002 0x00000002
5954| i8x16.ne %[-2], %[-1]
5958| drop
5962| return
5966| v128.const 0x00000001 0x00000001 0x00000001 0x00000001
5986| v128.const 0x00000002 0x00000002 0x00000002 0x00000002
6006| i8x16.lt_s %[-2], %[-1]
6010| drop
6014| return
6018| v128.const 0x00000001 0x00000001 0x00000001 0x00000001
6038| v128.const 0x00000002 0x00000002 0x00000002 0x00000002
6058| i8x16.lt_u %[-2], %[-1]
6062| drop
6066| return
6070| v128.const 0x00000001 0x00000001 0x00000001 0x00000001
6090| v128.const 0x00000002 0x00000002 0x00000002 0x00000002
6110| i8x16.gt_s %[-2], %[-1]
6114| drop
6118| return
6122| v128.const 0x00000001 0x00000001 0x00000001 0x00000001
6142| v128.const 0x00000002 0x00000002 0x00000002 0x00000002
6162| i8x16.gt_u %[-2], %[-1]
6166| drop
6170| return
6174| v128.const 0x00000001 0x00000001 0x00000001 0x00000001
6194| v128.const 0x00000002 0x00000002 0x00000002 0x00000002
6214| i8x16.le_s %[-2], %[-1]
6218| drop
6222| return
6226| v128.const 0x00000001 0x00000001 0x00000001 0x00000001
6246| v128.const 0x00000002 0x00000002 0x00000002 0x00000002
6266| i8x16.le_u %[-2], %[-1]
6270| drop
6274| return
6278| v128.const 0x00000001 0x00000001 0x00000001 0x00000001
6298| v128.const 0x00000002 0x00000002 0x00000002 0x00000002
6318| i8x16.ge_s %[-2], %[-1]
6322| drop
6326| return
6330| v128.const 0x00000001 0x00000001 0x00000001 0x00000001
6350| v128.const 0x00000002 0x00000002 0x00000002 0x00000002
6370| i8x16.ge_u %[-2], %[-1]
6374| drop
6378| return
6382| v128.const 0x00000001 0x00000001 0x00000001 0x00000001
6402| v128.const 0x00000002 0x00000002 0x00000002 0x00000002
6422| i16x8.eq %[-2], %[-1]
6426| drop
6430| return
6434| v128.const 0x00000001 0x00000001 0x00000001 0x00000001
6454| v128.const 0x00000002 0x00000002 0x00000002 0x00000002
6474| i16x8.ne %[-2], %[-1]
6478| drop
6482| return
6486| v128.const 0x00000001 0x00000001 0x00000001 0x00000001
6506| v128.const 0x00000002 0x00000002 0x00000002 0x00000002
6526| i16x8.lt_s %[-2], %[-1]
6530| drop
6534| return
6538| v128.const 0x00000001 0x00000001 0x00000001 0x00000001
6558| v128.const 0x00000002 0x00000002 0x00000002 0x00000002
6578| i16x8.lt_u %[-2], %[-1]
6582| drop
6586| return
6590| v128.const 0x00000001 0x00000001 0x00000001 0x00000001
6610| v128.const 0x00000002 0x00000002 0x00000002 0x00000002
6630| i16x8.gt_s %[-2], %[-1]
6634| drop
6638| return
6642| v128.const 0x00000001 0x00000001 0x00000001 0x00000001
6662| v128.const 0x00000002 0x00000002 0x00000002 0x00000002
6682| i16x8.gt_u %[-2], %[-1]
6686| drop
6690| return
6694| v128.const 0x00000001 0x00000001 0x00000001 0x00000001
6714| v128.const 0x00000002 0x00000002 0x00000002 0x00000002
6734| i16x8.le_s %[-2], %[-1]
6738| drop
6742| return
6746| v128.const 0x00000001 0x00000001 0x00000001 0x00000001
6766| v128.const 0x00000002 0x00000002 0x00000002 0x00000002
6786| i16x8.le_u %[-2], %[-1]
6790| drop
6794| return
6798| v128.const 0x00000001 0x00000001 0x00000001 0x00000001
6818| v128.const 0x00000002 0x00000002 0x00000002 0x00000002
6838| i16x8.ge_s %[-2], %[-1]
6842| drop
6846| return
6850| v128.const 0x00000001 0x00000001 0x00000001 0x00000001
6870| v128.const 0x00000002 0x00000002 0x00000002 0x00000002
6890| i16x8.ge_u %[-2], %[-1]
6894| drop
6898| return
6902| v128.const 0x00000001 0x00000001 0x00000001 0x00000001
6922| v128.const 0x00000002 0x00000002 0x00000002 0x00000002
6942| i32x4.eq %[-2], %[-1]
6946| drop
6950| return
6954| v128.const 0x00000001 0x00000001 0x00000001 0x00000001
6974| v128.const 0x00000002 0x00000002 0x00000002 0x00000002
6994| i32x4.ne %[-2], %[-1]
6998| drop
7002| return
7006| v128.const 0x00000001 0x00000001 0x00000001 0x00000001
7026| v128.const 0x00000002 0x00000002 0x00000002 0x00000002
7046| i32x4.lt_s %[-2], %[-1]
7050| drop
7054| return
7058| v128.const 0x00000001 0x00000001 0x00000001 0x00000001
7078| v128.const 0x00000002 0x00000002 0x00000002 0x00000002
7098| i32x4.lt_u %[-2], %[-1]
7102| drop
7106| return
7110| v128.const 0x00000001 0x00000001 0x00000001 0x00000001
7130| v128.const 0x00000002 0x00000002 0x00000002 0x00000002
7150| i32x4.gt_s %[-2], %[-1]
7154| drop
7158| return
7162| v128.const 0x00000001 0x00000001 0x00000001 0x00000001
7182| v128.const 0x00000002 0x00000002 0x00000002 0x00000002
7202| i32x4.gt_u %[-2], %[-1]
7206| drop
7210| return
7214| v128.const 0x00000001 0x00000001 0x00000001 0x00000001
7234| v128.const 0x00000002 0x00000002 0x00000002 0x00000002
7254| i32x4.le_s %[-2], %[-1]
7258| drop
7262| return
7266| v128.const 0x00000001 0x00000001 0x00000001 0x00000001
7286| v128.const 0x00000002 0x00000002 0x00000002 0x00000002
7306| i32x4.le_u %[-2], %[-1]
7310| drop
7314| return
7318| v128.const 0x00000001 0x00000001 0x00000001 0x00000001
7338| v128.const 0x00000002 0x00000002 0x00000002 0x00000002
7358| i32x4.ge_s %[-2], %[-1]
7362| drop
7366| return
7370| v128.const 0x00000001 0x00000001 0x00000001 0x00000001
7390| v128.const 0x00000002 0x00000002 0x00000002 0x00000002
7410| i32x4.ge_u %[-2], %[-1]
7414| drop
7418| return
7422| v128.const 0x00000001 0x00000001 0x00000001 0x00000001
7442| v128.const 0x00000002 0x00000002 0x00000002 0x00000002
7462| f32x4.eq %[-2], %[-1]
7466| drop
7470| return
7474| v128.const 0x00000001 0x00000001 0x00000001 0x00000001
7494| v128.const 0x00000002 0x00000002 0x00000002 0x00000002
7514| f32x4.ne %[-2], %[-1]
7518| drop
7522| return
7526| v128.const 0x00000001 0x00000001 0x00000001 0x00000001
7546| v128.const 0x00000002 0x00000002 0x00000002 0x00000002
7566| f32x4.lt %[-2], %[-1]
7570| drop
7574| return
7578| v128.const 0x00000001 0x00000001 0x00000001 0x00000001
7598| v128.const 0x00000002 0x00000002 0x00000002 0x00000002
7618| f32x4.gt %[-2], %[-1]
7622| drop
7626| return
7630| v128.const 0x00000001 0x00000001 0x00000001 0x00000001
7650| v128.const 0x00000002 0x00000002 0x00000002 0x00000002
7670| f32x4.le %[-2], %[-1]
7674| drop
7678| return
7682| v128.const 0x00000001 0x00000001 0x00000001 0x00000001
7702| v128.const 0x00000002 0x00000002 0x00000002 0x00000002
7722| f32x4.ge %[-2], %[-1]
7726| drop
7730| return
7734| v128.const 0x00000001 0x00000001 0x00000001 0x00000001
7754| v128.const 0x00000002 0x00000002 0x00000002 0x00000002
7774| f64x2.eq %[-2], %[-1]
7778| drop
7782| return
7786| v128.const 0x00000001 0x00000001 0x00000001 0x00000001
7806| v128.const 0x00000002 0x00000002 0x00000002 0x00000002
7826| f64x2.ne %[-2], %[-1]
7830| drop
7834| return
7838| v128.const 0x00000001 0x00000001 0x00000001 0x00000001
7858| v128.const 0x00000002 0x00000002 0x00000002 0x00000002
7878| f64x2.lt %[-2], %[-1]
7882| drop
7886| return
7890| v128.const 0x00000001 0x00000001 0x00000001 0x00000001
7910| v128.const 0x00000002 0x00000002 0x00000002 0x00000002
7930| f64x2.gt %[-2], %[-1]
7934| drop
7938| return
7942| v128.const 0x00000001 0x00000001 0x00000001 0x00000001
7962| v128.const 0x00000002 0x00000002 0x00000002 0x00000002
7982| f64x2.le %[-2], %[-1]
7986| drop
7990| return
7994| v128.const 0x00000001 0x00000001 0x00000001 0x00000001
8014| v128.const 0x00000002 0x00000002 0x00000002 0x00000002
8034| f64x2.ge %[-2], %[-1]
8038| drop
8042| return
8046| v128.const 0x00000001 0x00000001 0x00000001 0x00000001
8066| v128.not %[-1]
8070| drop
8074| return
8078| v128.const 0x00000001 0x00000001 0x00000001 0x00000001
8098| v128.const 0x00000002 0x00000002 0x00000002 0x00000002
8118| v128.and %[-2], %[-1]
8122| drop
8126| return
8130| v128.const 0x00000001 0x00000001 0x00000001 0x00000001
8150| v128.const 0x00000002 0x00000002 0x00000002 0x00000002
8170| v128.or %[-2], %[-1]
8174| drop
8178| return
8182| v128.const 0x00000001 0x00000001 0x00000001 0x00000001
8202| v128.const 0x00000002 0x00000002 0x00000002 0x00000002
8222| v128.xor %[-2], %[-1]
8226| drop
8230| return
8234| v128.const 0x00000001 0x00000001 0x00000001 0x00000001
8254| v128.const 0x00000002 0x00000002 0x00000002 0x00000002
8274| v128.const 0x00000003 0x00000003 0x00000003 0x00000003
8294| v128.bitselect %[-3], %[-2], %[-1]
8298| drop
8302| return
8306| v128.const 0x00000001 0x00000001 0x00000001 0x00000001
8326| i8x16.neg %[-1]
8330| drop
8334| return
8338| v128.const 0x00000001 0x00000001 0x00000001 0x00000001
8358| i8x16.any_true %[-1]
8362| drop
8366| return
8370| v128.const 0x00000001 0x00000001 0x00000001 0x00000001
8390| i8x16.all_true %[-1]
8394| drop
8398| return
8402| v128.const 0x00000001 0x00000001 0x00000001 0x00000001
8422| i32.const 0
8430| i8x16.shl %[-2], %[-1]
8434| drop
8438| return
8442| v128.const 0x00000001 0x00000001 0x00000001 0x00000001
8462| i32.const 0
8470| i8x16.shr_s %[-2], %[-1]
8474| drop
8478| return
8482| v128.const 0x00000001 0x00000001 0x00000001 0x00000001
8502| i32.const 0
8510| i8x16.shr_u %[-2], %[-1]
8514| drop
8518| return
8522| v128.const 0x00000001 0x00000001 0x00000001 0x00000001
8542| v128.const 0x00000002 0x00000002 0x00000002 0x00000002
8562| i8x16.add %[-2], %[-1]
8566| drop
8570| return
8574| v128.const 0x00000001 0x00000001 0x00000001 0x00000001
8594| v128.const 0x00000002 0x00000002 0x00000002 0x00000002
8614| i8x16.add_saturate_s %[-2], %[-1]
8618| drop
8622| return
8626| v128.const 0x00000001 0x00000001 0x00000001 0x00000001
8646| v128.const 0x00000002 0x00000002 0x00000002 0x00000002
8666| i8x16.add_saturate_u %[-2], %[-1]
8670| drop
8674| return
8678| v128.const 0x00000001 0x00000001 0x00000001 0x00000001
8698| v128.const 0x00000002 0x00000002 0x00000002 0x00000002
8718| i8x16.sub %[-2], %[-1]
8722| drop
8726| return
8730| v128.const 0x00000001 0x00000001 0x00000001 0x00000001
8750| v128.const 0x00000002 0x00000002 0x00000002 0x00000002
8770| i8x16.sub_saturate_s %[-2], %[-1]
8774| drop
8778| return
8782| v128.const 0x00000001 0x00000001 0x00000001 0x00000001
8802| v128.const 0x00000002 0x00000002 0x00000002 0x00000002
8822| i8x16.sub_saturate_u %[-2], %[-1]
8826| drop
8830| return
8834| v128.const 0x00000001 0x00000001 0x00000001 0x00000001
8854| v128.const 0x00000002 0x00000002 0x00000002 0x00000002
8874| i8x16.mul %[-2], %[-1]
8878| drop
8882| return
8886| v128.const 0x00000001 0x00000001 0x00000001 0x00000001
8906| i16x8.neg %[-1]
8910| drop
8914| return
8918| v128.const 0x00000001 0x00000001 0x00000001 0x00000001
8938| i16x8.any_true %[-1]
8942| drop
8946| return
8950| v128.const 0x00000001 0x00000001 0x00000001 0x00000001
8970| i16x8.all_true %[-1]
8974| drop
8978| return
8982| v128.const 0x00000001 0x00000001 0x00000001 0x00000001
9002| i32.const 0
9010| i16x8.shl %[-2], %[-1]
9014| drop
9018| return
9022| v128.const 0x00000001 0x00000001 0x00000001 0x00000001
9042| i32.const 0
9050| i16x8.shr_s %[-2], %[-1]
9054| drop
9058| return
9062| v128.const 0x00000001 0x00000001 0x00000001 0x00000001
9082| i32.const 0
9090| i16x8.shr_u %[-2], %[-1]
9094| drop
9098| return
9102| v128.const 0x00000001 0x00000001 0x00000001 0x00000001
9122| v128.const 0x00000002 0x00000002 0x00000002 0x00000002
9142| i16x8.add %[-2], %[-1]
9146| drop
9150| return
9154| v128.const 0x00000001 0x00000001 0x00000001 0x00000001
9174| v128.const 0x00000002 0x00000002 0x00000002 0x00000002
9194| i16x8.add_saturate_s %[-2], %[-1]
9198| drop
9202| return
9206| v128.const 0x00000001 0x00000001 0x00000001 0x00000001
9226| v128.const 0x00000002 0x00000002 0x00000002 0x00000002
9246| i16x8.add_saturate_u %[-2], %[-1]
9250| drop
9254| return
9258| v128.const 0x00000001 0x00000001 0x00000001 0x00000001
9278| v128.const 0x00000002 0x00000002 0x00000002 0x00000002
9298| i16x8.sub %[-2], %[-1]
9302| drop
9306| return
9310| v128.const 0x00000001 0x00000001 0x00000001 0x00000001
9330| v128.const 0x00000002 0x00000002 0x00000002 0x00000002
9350| i16x8.sub_saturate_s %[-2], %[-1]
9354| drop
9358| return
9362| v128.const 0x00000001 0x00000001 0x00000001 0x00000001
9382| v128.const 0x00000002 0x00000002 0x00000002 0x00000002
9402| i16x8.sub_saturate_u %[-2], %[-1]
9406| drop
9410| return
9414| v128.const 0x00000001 0x00000001 0x00000001 0x00000001
9434| v128.const 0x00000002 0x00000002 0x00000002 0x00000002
9454| i16x8.mul %[-2], %[-1]
9458| drop
9462| return
9466| v128.const 0x00000001 0x00000001 0x00000001 0x00000001
9486| i32x4.neg %[-1]
9490| drop
9494| return
9498| v128.const 0x00000001 0x00000001 0x00000001 0x00000001
9518| i32x4.any_true %[-1]
9522| drop
9526| return
9530| v128.const 0x00000001 0x00000001 0x00000001 0x00000001
9550| i32x4.all_true %[-1]
9554| drop
9558| return
9562| v128.const 0x00000001 0x00000001 0x00000001 0x00000001
9582| i32.const 0
9590| i32x4.shl %[-2], %[-1]
9594| drop
9598| return
9602| v128.const 0x00000001 0x00000001 0x00000001 0x00000001
9622| i32.const 0
9630| i32x4.shr_s %[-2], %[-1]
9634| drop
9638| return
9642| v128.const 0x00000001 0x00000001 0x00000001 0x00000001
9662| i32.const 0
9670| i32x4.shr_u %[-2], %[-1]
9674| drop
9678| return
9682| v128.const 0x00000001 0x00000001 0x00000001 0x00000001
9702| v128.const 0x00000002 0x00000002 0x00000002 0x00000002
9722| i32x4.add %[-2], %[-1]
9726| drop
9730| return
9734| v128.const 0x00000001 0x00000001 0x00000001 0x00000001
9754| v128.const 0x00000002 0x00000002 0x00000002 0x00000002
9774| i32x4.sub %[-2], %[-1]
9778| drop
9782| return
9786| v128.const 0x00000001 0x00000001 0x00000001 0x00000001
9806| v128.const 0x00000002 0x00000002 0x00000002 0x00000002
9826| i32x4.mul %[-2], %[-1]
9830| drop
9834| return
9838| v128.const 0x00000001 0x00000001 0x00000001 0x00000001
9858| i64x2.neg %[-1]
9862| drop
9866| return
9870| v128.const 0x00000001 0x00000001 0x00000001 0x00000001
9890| i64x2.any_true %[-1]
9894| drop
9898| return
9902| v128.const 0x00000001 0x00000001 0x00000001 0x00000001
9922| i64x2.all_true %[-1]
9926| drop
9930| return
9934| v128.const 0x00000001 0x00000001 0x00000001 0x00000001
9954| i32.const 0
9962| i64x2.shl %[-2], %[-1]
9966| drop
9970| return
9974| v128.const 0x00000001 0x00000001 0x00000001 0x00000001
9994| i32.const 0
10002| i64x2.shr_s %[-2], %[-1]
10006| drop
10010| return
10014| v128.const 0x00000001 0x00000001 0x00000001 0x00000001
10034| i32.const 0
10042| i64x2.shr_u %[-2], %[-1]
10046| drop
10050| return
10054| v128.const 0x00000001 0x00000001 0x00000001 0x00000001
10074| v128.const 0x00000002 0x00000002 0x00000002 0x00000002
10094| i64x2.add %[-2], %[-1]
10098| drop
10102| return
10106| v128.const 0x00000001 0x00000001 0x00000001 0x00000001
10126| v128.const 0x00000002 0x00000002 0x00000002 0x00000002
10146| i64x2.sub %[-2], %[-1]
10150| drop
10154| return
10158| v128.const 0x00000001 0x00000001 0x00000001 0x00000001
10178| f32x4.abs %[-1]
10182| drop
10186| return
10190| v128.const 0x00000001 0x00000001 0x00000001 0x00000001
10210| f32x4.neg %[-1]
10214| drop
10218| return
10222| v128.const 0x00000001 0x00000001 0x00000001 0x00000001
10242| f32x4.sqrt %[-1]
10246| drop
10250| return
10254| v128.const 0x00000001 0x00000001 0x00000001 0x00000001
10274| v128.const 0x00000002 0x00000002 0x00000002 0x00000002
10294| f32x4.add %[-2], %[-1]
10298| drop
10302| return
10306| v128.const 0x00000001 0x00000001 0x00000001 0x00000001
10326| v128.const 0x00000002 0x00000002 0x00000002 0x00000002
10346| f32x4.sub %[-2], %[-1]
10350| drop
10354| return
10358| v128.const 0x00000001 0x00000001 0x00000001 0x00000001
10378| v128.const 0x00000002 0x00000002 0x00000002 0x00000002
10398| f32x4.mul %[-2], %[-1]
10402| drop
10406| return
10410| v128.const 0x00000001 0x00000001 0x00000001 0x00000001
10430| v128.const 0x00000002 0x00000002 0x00000002 0x00000002
10450| f32x4.div %[-2], %[-1]
10454| drop
10458| return
10462| v128.const 0x00000001 0x00000001 0x00000001 0x00000001
10482| v128.const 0x00000002 0x00000002 0x00000002 0x00000002
10502| f32x4.min %[-2], %[-1]
10506| drop
10510| return
10514| v128.const 0x00000001 0x00000001 0x00000001 0x00000001
10534| v128.const 0x00000002 0x00000002 0x00000002 0x00000002
10554| f32x4.max %[-2], %[-1]
10558| drop
10562| return
10566| v128.const 0x00000001 0x00000001 0x00000001 0x00000001
10586| f64x2.abs %[-1]
10590| drop
10594| return
10598| v128.const 0x00000001 0x00000001 0x00000001 0x00000001
10618| f64x2.neg %[-1]
10622| drop
10626| return
10630| v128.const 0x00000001 0x00000001 0x00000001 0x00000001
10650| f64x2.sqrt %[-1]
10654| drop
10658| return
10662| v128.const 0x00000001 0x00000001 0x00000001 0x00000001
10682| v128.const 0x00000002 0x00000002 0x00000002 0x00000002
10702| f64x2.add %[-2], %[-1]
10706| drop
10710| return
10714| v128.const 0x00000001 0x00000001 0x00000001 0x00000001
10734| v128.const 0x00000002 0x00000002 0x00000002 0x00000002
10754| f64x2.sub %[-2], %[-1]
10758| drop
10762| return
10766| v128.const 0x00000001 0x00000001 0x00000001 0x00000001
10786| v128.const 0x00000002 0x00000002 0x00000002 0x00000002
10806| f64x2.mul %[-2], %[-1]
10810| drop
10814| return
10818| v128.const 0x00000001 0x00000001 0x00000001 0x00000001
10838| v128.const 0x00000002 0x00000002 0x00000002 0x00000002
10858| f64x2.div %[-2], %[-1]
10862| drop
10866| return
10870| v128.const 0x00000001 0x00000001 0x00000001 0x00000001
10890| v128.const 0x00000002 0x00000002 0x00000002 0x00000002
10910| f64x2.min %[-2], %[-1]
10914| drop
10918| return
10922| v128.const 0x00000001 0x00000001 0x00000001 0x00000001
10942| v128.const 0x00000002 0x00000002 0x00000002 0x00000002
10962| f64x2.max %[-2], %[-1]
10966| drop
10970| return
10974| v128.const 0x00000001 0x00000001 0x00000001 0x00000001
10994| i32x4.trunc_sat_f32x4_s %[-1]
10998| drop
11002| return
11006| v128.const 0x00000001 0x00000001 0x00000001 0x00000001
11026| i32x4.trunc_sat_f32x4_u %[-1]
11030| drop
11034| return
11038| v128.const 0x00000001 0x00000001 0x00000001 0x00000001
11058| i64x2.trunc_sat_f64x2_s %[-1]
11062| drop
11066| return
11070| v128.const 0x00000001 0x00000001 0x00000001 0x00000001
11090| i64x2.trunc_sat_f64x2_u %[-1]
11094| drop
11098| return
11102| v128.const 0x00000001 0x00000001 0x00000001 0x00000001
11122| f32x4.convert_i32x4_s %[-1]
11126| drop
11130| return
11134| v128.const 0x00000001 0x00000001 0x00000001 0x00000001
11154| f32x4.convert_i32x4_u %[-1]
11158| drop
11162| return
11166| v128.const 0x00000001 0x00000001 0x00000001 0x00000001
11186| f64x2.convert_i64x2_s %[-1]
11190| drop
11194| return
11198| v128.const 0x00000001 0x00000001 0x00000001 0x00000001
11218| f64x2.convert_i64x2_u %[-1]
11222| drop
11226| return
11230| i32.const 1
11238| i32.const 2
11246| atomic.notify $0:%[-2]+$3, %[-1]
11258| drop
11262| return
11266| i32.const 1
11274| i32.const 2
11282| i64.const 3
11294| i32.atomic.wait $0:%[-3]+$3, %[-2], %[-1]
11306| drop
11310| return
11314| i32.const 1
11322| i64.const 2
11334| i64.const 3
11346| i64.atomic.wait $0:%[-3]+$3, %[-2], %[-1]
11358| drop
11362| return
11366| i32.const 1
11374| i32.atomic.load $0:%[-1]+$3
11386| drop
11390| return
11394| i32.const 1
11402| i64.atomic.load $0:%[-1]+$7
11414| drop
11418| return
11422| i32.const 1
11430| i32.atomic.load8_u $0:%[-1]+$3
11442| drop
11446| return
11450| i32.const 1
11458| i32.atomic.load16_u $0:%[-1]+$3
11470| drop
11474| return
11478| i32.const 1
11486| i64.atomic.load8_u $0:%[-1]+$3
11498| drop
11502| return
11506| i32.const 1
11514| i64.atomic.load16_u $0:%[-1]+$3
11526| drop
11530| return
11534| i32.const 1
11542| i64.atomic.load32_u $0:%[-1]+$3
11554| drop
11558| return
11562| i32.const 1
11570| i32.const 2
11578| i32.atomic.store $0:%[-2]+$3, %[-1]
11590| return
11594| i32.const 1
11602| i64.const 2
11614| i64.atomic.store $0:%[-2]+$7, %[-1]
11626| return
11630| i32.const 1
11638| i32.const 2
11646| i32.atomic.store8 $0:%[-2]+$3, %[-1]
11658| return
11662| i32.const 1
11670| i32.const 2
11678| i32.atomic.store16 $0:%[-2]+$3, %[-1]
11690| return
11694| i32.const 1
11702| i64.const 2
11714| i64.atomic.store8 $0:%[-2]+$3, %[-1]
11726| return
11730| i32.const 1
11738| i64.const 2
11750| i64.atomic.store16 $0:%[-2]+$3, %[-1]
11762| return
11766| i32.const 1
11774| i64.const 2
11786| i64.atomic.store32 $0:%[-2]+$3, %[-1]
11798| return
11802| i32.const 1
11810| i32.const 2
11818| i32.atomic.rmw.add $0:%[-2]+$3, %[-1]
11830| drop
11834| return
11838| i32.const 1
11846| i64.const 2
11858| i64.atomic.rmw.add $0:%[-2]+$7, %[-1]
11870| drop
11874| return
11878| i32.const 1
11886| i32.const 2
11894| i32.atomic.rmw8.add_u $0:%[-2]+$3, %[-1]
11906| drop
11910| return
11914| i32.const 1
11922| i32.const 2
11930| i32.atomic.rmw16.add_u $0:%[-2]+$3, %[-1]
11942| drop
11946| return
11950| i32.const 1
11958| i64.const 2
11970| i64.atomic.rmw8.add_u $0:%[-2]+$3, %[-1]
11982| drop
11986| return
11990| i32.const 1
11998| i64.const 2
12010| i64.atomic.rmw16.add_u $0:%[-2]+$3, %[-1]
12022| drop
12026| return
12030| i32.const 1
12038| i64.const 2
12050| i64.atomic.rmw32.add_u $0:%[-2]+$3, %[-1]
12062| drop
12066| return
12070| i32.const 1
12078| i32.const 2
12086| i32.atomic.rmw.sub $0:%[-2]+$3, %[-1]
12098| drop
12102| return
12106| i32.const 1
12114| i64.const 2
12126| i64.atomic.rmw.sub $0:%[-2]+$7, %[-1]
12138| drop
12142| return
12146| i32.const 1
12154| i32.const 2
12162| i32.atomic.rmw8.sub_u $0:%[-2]+$3, %[-1]
12174| drop
12178| return
12182| i32.const 1
12190| i32.const 2
12198| i32.atomic.rmw16.sub_u $0:%[-2]+$3, %[-1]
12210| drop
12214| return
12218| i32.const 1
12226| i64.const 2
12238| i64.atomic.rmw8.sub_u $0:%[-2]+$3, %[-1]
12250| drop
12254| return
12258| i32.const 1
12266| i64.const 2
12278| i64.atomic.rmw16.sub_u $0:%[-2]+$3, %[-1]
12290| drop
12294| return
12298| i32.const 1
12306| i64.const 2
12318| i64.atomic.rmw32.sub_u $0:%[-2]+$3, %[-1]
12330| drop
12334| return
12338| i32.const 1
12346| i32.const 2
12354| i32.atomic.rmw.and $0:%[-2]+$3, %[-1]
12366| drop
12370| return
12374| i32.const 1
12382| i64.const 2
12394| i64.atomic.rmw.and $0:%[-2]+$7, %[-1]
12406| drop
12410| return
12414| i32.const 1
12422| i32.const 2
12430| i32.atomic.rmw8.and_u $0:%[-2]+$3, %[-1]
12442| drop
12446| return
12450| i32.const 1
12458| i32.const 2
12466| i32.atomic.rmw16.and_u $0:%[-2]+$3, %[-1]
12478| drop
12482| return
12486| i32.const 1
12494| i64.const 2
12506| i64.atomic.rmw8.and_u $0:%[-2]+$3, %[-1]
12518| drop
12522| return
12526| i32.const 1
12534| i64.const 2
12546| i64.atomic.rmw16.and_u $0:%[-2]+$3, %[-1]
12558| drop
12562| return
12566| i32.const 1
12574| i64.const 2
12586| i64.atomic.rmw32.and_u $0:%[-2]+$3, %[-1]
12598| drop
12602| return
12606| i32.const 1
12614| i32.const 2
12622| i32.atomic.rmw.or $0:%[-2]+$3, %[-1]
12634| drop
12638| return
12642| i32.const 1
12650| i64.const 2
12662| i64.atomic.rmw.or $0:%[-2]+$7, %[-1]
12674| drop
12678| return
12682| i32.const 1
12690| i32.const 2
12698| i32.atomic.rmw8.or_u $0:%[-2]+$3, %[-1]
12710| drop
12714| return
12718| i32.const 1
12726| i32.const 2
12734| i32.atomic.rmw16.or_u $0:%[-2]+$3, %[-1]
12746| drop
12750| return
12754| i32.const 1
12762| i64.const 2
12774| i64.atomic.rmw8.or_u $0:%[-2]+$3, %[-1]
12786| drop
12790| return
12794| i32.const 1
12802| i64.const 2
12814| i64.atomic.rmw16.or_u $0:%[-2]+$3, %[-1]
12826| drop
12830| return
12834| i32.const 1
12842| i64.const 2
12854| i64.atomic.rmw32.or_u $0:%[-2]+$3, %[-1]
12866| drop
12870| return
12874| i32.const 1
12882| i32.const 2
12890| i32.atomic.rmw.xor $0:%[-2]+$3, %[-1]
12902| drop
12906| return
12910| i32.const 1
12918| i64.const 2
12930| i64.atomic.rmw.xor $0:%[-2]+$7, %[-1]
12942| drop
12946| return
12950| i32.const 1
12958| i32.const 2
12966| i32.atomic.rmw8.xor_u $0:%[-2]+$3, %[-1]
12978| drop
12982| return
12986| i32.const 1
12994| i32.const 2
13002| i32.atomic.rmw16.xor_u $0:%[-2]+$3, %[-1]
13014| drop
13018| return
13022| i32.const 1
13030| i64.const 2
13042| i64.atomic.rmw8.xor_u $0:%[-2]+$3, %[-1]
13054| drop
13058| return
13062| i32.const 1
13070| i64.const 2
13082| i64.atomic.rmw16.xor_u $0:%[-2]+$3, %[-1]
13094| drop
13098| return
13102| i32.const 1
13110| i64.const 2
13122| i64.atomic.rmw32.xor_u $0:%[-2]+$3, %[-1]
13134| drop
13138| return
13142| i32.const 1
13150| i32.const 2
13158| i32.atomic.rmw.xchg $0:%[-2]+$3, %[-1]
13170| drop
13174| return
13178| i32.const 1
13186| i64.const 2
13198| i64.atomic.rmw.xchg $0:%[-2]+$7, %[-1]
13210| drop
13214| return
13218| i32.const 1
13226| i32.const 2
13234| i32.atomic.rmw8.xchg_u $0:%[-2]+$3, %[-1]
13246| drop
13250| return
13254| i32.const 1
13262| i32.const 2
13270| i32.atomic.rmw16.xchg_u $0:%[-2]+$3, %[-1]
13282| drop
13286| return
13290| i32.const 1
13298| i64.const 2
13310| i64.atomic.rmw8.xchg_u $0:%[-2]+$3, %[-1]
13322| drop
13326| return
13330| i32.const 1
13338| i64.const 2
13350| i64.atomic.rmw16.xchg_u $0:%[-2]+$3, %[-1]
13362| drop
13366| return
13370| i32.const 1
13378| i64.const 2
13390| i64.atomic.rmw32.xchg_u $0:%[-2]+$3, %[-1]
13402| drop
13406| return
13410| i32.const 1
13418| i32.const 2
13426| i32.const 3
13434| i32.atomic.rmw.cmpxchg $0:%[-3]+$3, %[-2], %[-1]
13446| drop
13450| return
13454| i32.const 1
13462| i64.const 2
13474| i64.const 3
13486| i64.atomic.rmw.cmpxchg $0:%[-3]+$7, %[-2], %[-1]
13498| drop
13502| return
13506| i32.const 1
13514| i32.const 2
13522| i32.const 3
13530| i32.atomic.rmw8.cmpxchg_u $0:%[-3]+$3, %[-2], %[-1]
13542| drop
13546| return
13550| i32.const 1
13558| i32.const 2
13566| i32.const 3
13574| i32.atomic.rmw16.cmpxchg_u $0:%[-3]+$3, %[-2], %[-1]
13586| drop
13590| return
13594| i32.const 1
13602| i64.const 2
13614| i64.const 3
13626| i64.atomic.rmw8.cmpxchg_u $0:%[-3]+$3, %[-2], %[-1]
13638| drop
13642| return
13646| i32.const 1
13654| i64.const 2
13666| i64.const 3
13678| i64.atomic.rmw16.cmpxchg_u $0:%[-3]+$3, %[-2], %[-1]
13690| drop
13694| return
13698| i32.const 1
13706| i64.const 2
13718| i64.const 3
13730| i64.atomic.rmw32.cmpxchg_u $0:%[-3]+$3, %[-2], %[-1]
13742| drop
13746| return
unreachable() => error: unreachable executed
br() =>
br_table() =>
return() =>
call() =>
call_indirect() =>
return_call() =>
return_call_indirect() =>
drop() =>
select() =>
get_local() =>
set_local() =>
tee_local() =>
get_global() =>
set_global() =>
i32.load() =>
i64.load() =>
f32.load() =>
f64.load() =>
i32.load8_s() =>
i32.load8_u() =>
i32.load16_s() =>
i32.load16_u() =>
i64.load8_s() =>
i64.load8_u() =>
i64.load16_s() =>
i64.load16_u() =>
i64.load32_s() =>
i64.load32_u() =>
i32.store() =>
i64.store() =>
f32.store() =>
f64.store() =>
i32.store8() =>
i32.store16() =>
i64.store8() =>
i64.store16() =>
i64.store32() =>
current_memory() =>
grow_memory() =>
i32.const() =>
i64.const() =>
f32.const() =>
f64.const() =>
i32.eqz() =>
i32.eq() =>
i32.ne() =>
i32.lt_s() =>
i32.lt_u() =>
i32.gt_s() =>
i32.gt_u() =>
i32.le_s() =>
i32.le_u() =>
i32.ge_s() =>
i32.ge_u() =>
i64.eqz() =>
i64.eq() =>
i64.ne() =>
i64.lt_s() =>
i64.lt_u() =>
i64.gt_s() =>
i64.gt_u() =>
i64.le_s() =>
i64.le_u() =>
i64.ge_s() =>
i64.ge_u() =>
f32.eq() =>
f32.ne() =>
f32.lt() =>
f32.gt() =>
f32.le() =>
f32.ge() =>
f64.eq() =>
f64.ne() =>
f64.lt() =>
f64.gt() =>
f64.le() =>
f64.ge() =>
i32.clz() =>
i32.ctz() =>
i32.popcnt() =>
i32.add() =>
i32.sub() =>
i32.mul() =>
i32.div_s() =>
i32.div_u() =>
i32.rem_s() =>
i32.rem_u() =>
i32.and() =>
i32.or() =>
i32.xor() =>
i32.shl() =>
i32.shr_s() =>
i32.shr_u() =>
i32.rotl() =>
i32.rotr() =>
i64.clz() =>
i64.ctz() =>
i64.popcnt() =>
i64.add() =>
i64.sub() =>
i64.mul() =>
i64.div_s() =>
i64.div_u() =>
i64.rem_s() =>
i64.rem_u() =>
i64.and() =>
i64.or() =>
i64.xor() =>
i64.shl() =>
i64.shr_s() =>
i64.shr_u() =>
i64.rotl() =>
i64.rotr() =>
f32.abs() =>
f32.neg() =>
f32.ceil() =>
f32.floor() =>
f32.trunc() =>
f32.nearest() =>
f32.sqrt() =>
f32.add() =>
f32.sub() =>
f32.mul() =>
f32.div() =>
f32.min() =>
f32.max() =>
f32.copysign() =>
f64.abs() =>
f64.neg() =>
f64.ceil() =>
f64.floor() =>
f64.trunc() =>
f64.nearest() =>
f64.sqrt() =>
f64.add() =>
f64.sub() =>
f64.mul() =>
f64.div() =>
f64.min() =>
f64.max() =>
f64.copysign() =>
i32.wrap/i64() =>
i32.trunc_s/f32() =>
i32.trunc_u/f32() =>
i32.trunc_s/f64() =>
i32.trunc_u/f64() =>
i64.extend_s/i32() =>
i64.extend_u/i32() =>
i64.trunc_s/f32() =>
i64.trunc_u/f32() =>
i64.trunc_s/f64() =>
i64.trunc_u/f64() =>
f32.convert_s/i32() =>
f32.convert_u/i32() =>
f32.convert_s/i64() =>
f32.convert_u/i64() =>
f32.demote/f64() =>
f64.convert_s/i32() =>
f64.convert_u/i32() =>
f64.convert_s/i64() =>
f64.convert_u/i64() =>
f64.promote/f32() =>
i32.reinterpret/f32() =>
f32.reinterpret/i32() =>
i64.reinterpret/f64() =>
f64.reinterpret/i64() =>
i32.extend8_s() =>
i32.extend16_s() =>
i64.extend8_s() =>
i64.extend16_s() =>
i64.extend32_s() =>
alloca() =>
br_unless() =>
called host host.print(i32:1) =>
call_host() =>
data() =>
drop_keep() =>
i32.trunc_s:sat/f32() =>
i32.trunc_u:sat/f32() =>
i32.trunc_s:sat/f64() =>
i32.trunc_u:sat/f64() =>
i64.trunc_s:sat/f32() =>
i64.trunc_u:sat/f32() =>
i64.trunc_s:sat/f64() =>
i64.trunc_u:sat/f64() =>
v128.load() =>
v128.store() =>
v128.const() =>
v8x16.shuffle() =>
i8x16.splat() =>
i8x16.extract_lane_s() =>
i8x16.extract_lane_u() =>
i8x16.replace_lane() =>
i16x8.splat() =>
i16x8.extract_lane_s() =>
i16x8.extract_lane_u() =>
i16x8.replace_lane() =>
i32x4.splat() =>
i32x4.extract_lane() =>
i32x4.replace_lane() =>
i64x2.splat() =>
i64x2.extract_lane() =>
i64x2.replace_lane() =>
f32x4.splat() =>
f32x4.extract_lane() =>
f32x4.replace_lane() =>
f64x2.splat() =>
f64x2.extract_lane() =>
f64x2.replace_lane() =>
i8x16.eq() =>
i8x16.ne() =>
i8x16.lt_s() =>
i8x16.lt_u() =>
i8x16.gt_s() =>
i8x16.gt_u() =>
i8x16.le_s() =>
i8x16.le_u() =>
i8x16.ge_s() =>
i8x16.ge_u() =>
i16x8.eq() =>
i16x8.ne() =>
i16x8.lt_s() =>
i16x8.lt_u() =>
i16x8.gt_s() =>
i16x8.gt_u() =>
i16x8.le_s() =>
i16x8.le_u() =>
i16x8.ge_s() =>
i16x8.ge_u() =>
i32x4.eq() =>
i32x4.ne() =>
i32x4.lt_s() =>
i32x4.lt_u() =>
i32x4.gt_s() =>
i32x4.gt_u() =>
i32x4.le_s() =>
i32x4.le_u() =>
i32x4.ge_s() =>
i32x4.ge_u() =>
f32x4.eq() =>
f32x4.ne() =>
f32x4.lt() =>
f32x4.gt() =>
f32x4.le() =>
f32x4.ge() =>
f64x2.eq() =>
f64x2.ne() =>
f64x2.lt() =>
f64x2.gt() =>
f64x2.le() =>
f64x2.ge() =>
v128.not() =>
v128.and() =>
v128.or() =>
v128.xor() =>
v128.bitselect() =>
i8x16.neg() =>
i8x16.any_true() =>
i8x16.all_true() =>
i8x16.shl() =>
i8x16.shr_s() =>
i8x16.shr_u() =>
i8x16.add() =>
i8x16.add_saturate_s() =>
i8x16.add_saturate_u() =>
i8x16.sub() =>
i8x16.sub_saturate_s() =>
i8x16.sub_saturate_u() =>
i8x16.mul() =>
i16x8.neg() =>
i16x8.any_true() =>
i16x8.all_true() =>
i16x8.shl() =>
i16x8.shr_s() =>
i16x8.shr_u() =>
i16x8.add() =>
i16x8.add_saturate_s() =>
i16x8.add_saturate_u() =>
i16x8.sub() =>
i16x8.sub_saturate_s() =>
i16x8.sub_saturate_u() =>
i16x8.mul() =>
i32x4.neg() =>
i32x4.any_true() =>
i32x4.all_true() =>
i32x4.shl() =>
i32x4.shr_s() =>
i32x4.shr_u() =>
i32x4.add() =>
i32x4.sub() =>
i32x4.mul() =>
i64x2.neg() =>
i64x2.any_true() =>
i64x2.all_true() =>
i64x2.shl() =>
i64x2.shr_s() =>
i64x2.shr_u() =>
i64x2.add() =>
i64x2.sub() =>
f32x4.abs() =>
f32x4.neg() =>
f32x4.sqrt() =>
f32x4.add() =>
f32x4.sub() =>
f32x4.mul() =>
f32x4.div() =>
f32x4.min() =>
f32x4.max() =>
f64x2.abs() =>
f64x2.neg() =>
f64x2.sqrt() =>
f64x2.add() =>
f64x2.sub() =>
f64x2.mul() =>
f64x2.div() =>
f64x2.min() =>
f64x2.max() =>
i32x4.trunc_sat_f32x4_s() =>
i32x4.trunc_sat_f32x4_u() =>
i64x2.trunc_sat_f64x2_s() =>
i64x2.trunc_sat_f64x2_u() =>
f32x4.convert_i32x4_s() =>
f32x4.convert_i32x4_u() =>
f64x2.convert_i64x2_s() =>
f64x2.convert_i64x2_u() =>
atomic.notify() => error: unreachable executed
i32.atomic.wait() => error: unreachable executed
i64.atomic.wait() => error: unreachable executed
i32.atomic.load() =>
i64.atomic.load() =>
i32.atomic.load8_u() =>
i32.atomic.load16_u() =>
i64.atomic.load8_u() =>
i64.atomic.load16_u() =>
i64.atomic.load32_u() =>
i32.atomic.store() =>
i64.atomic.store() =>
i32.atomic.store8() =>
i32.atomic.store16() =>
i64.atomic.store8() =>
i64.atomic.store16() =>
i64.atomic.store32() =>
i32.atomic.rmw.add() =>
i64.atomic.rmw.add() =>
i32.atomic.rmw8.add_u() =>
i32.atomic.rmw16.add_u() =>
i64.atomic.rmw8.add_u() =>
i64.atomic.rmw16.add_u() =>
i64.atomic.rmw32.add_u() =>
i32.atomic.rmw.sub() =>
i64.atomic.rmw.sub() =>
i32.atomic.rmw8.sub_u() =>
i32.atomic.rmw16.sub_u() =>
i64.atomic.rmw8.sub_u() =>
i64.atomic.rmw16.sub_u() =>
i64.atomic.rmw32.sub_u() =>
i32.atomic.rmw.and() =>
i64.atomic.rmw.and() =>
i32.atomic.rmw8.and_u() =>
i32.atomic.rmw16.and_u() =>
i64.atomic.rmw8.and_u() =>
i64.atomic.rmw16.and_u() =>
i64.atomic.rmw32.and_u() =>
i32.atomic.rmw.or() =>
i64.atomic.rmw.or() =>
i32.atomic.rmw8.or_u() =>
i32.atomic.rmw16.or_u() =>
i64.atomic.rmw8.or_u() =>
i64.atomic.rmw16.or_u() =>
i64.atomic.rmw32.or_u() =>
i32.atomic.rmw.xor() =>
i64.atomic.rmw.xor() =>
i32.atomic.rmw8.xor_u() =>
i32.atomic.rmw16.xor_u() =>
i64.atomic.rmw8.xor_u() =>
i64.atomic.rmw16.xor_u() =>
i64.atomic.rmw32.xor_u() =>
i32.atomic.rmw.xchg() =>
i64.atomic.rmw.xchg() =>
i32.atomic.rmw8.xchg_u() =>
i32.atomic.rmw16.xchg_u() =>
i64.atomic.rmw8.xchg_u() =>
i64.atomic.rmw16.xchg_u() =>
i64.atomic.rmw32.xchg_u() =>
i32.atomic.rmw.cmpxchg() =>
i64.atomic.rmw.cmpxchg() =>
i32.atomic.rmw8.cmpxchg_u() =>
i32.atomic.rmw16.cmpxchg_u() =>
i64.atomic.rmw8.cmpxchg_u() =>
i64.atomic.rmw16.cmpxchg_u() =>
i64.atomic.rmw32.cmpxchg_u() =>
;;; STDOUT ;;)
